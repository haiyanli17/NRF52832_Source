cscope 15 $HOME/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app -q 0000002548 0000278085
	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/config/sdk_config.h

43 #iâdeà
SDK_CONFIG_H


44 
	#SDK_CONFIG_H


	)

46 #ifdeà
USE_APP_CONFIG


47 
	~"­p_cÚfig.h
"

54 #iâdeà
GZLL_PA_LNA_CONTROL


55 
	#GZLL_PA_LNA_CONTROL
 0

	)

96 #iâdeà
GZLL_PA_LNA_CHL_PIN


97 
	#GZLL_PA_LNA_CHL_PIN
 21

	)

136 #iâdeà
GZLL_PA_LNA_CPS_PIN


137 
	#GZLL_PA_LNA_CPS_PIN
 22

	)

176 #iâdeà
GZLL_PA_LNA_ANT_SEL_PIN


177 
	#GZLL_PA_LNA_ANT_SEL_PIN
 23

	)

216 #iâdeà
GZLL_PA_LNA_CSD_PIN


217 
	#GZLL_PA_LNA_CSD_PIN
 24

	)

256 #iâdeà
GZLL_PA_LNA_CTX_PIN


257 
	#GZLL_PA_LNA_CTX_PIN
 27

	)

296 #iâdeà
GZLL_PA_LNA_CRX_PIN


297 
	#GZLL_PA_LNA_CRX_PIN
 2

	)

317 #iâdeà
GZLL_PA_LNA_TX_GPIOTE_CHAN


318 
	#GZLL_PA_LNA_TX_GPIOTE_CHAN
 0

	)

332 #iâdeà
GZLL_PA_LNA_RX_GPIOTE_CHAN


333 
	#GZLL_PA_LNA_RX_GPIOTE_CHAN
 1

	)

359 #iâdeà
GZLL_PA_LNA_PPI_CHAN_1


360 
	#GZLL_PA_LNA_PPI_CHAN_1
 12

	)

386 #iâdeà
GZLL_PA_LNA_PPI_CHAN_2


387 
	#GZLL_PA_LNA_PPI_CHAN_2
 13

	)

413 #iâdeà
GZLL_PA_LNA_PPI_CHAN_3


414 
	#GZLL_PA_LNA_PPI_CHAN_3
 14

	)

440 #iâdeà
GZLL_PA_LNA_PPI_CHAN_4


441 
	#GZLL_PA_LNA_PPI_CHAN_4
 15

	)

451 #iâdeà
GZLL_PA_LNA_TIMER_NUM


452 
	#GZLL_PA_LNA_TIMER_NUM
 3

	)

464 #iâdeà
GZLL_PA_ENABLED


465 
	#GZLL_PA_ENABLED
 1

	)

471 #iâdeà
GZLL_LNA_ENABLED


472 
	#GZLL_LNA_ENABLED
 1

	)

478 #iâdeà
GZLL_PA_ACTIVE_HIGH


479 
	#GZLL_PA_ACTIVE_HIGH
 1

	)

485 #iâdeà
GZLL_LNA_ACTIVE_HIGH


486 
	#GZLL_LNA_ACTIVE_HIGH
 1

	)

492 #iâdeà
GZLL_PA_LNA_RAMP_UP_TIME


493 
	#GZLL_PA_LNA_RAMP_UP_TIME
 1

	)

504 #iâdeà
GZLL_TX_STATISTICS


505 
	#GZLL_TX_STATISTICS
 1

	)

516 #iâdeà
GPIOTE_ENABLED


517 
	#GPIOTE_ENABLED
 1

	)

520 #iâdeà
GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS


521 
	#GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS
 4

	)

537 #iâdeà
GPIOTE_CONFIG_IRQ_PRIORITY


538 
	#GPIOTE_CONFIG_IRQ_PRIORITY
 6

	)

545 #iâdeà
NRFX_GPIOTE_ENABLED


546 
	#NRFX_GPIOTE_ENABLED
 1

	)

549 #iâdeà
NRFX_GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS


550 
	#NRFX_GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS
 1

	)

564 #iâdeà
NRFX_GPIOTE_CONFIG_IRQ_PRIORITY


565 
	#NRFX_GPIOTE_CONFIG_IRQ_PRIORITY
 6

	)

570 #iâdeà
NRFX_GPIOTE_CONFIG_LOG_ENABLED


571 
	#NRFX_GPIOTE_CONFIG_LOG_ENABLED
 0

	)

581 #iâdeà
NRFX_GPIOTE_CONFIG_LOG_LEVEL


582 
	#NRFX_GPIOTE_CONFIG_LOG_LEVEL
 3

	)

597 #iâdeà
NRFX_GPIOTE_CONFIG_INFO_COLOR


598 
	#NRFX_GPIOTE_CONFIG_INFO_COLOR
 0

	)

613 #iâdeà
NRFX_GPIOTE_CONFIG_DEBUG_COLOR


614 
	#NRFX_GPIOTE_CONFIG_DEBUG_COLOR
 0

	)

623 #iâdeà
NRFX_PRS_ENABLED


624 
	#NRFX_PRS_ENABLED
 1

	)

629 #iâdeà
NRFX_PRS_BOX_0_ENABLED


630 
	#NRFX_PRS_BOX_0_ENABLED
 0

	)

636 #iâdeà
NRFX_PRS_BOX_1_ENABLED


637 
	#NRFX_PRS_BOX_1_ENABLED
 0

	)

643 #iâdeà
NRFX_PRS_BOX_2_ENABLED


644 
	#NRFX_PRS_BOX_2_ENABLED
 0

	)

650 #iâdeà
NRFX_PRS_BOX_3_ENABLED


651 
	#NRFX_PRS_BOX_3_ENABLED
 0

	)

657 #iâdeà
NRFX_PRS_BOX_4_ENABLED


658 
	#NRFX_PRS_BOX_4_ENABLED
 1

	)

663 #iâdeà
NRFX_PRS_CONFIG_LOG_ENABLED


664 
	#NRFX_PRS_CONFIG_LOG_ENABLED
 0

	)

674 #iâdeà
NRFX_PRS_CONFIG_LOG_LEVEL


675 
	#NRFX_PRS_CONFIG_LOG_LEVEL
 3

	)

690 #iâdeà
NRFX_PRS_CONFIG_INFO_COLOR


691 
	#NRFX_PRS_CONFIG_INFO_COLOR
 0

	)

706 #iâdeà
NRFX_PRS_CONFIG_DEBUG_COLOR


707 
	#NRFX_PRS_CONFIG_DEBUG_COLOR
 0

	)

716 #iâdeà
NRFX_UARTE_ENABLED


717 
	#NRFX_UARTE_ENABLED
 1

	)

720 #iâdeà
NRFX_UARTE0_ENABLED


721 
	#NRFX_UARTE0_ENABLED
 0

	)

729 #iâdeà
NRFX_UARTE_DEFAULT_CONFIG_HWFC


730 
	#NRFX_UARTE_DEFAULT_CONFIG_HWFC
 0

	)

738 #iâdeà
NRFX_UARTE_DEFAULT_CONFIG_PARITY


739 
	#NRFX_UARTE_DEFAULT_CONFIG_PARITY
 0

	)

763 #iâdeà
NRFX_UARTE_DEFAULT_CONFIG_BAUDRATE


764 
	#NRFX_UARTE_DEFAULT_CONFIG_BAUDRATE
 30801920

	)

778 #iâdeà
NRFX_UARTE_DEFAULT_CONFIG_IRQ_PRIORITY


779 
	#NRFX_UARTE_DEFAULT_CONFIG_IRQ_PRIORITY
 6

	)

784 #iâdeà
NRFX_UARTE_CONFIG_LOG_ENABLED


785 
	#NRFX_UARTE_CONFIG_LOG_ENABLED
 0

	)

795 #iâdeà
NRFX_UARTE_CONFIG_LOG_LEVEL


796 
	#NRFX_UARTE_CONFIG_LOG_LEVEL
 3

	)

811 #iâdeà
NRFX_UARTE_CONFIG_INFO_COLOR


812 
	#NRFX_UARTE_CONFIG_INFO_COLOR
 0

	)

827 #iâdeà
NRFX_UARTE_CONFIG_DEBUG_COLOR


828 
	#NRFX_UARTE_CONFIG_DEBUG_COLOR
 0

	)

837 #iâdeà
NRFX_UART_ENABLED


838 
	#NRFX_UART_ENABLED
 1

	)

841 #iâdeà
NRFX_UART0_ENABLED


842 
	#NRFX_UART0_ENABLED
 0

	)

850 #iâdeà
NRFX_UART_DEFAULT_CONFIG_HWFC


851 
	#NRFX_UART_DEFAULT_CONFIG_HWFC
 0

	)

859 #iâdeà
NRFX_UART_DEFAULT_CONFIG_PARITY


860 
	#NRFX_UART_DEFAULT_CONFIG_PARITY
 0

	)

884 #iâdeà
NRFX_UART_DEFAULT_CONFIG_BAUDRATE


885 
	#NRFX_UART_DEFAULT_CONFIG_BAUDRATE
 30924800

	)

899 #iâdeà
NRFX_UART_DEFAULT_CONFIG_IRQ_PRIORITY


900 
	#NRFX_UART_DEFAULT_CONFIG_IRQ_PRIORITY
 6

	)

905 #iâdeà
NRFX_UART_CONFIG_LOG_ENABLED


906 
	#NRFX_UART_CONFIG_LOG_ENABLED
 0

	)

916 #iâdeà
NRFX_UART_CONFIG_LOG_LEVEL


917 
	#NRFX_UART_CONFIG_LOG_LEVEL
 3

	)

932 #iâdeà
NRFX_UART_CONFIG_INFO_COLOR


933 
	#NRFX_UART_CONFIG_INFO_COLOR
 0

	)

948 #iâdeà
NRFX_UART_CONFIG_DEBUG_COLOR


949 
	#NRFX_UART_CONFIG_DEBUG_COLOR
 0

	)

958 #iâdeà
UART_ENABLED


959 
	#UART_ENABLED
 1

	)

966 #iâdeà
UART_DEFAULT_CONFIG_HWFC


967 
	#UART_DEFAULT_CONFIG_HWFC
 0

	)

975 #iâdeà
UART_DEFAULT_CONFIG_PARITY


976 
	#UART_DEFAULT_CONFIG_PARITY
 0

	)

998 #iâdeà
UART_DEFAULT_CONFIG_BAUDRATE


999 
	#UART_DEFAULT_CONFIG_BAUDRATE
 30801920

	)

1015 #iâdeà
UART_DEFAULT_CONFIG_IRQ_PRIORITY


1016 
	#UART_DEFAULT_CONFIG_IRQ_PRIORITY
 6

	)

1022 #iâdeà
UART_EASY_DMA_SUPPORT


1023 
	#UART_EASY_DMA_SUPPORT
 1

	)

1029 #iâdeà
UART_LEGACY_SUPPORT


1030 
	#UART_LEGACY_SUPPORT
 1

	)

1035 #iâdeà
UART0_ENABLED


1036 
	#UART0_ENABLED
 1

	)

1041 #iâdeà
UART0_CONFIG_USE_EASY_DMA


1042 
	#UART0_CONFIG_USE_EASY_DMA
 1

	)

1057 #iâdeà
APP_SCHEDULER_ENABLED


1058 
	#APP_SCHEDULER_ENABLED
 1

	)

1063 #iâdeà
APP_SCHEDULER_WITH_PAUSE


1064 
	#APP_SCHEDULER_WITH_PAUSE
 0

	)

1070 #iâdeà
APP_SCHEDULER_WITH_PROFILER


1071 
	#APP_SCHEDULER_WITH_PROFILER
 0

	)

1078 #iâdeà
APP_TIMER_ENABLED


1079 
	#APP_TIMER_ENABLED
 1

	)

1090 #iâdeà
APP_TIMER_CONFIG_RTC_FREQUENCY


1091 
	#APP_TIMER_CONFIG_RTC_FREQUENCY
 0

	)

1107 #iâdeà
APP_TIMER_CONFIG_IRQ_PRIORITY


1108 
	#APP_TIMER_CONFIG_IRQ_PRIORITY
 6

	)

1117 #iâdeà
APP_TIMER_CONFIG_OP_QUEUE_SIZE


1118 
	#APP_TIMER_CONFIG_OP_QUEUE_SIZE
 10

	)

1124 #iâdeà
APP_TIMER_CONFIG_USE_SCHEDULER


1125 
	#APP_TIMER_CONFIG_USE_SCHEDULER
 0

	)

1134 #iâdeà
APP_TIMER_KEEPS_RTC_ACTIVE


1135 
	#APP_TIMER_KEEPS_RTC_ACTIVE
 0

	)

1145 #iâdeà
APP_TIMER_SAFE_WINDOW_MS


1146 
	#APP_TIMER_SAFE_WINDOW_MS
 300000

	)

1155 #iâdeà
APP_TIMER_WITH_PROFILER


1156 
	#APP_TIMER_WITH_PROFILER
 0

	)

1162 #iâdeà
APP_TIMER_CONFIG_SWI_NUMBER


1163 
	#APP_TIMER_CONFIG_SWI_NUMBER
 0

	)

1173 #iâdeà
NRF_BALLOC_ENABLED


1174 
	#NRF_BALLOC_ENABLED
 1

	)

1178 #iâdeà
NRF_BALLOC_CONFIG_DEBUG_ENABLED


1179 
	#NRF_BALLOC_CONFIG_DEBUG_ENABLED
 0

	)

1184 #iâdeà
NRF_BALLOC_CONFIG_HEAD_GUARD_WORDS


1185 
	#NRF_BALLOC_CONFIG_HEAD_GUARD_WORDS
 1

	)

1191 #iâdeà
NRF_BALLOC_CONFIG_TAIL_GUARD_WORDS


1192 
	#NRF_BALLOC_CONFIG_TAIL_GUARD_WORDS
 1

	)

1198 #iâdeà
NRF_BALLOC_CONFIG_BASIC_CHECKS_ENABLED


1199 
	#NRF_BALLOC_CONFIG_BASIC_CHECKS_ENABLED
 0

	)

1205 #iâdeà
NRF_BALLOC_CONFIG_DOUBLE_FREE_CHECK_ENABLED


1206 
	#NRF_BALLOC_CONFIG_DOUBLE_FREE_CHECK_ENABLED
 0

	)

1212 #iâdeà
NRF_BALLOC_CONFIG_DATA_TRASHING_CHECK_ENABLED


1213 
	#NRF_BALLOC_CONFIG_DATA_TRASHING_CHECK_ENABLED
 0

	)

1219 #iâdeà
NRF_BALLOC_CLI_CMDS


1220 
	#NRF_BALLOC_CLI_CMDS
 0

	)

1230 #iâdeà
NRF_FPRINTF_ENABLED


1231 
	#NRF_FPRINTF_ENABLED
 1

	)

1237 #iâdeà
NRF_MEMOBJ_ENABLED


1238 
	#NRF_MEMOBJ_ENABLED
 1

	)

1244 #iâdeà
NRF_STRERROR_ENABLED


1245 
	#NRF_STRERROR_ENABLED
 1

	)

1256 #iâdeà
NRF_LOG_BACKEND_RTT_ENABLED


1257 
	#NRF_LOG_BACKEND_RTT_ENABLED
 1

	)

1265 #iâdeà
NRF_LOG_BACKEND_RTT_TEMP_BUFFER_SIZE


1266 
	#NRF_LOG_BACKEND_RTT_TEMP_BUFFER_SIZE
 64

	)

1270 #iâdeà
NRF_LOG_BACKEND_RTT_TX_RETRY_DELAY_MS


1271 
	#NRF_LOG_BACKEND_RTT_TX_RETRY_DELAY_MS
 1

	)

1281 #iâdeà
NRF_LOG_BACKEND_RTT_TX_RETRY_CNT


1282 
	#NRF_LOG_BACKEND_RTT_TX_RETRY_CNT
 3

	)

1289 #iâdeà
NRF_LOG_BACKEND_UART_ENABLED


1290 
	#NRF_LOG_BACKEND_UART_ENABLED
 1

	)

1293 #iâdeà
NRF_LOG_BACKEND_UART_TX_PIN


1294 
	#NRF_LOG_BACKEND_UART_TX_PIN
 20

	)

1316 #iâdeà
NRF_LOG_BACKEND_UART_BAUDRATE


1317 
	#NRF_LOG_BACKEND_UART_BAUDRATE
 30801920

	)

1326 #iâdeà
NRF_LOG_BACKEND_UART_TEMP_BUFFER_SIZE


1327 
	#NRF_LOG_BACKEND_UART_TEMP_BUFFER_SIZE
 64

	)

1334 #iâdeà
NRF_LOG_ENABLED


1335 
	#NRF_LOG_ENABLED
 1

	)

1346 #iâdeà
NRF_LOG_MSGPOOL_ELEMENT_SIZE


1347 
	#NRF_LOG_MSGPOOL_ELEMENT_SIZE
 20

	)

1356 #iâdeà
NRF_LOG_MSGPOOL_ELEMENT_COUNT


1357 
	#NRF_LOG_MSGPOOL_ELEMENT_COUNT
 8

	)

1369 #iâdeà
NRF_LOG_ALLOW_OVERFLOW


1370 
	#NRF_LOG_ALLOW_OVERFLOW
 1

	)

1387 #iâdeà
NRF_LOG_BUFSIZE


1388 
	#NRF_LOG_BUFSIZE
 1024

	)

1394 #iâdeà
NRF_LOG_CLI_CMDS


1395 
	#NRF_LOG_CLI_CMDS
 0

	)

1406 #iâdeà
NRF_LOG_DEFAULT_LEVEL


1407 
	#NRF_LOG_DEFAULT_LEVEL
 3

	)

1415 #iâdeà
NRF_LOG_DEFERRED


1416 
	#NRF_LOG_DEFERRED
 1

	)

1422 #iâdeà
NRF_LOG_FILTERS_ENABLED


1423 
	#NRF_LOG_FILTERS_ENABLED
 1

	)

1436 #iâdeà
NRF_LOG_STR_PUSH_BUFFER_SIZE


1437 
	#NRF_LOG_STR_PUSH_BUFFER_SIZE
 128

	)

1450 #iâdeà
NRF_LOG_STR_PUSH_BUFFER_SIZE


1451 
	#NRF_LOG_STR_PUSH_BUFFER_SIZE
 128

	)

1456 #iâdeà
NRF_LOG_USES_COLORS


1457 
	#NRF_LOG_USES_COLORS
 0

	)

1471 #iâdeà
NRF_LOG_COLOR_DEFAULT


1472 
	#NRF_LOG_COLOR_DEFAULT
 0

	)

1487 #iâdeà
NRF_LOG_ERROR_COLOR


1488 
	#NRF_LOG_ERROR_COLOR
 2

	)

1503 #iâdeà
NRF_LOG_WARNING_COLOR


1504 
	#NRF_LOG_WARNING_COLOR
 4

	)

1513 #iâdeà
NRF_LOG_USES_TIMESTAMP


1514 
	#NRF_LOG_USES_TIMESTAMP
 0

	)

1517 #iâdeà
NRF_LOG_TIMESTAMP_DEFAULT_FREQUENCY


1518 
	#NRF_LOG_TIMESTAMP_DEFAULT_FREQUENCY
 0

	)

1531 #iâdeà
NRF_MPU_CONFIG_LOG_ENABLED


1532 
	#NRF_MPU_CONFIG_LOG_ENABLED
 0

	)

1542 #iâdeà
NRF_MPU_CONFIG_LOG_LEVEL


1543 
	#NRF_MPU_CONFIG_LOG_LEVEL
 3

	)

1558 #iâdeà
NRF_MPU_CONFIG_INFO_COLOR


1559 
	#NRF_MPU_CONFIG_INFO_COLOR
 0

	)

1574 #iâdeà
NRF_MPU_CONFIG_DEBUG_COLOR


1575 
	#NRF_MPU_CONFIG_DEBUG_COLOR
 0

	)

1582 #iâdeà
NRF_STACK_GUARD_CONFIG_LOG_ENABLED


1583 
	#NRF_STACK_GUARD_CONFIG_LOG_ENABLED
 0

	)

1593 #iâdeà
NRF_STACK_GUARD_CONFIG_LOG_LEVEL


1594 
	#NRF_STACK_GUARD_CONFIG_LOG_LEVEL
 3

	)

1609 #iâdeà
NRF_STACK_GUARD_CONFIG_INFO_COLOR


1610 
	#NRF_STACK_GUARD_CONFIG_INFO_COLOR
 0

	)

1625 #iâdeà
NRF_STACK_GUARD_CONFIG_DEBUG_COLOR


1626 
	#NRF_STACK_GUARD_CONFIG_DEBUG_COLOR
 0

	)

1633 #iâdeà
TASK_MANAGER_CONFIG_LOG_ENABLED


1634 
	#TASK_MANAGER_CONFIG_LOG_ENABLED
 0

	)

1644 #iâdeà
TASK_MANAGER_CONFIG_LOG_LEVEL


1645 
	#TASK_MANAGER_CONFIG_LOG_LEVEL
 3

	)

1660 #iâdeà
TASK_MANAGER_CONFIG_INFO_COLOR


1661 
	#TASK_MANAGER_CONFIG_INFO_COLOR
 0

	)

1676 #iâdeà
TASK_MANAGER_CONFIG_DEBUG_COLOR


1677 
	#TASK_MANAGER_CONFIG_DEBUG_COLOR
 0

	)

1690 #iâdeà
CLOCK_CONFIG_LOG_ENABLED


1691 
	#CLOCK_CONFIG_LOG_ENABLED
 0

	)

1701 #iâdeà
CLOCK_CONFIG_LOG_LEVEL


1702 
	#CLOCK_CONFIG_LOG_LEVEL
 3

	)

1717 #iâdeà
CLOCK_CONFIG_INFO_COLOR


1718 
	#CLOCK_CONFIG_INFO_COLOR
 0

	)

1733 #iâdeà
CLOCK_CONFIG_DEBUG_COLOR


1734 
	#CLOCK_CONFIG_DEBUG_COLOR
 0

	)

1741 #iâdeà
COMP_CONFIG_LOG_ENABLED


1742 
	#COMP_CONFIG_LOG_ENABLED
 0

	)

1752 #iâdeà
COMP_CONFIG_LOG_LEVEL


1753 
	#COMP_CONFIG_LOG_LEVEL
 3

	)

1768 #iâdeà
COMP_CONFIG_INFO_COLOR


1769 
	#COMP_CONFIG_INFO_COLOR
 0

	)

1784 #iâdeà
COMP_CONFIG_DEBUG_COLOR


1785 
	#COMP_CONFIG_DEBUG_COLOR
 0

	)

1792 #iâdeà
GPIOTE_CONFIG_LOG_ENABLED


1793 
	#GPIOTE_CONFIG_LOG_ENABLED
 0

	)

1803 #iâdeà
GPIOTE_CONFIG_LOG_LEVEL


1804 
	#GPIOTE_CONFIG_LOG_LEVEL
 3

	)

1819 #iâdeà
GPIOTE_CONFIG_INFO_COLOR


1820 
	#GPIOTE_CONFIG_INFO_COLOR
 0

	)

1835 #iâdeà
GPIOTE_CONFIG_DEBUG_COLOR


1836 
	#GPIOTE_CONFIG_DEBUG_COLOR
 0

	)

1843 #iâdeà
LPCOMP_CONFIG_LOG_ENABLED


1844 
	#LPCOMP_CONFIG_LOG_ENABLED
 0

	)

1854 #iâdeà
LPCOMP_CONFIG_LOG_LEVEL


1855 
	#LPCOMP_CONFIG_LOG_LEVEL
 3

	)

1870 #iâdeà
LPCOMP_CONFIG_INFO_COLOR


1871 
	#LPCOMP_CONFIG_INFO_COLOR
 0

	)

1886 #iâdeà
LPCOMP_CONFIG_DEBUG_COLOR


1887 
	#LPCOMP_CONFIG_DEBUG_COLOR
 0

	)

1894 #iâdeà
MAX3421E_HOST_CONFIG_LOG_ENABLED


1895 
	#MAX3421E_HOST_CONFIG_LOG_ENABLED
 0

	)

1905 #iâdeà
MAX3421E_HOST_CONFIG_LOG_LEVEL


1906 
	#MAX3421E_HOST_CONFIG_LOG_LEVEL
 3

	)

1921 #iâdeà
MAX3421E_HOST_CONFIG_INFO_COLOR


1922 
	#MAX3421E_HOST_CONFIG_INFO_COLOR
 0

	)

1937 #iâdeà
MAX3421E_HOST_CONFIG_DEBUG_COLOR


1938 
	#MAX3421E_HOST_CONFIG_DEBUG_COLOR
 0

	)

1945 #iâdeà
PDM_CONFIG_LOG_ENABLED


1946 
	#PDM_CONFIG_LOG_ENABLED
 0

	)

1956 #iâdeà
PDM_CONFIG_LOG_LEVEL


1957 
	#PDM_CONFIG_LOG_LEVEL
 3

	)

1972 #iâdeà
PDM_CONFIG_INFO_COLOR


1973 
	#PDM_CONFIG_INFO_COLOR
 0

	)

1988 #iâdeà
PDM_CONFIG_DEBUG_COLOR


1989 
	#PDM_CONFIG_DEBUG_COLOR
 0

	)

1996 #iâdeà
PPI_CONFIG_LOG_ENABLED


1997 
	#PPI_CONFIG_LOG_ENABLED
 0

	)

2007 #iâdeà
PPI_CONFIG_LOG_LEVEL


2008 
	#PPI_CONFIG_LOG_LEVEL
 3

	)

2023 #iâdeà
PPI_CONFIG_INFO_COLOR


2024 
	#PPI_CONFIG_INFO_COLOR
 0

	)

2039 #iâdeà
PPI_CONFIG_DEBUG_COLOR


2040 
	#PPI_CONFIG_DEBUG_COLOR
 0

	)

2047 #iâdeà
PWM_CONFIG_LOG_ENABLED


2048 
	#PWM_CONFIG_LOG_ENABLED
 0

	)

2058 #iâdeà
PWM_CONFIG_LOG_LEVEL


2059 
	#PWM_CONFIG_LOG_LEVEL
 3

	)

2074 #iâdeà
PWM_CONFIG_INFO_COLOR


2075 
	#PWM_CONFIG_INFO_COLOR
 0

	)

2090 #iâdeà
PWM_CONFIG_DEBUG_COLOR


2091 
	#PWM_CONFIG_DEBUG_COLOR
 0

	)

2098 #iâdeà
QDEC_CONFIG_LOG_ENABLED


2099 
	#QDEC_CONFIG_LOG_ENABLED
 0

	)

2109 #iâdeà
QDEC_CONFIG_LOG_LEVEL


2110 
	#QDEC_CONFIG_LOG_LEVEL
 3

	)

2125 #iâdeà
QDEC_CONFIG_INFO_COLOR


2126 
	#QDEC_CONFIG_INFO_COLOR
 0

	)

2141 #iâdeà
QDEC_CONFIG_DEBUG_COLOR


2142 
	#QDEC_CONFIG_DEBUG_COLOR
 0

	)

2149 #iâdeà
RNG_CONFIG_LOG_ENABLED


2150 
	#RNG_CONFIG_LOG_ENABLED
 0

	)

2160 #iâdeà
RNG_CONFIG_LOG_LEVEL


2161 
	#RNG_CONFIG_LOG_LEVEL
 3

	)

2176 #iâdeà
RNG_CONFIG_INFO_COLOR


2177 
	#RNG_CONFIG_INFO_COLOR
 0

	)

2192 #iâdeà
RNG_CONFIG_DEBUG_COLOR


2193 
	#RNG_CONFIG_DEBUG_COLOR
 0

	)

2199 #iâdeà
RNG_CONFIG_RANDOM_NUMBER_LOG_ENABLED


2200 
	#RNG_CONFIG_RANDOM_NUMBER_LOG_ENABLED
 0

	)

2207 #iâdeà
RTC_CONFIG_LOG_ENABLED


2208 
	#RTC_CONFIG_LOG_ENABLED
 0

	)

2218 #iâdeà
RTC_CONFIG_LOG_LEVEL


2219 
	#RTC_CONFIG_LOG_LEVEL
 3

	)

2234 #iâdeà
RTC_CONFIG_INFO_COLOR


2235 
	#RTC_CONFIG_INFO_COLOR
 0

	)

2250 #iâdeà
RTC_CONFIG_DEBUG_COLOR


2251 
	#RTC_CONFIG_DEBUG_COLOR
 0

	)

2258 #iâdeà
SAADC_CONFIG_LOG_ENABLED


2259 
	#SAADC_CONFIG_LOG_ENABLED
 0

	)

2269 #iâdeà
SAADC_CONFIG_LOG_LEVEL


2270 
	#SAADC_CONFIG_LOG_LEVEL
 3

	)

2285 #iâdeà
SAADC_CONFIG_INFO_COLOR


2286 
	#SAADC_CONFIG_INFO_COLOR
 0

	)

2301 #iâdeà
SAADC_CONFIG_DEBUG_COLOR


2302 
	#SAADC_CONFIG_DEBUG_COLOR
 0

	)

2309 #iâdeà
SPIS_CONFIG_LOG_ENABLED


2310 
	#SPIS_CONFIG_LOG_ENABLED
 0

	)

2320 #iâdeà
SPIS_CONFIG_LOG_LEVEL


2321 
	#SPIS_CONFIG_LOG_LEVEL
 3

	)

2336 #iâdeà
SPIS_CONFIG_INFO_COLOR


2337 
	#SPIS_CONFIG_INFO_COLOR
 0

	)

2352 #iâdeà
SPIS_CONFIG_DEBUG_COLOR


2353 
	#SPIS_CONFIG_DEBUG_COLOR
 0

	)

2360 #iâdeà
SPI_CONFIG_LOG_ENABLED


2361 
	#SPI_CONFIG_LOG_ENABLED
 0

	)

2371 #iâdeà
SPI_CONFIG_LOG_LEVEL


2372 
	#SPI_CONFIG_LOG_LEVEL
 3

	)

2387 #iâdeà
SPI_CONFIG_INFO_COLOR


2388 
	#SPI_CONFIG_INFO_COLOR
 0

	)

2403 #iâdeà
SPI_CONFIG_DEBUG_COLOR


2404 
	#SPI_CONFIG_DEBUG_COLOR
 0

	)

2411 #iâdeà
TIMER_CONFIG_LOG_ENABLED


2412 
	#TIMER_CONFIG_LOG_ENABLED
 0

	)

2422 #iâdeà
TIMER_CONFIG_LOG_LEVEL


2423 
	#TIMER_CONFIG_LOG_LEVEL
 3

	)

2438 #iâdeà
TIMER_CONFIG_INFO_COLOR


2439 
	#TIMER_CONFIG_INFO_COLOR
 0

	)

2454 #iâdeà
TIMER_CONFIG_DEBUG_COLOR


2455 
	#TIMER_CONFIG_DEBUG_COLOR
 0

	)

2462 #iâdeà
TWIS_CONFIG_LOG_ENABLED


2463 
	#TWIS_CONFIG_LOG_ENABLED
 0

	)

2473 #iâdeà
TWIS_CONFIG_LOG_LEVEL


2474 
	#TWIS_CONFIG_LOG_LEVEL
 3

	)

2489 #iâdeà
TWIS_CONFIG_INFO_COLOR


2490 
	#TWIS_CONFIG_INFO_COLOR
 0

	)

2505 #iâdeà
TWIS_CONFIG_DEBUG_COLOR


2506 
	#TWIS_CONFIG_DEBUG_COLOR
 0

	)

2513 #iâdeà
TWI_CONFIG_LOG_ENABLED


2514 
	#TWI_CONFIG_LOG_ENABLED
 0

	)

2524 #iâdeà
TWI_CONFIG_LOG_LEVEL


2525 
	#TWI_CONFIG_LOG_LEVEL
 3

	)

2540 #iâdeà
TWI_CONFIG_INFO_COLOR


2541 
	#TWI_CONFIG_INFO_COLOR
 0

	)

2556 #iâdeà
TWI_CONFIG_DEBUG_COLOR


2557 
	#TWI_CONFIG_DEBUG_COLOR
 0

	)

2564 #iâdeà
UART_CONFIG_LOG_ENABLED


2565 
	#UART_CONFIG_LOG_ENABLED
 0

	)

2575 #iâdeà
UART_CONFIG_LOG_LEVEL


2576 
	#UART_CONFIG_LOG_LEVEL
 3

	)

2591 #iâdeà
UART_CONFIG_INFO_COLOR


2592 
	#UART_CONFIG_INFO_COLOR
 0

	)

2607 #iâdeà
UART_CONFIG_DEBUG_COLOR


2608 
	#UART_CONFIG_DEBUG_COLOR
 0

	)

2615 #iâdeà
USBD_CONFIG_LOG_ENABLED


2616 
	#USBD_CONFIG_LOG_ENABLED
 0

	)

2626 #iâdeà
USBD_CONFIG_LOG_LEVEL


2627 
	#USBD_CONFIG_LOG_LEVEL
 3

	)

2642 #iâdeà
USBD_CONFIG_INFO_COLOR


2643 
	#USBD_CONFIG_INFO_COLOR
 0

	)

2658 #iâdeà
USBD_CONFIG_DEBUG_COLOR


2659 
	#USBD_CONFIG_DEBUG_COLOR
 0

	)

2666 #iâdeà
WDT_CONFIG_LOG_ENABLED


2667 
	#WDT_CONFIG_LOG_ENABLED
 0

	)

2677 #iâdeà
WDT_CONFIG_LOG_LEVEL


2678 
	#WDT_CONFIG_LOG_LEVEL
 3

	)

2693 #iâdeà
WDT_CONFIG_INFO_COLOR


2694 
	#WDT_CONFIG_INFO_COLOR
 0

	)

2709 #iâdeà
WDT_CONFIG_DEBUG_COLOR


2710 
	#WDT_CONFIG_DEBUG_COLOR
 0

	)

2723 #iâdeà
APP_TIMER_CONFIG_LOG_ENABLED


2724 
	#APP_TIMER_CONFIG_LOG_ENABLED
 0

	)

2734 #iâdeà
APP_TIMER_CONFIG_LOG_LEVEL


2735 
	#APP_TIMER_CONFIG_LOG_LEVEL
 3

	)

2750 #iâdeà
APP_TIMER_CONFIG_INITIAL_LOG_LEVEL


2751 
	#APP_TIMER_CONFIG_INITIAL_LOG_LEVEL
 3

	)

2766 #iâdeà
APP_TIMER_CONFIG_INFO_COLOR


2767 
	#APP_TIMER_CONFIG_INFO_COLOR
 0

	)

2782 #iâdeà
APP_TIMER_CONFIG_DEBUG_COLOR


2783 
	#APP_TIMER_CONFIG_DEBUG_COLOR
 0

	)

2790 #iâdeà
APP_USBD_CDC_ACM_CONFIG_LOG_ENABLED


2791 
	#APP_USBD_CDC_ACM_CONFIG_LOG_ENABLED
 0

	)

2801 #iâdeà
APP_USBD_CDC_ACM_CONFIG_LOG_LEVEL


2802 
	#APP_USBD_CDC_ACM_CONFIG_LOG_LEVEL
 3

	)

2817 #iâdeà
APP_USBD_CDC_ACM_CONFIG_INFO_COLOR


2818 
	#APP_USBD_CDC_ACM_CONFIG_INFO_COLOR
 0

	)

2833 #iâdeà
APP_USBD_CDC_ACM_CONFIG_DEBUG_COLOR


2834 
	#APP_USBD_CDC_ACM_CONFIG_DEBUG_COLOR
 0

	)

2841 #iâdeà
APP_USBD_CONFIG_LOG_ENABLED


2842 
	#APP_USBD_CONFIG_LOG_ENABLED
 0

	)

2852 #iâdeà
APP_USBD_CONFIG_LOG_LEVEL


2853 
	#APP_USBD_CONFIG_LOG_LEVEL
 3

	)

2868 #iâdeà
APP_USBD_CONFIG_INFO_COLOR


2869 
	#APP_USBD_CONFIG_INFO_COLOR
 0

	)

2884 #iâdeà
APP_USBD_CONFIG_DEBUG_COLOR


2885 
	#APP_USBD_CONFIG_DEBUG_COLOR
 0

	)

2892 #iâdeà
APP_USBD_DUMMY_CONFIG_LOG_ENABLED


2893 
	#APP_USBD_DUMMY_CONFIG_LOG_ENABLED
 0

	)

2903 #iâdeà
APP_USBD_DUMMY_CONFIG_LOG_LEVEL


2904 
	#APP_USBD_DUMMY_CONFIG_LOG_LEVEL
 3

	)

2919 #iâdeà
APP_USBD_DUMMY_CONFIG_INFO_COLOR


2920 
	#APP_USBD_DUMMY_CONFIG_INFO_COLOR
 0

	)

2935 #iâdeà
APP_USBD_DUMMY_CONFIG_DEBUG_COLOR


2936 
	#APP_USBD_DUMMY_CONFIG_DEBUG_COLOR
 0

	)

2943 #iâdeà
APP_USBD_MSC_CONFIG_LOG_ENABLED


2944 
	#APP_USBD_MSC_CONFIG_LOG_ENABLED
 0

	)

2954 #iâdeà
APP_USBD_MSC_CONFIG_LOG_LEVEL


2955 
	#APP_USBD_MSC_CONFIG_LOG_LEVEL
 3

	)

2970 #iâdeà
APP_USBD_MSC_CONFIG_INFO_COLOR


2971 
	#APP_USBD_MSC_CONFIG_INFO_COLOR
 0

	)

2986 #iâdeà
APP_USBD_MSC_CONFIG_DEBUG_COLOR


2987 
	#APP_USBD_MSC_CONFIG_DEBUG_COLOR
 0

	)

2994 #iâdeà
APP_USBD_NRF_DFU_TRIGGER_CONFIG_LOG_ENABLED


2995 
	#APP_USBD_NRF_DFU_TRIGGER_CONFIG_LOG_ENABLED
 0

	)

3005 #iâdeà
APP_USBD_NRF_DFU_TRIGGER_CONFIG_LOG_LEVEL


3006 
	#APP_USBD_NRF_DFU_TRIGGER_CONFIG_LOG_LEVEL
 3

	)

3021 #iâdeà
APP_USBD_NRF_DFU_TRIGGER_CONFIG_INFO_COLOR


3022 
	#APP_USBD_NRF_DFU_TRIGGER_CONFIG_INFO_COLOR
 0

	)

3037 #iâdeà
APP_USBD_NRF_DFU_TRIGGER_CONFIG_DEBUG_COLOR


3038 
	#APP_USBD_NRF_DFU_TRIGGER_CONFIG_DEBUG_COLOR
 0

	)

3045 #iâdeà
NRF_ATFIFO_CONFIG_LOG_ENABLED


3046 
	#NRF_ATFIFO_CONFIG_LOG_ENABLED
 0

	)

3056 #iâdeà
NRF_ATFIFO_CONFIG_LOG_LEVEL


3057 
	#NRF_ATFIFO_CONFIG_LOG_LEVEL
 3

	)

3068 #iâdeà
NRF_ATFIFO_CONFIG_LOG_INIT_FILTER_LEVEL


3069 
	#NRF_ATFIFO_CONFIG_LOG_INIT_FILTER_LEVEL
 3

	)

3084 #iâdeà
NRF_ATFIFO_CONFIG_INFO_COLOR


3085 
	#NRF_ATFIFO_CONFIG_INFO_COLOR
 0

	)

3100 #iâdeà
NRF_ATFIFO_CONFIG_DEBUG_COLOR


3101 
	#NRF_ATFIFO_CONFIG_DEBUG_COLOR
 0

	)

3108 #iâdeà
NRF_BALLOC_CONFIG_LOG_ENABLED


3109 
	#NRF_BALLOC_CONFIG_LOG_ENABLED
 0

	)

3119 #iâdeà
NRF_BALLOC_CONFIG_LOG_LEVEL


3120 
	#NRF_BALLOC_CONFIG_LOG_LEVEL
 3

	)

3135 #iâdeà
NRF_BALLOC_CONFIG_INITIAL_LOG_LEVEL


3136 
	#NRF_BALLOC_CONFIG_INITIAL_LOG_LEVEL
 3

	)

3151 #iâdeà
NRF_BALLOC_CONFIG_INFO_COLOR


3152 
	#NRF_BALLOC_CONFIG_INFO_COLOR
 0

	)

3167 #iâdeà
NRF_BALLOC_CONFIG_DEBUG_COLOR


3168 
	#NRF_BALLOC_CONFIG_DEBUG_COLOR
 0

	)

3175 #iâdeà
NRF_BLOCK_DEV_EMPTY_CONFIG_LOG_ENABLED


3176 
	#NRF_BLOCK_DEV_EMPTY_CONFIG_LOG_ENABLED
 0

	)

3186 #iâdeà
NRF_BLOCK_DEV_EMPTY_CONFIG_LOG_LEVEL


3187 
	#NRF_BLOCK_DEV_EMPTY_CONFIG_LOG_LEVEL
 3

	)

3198 #iâdeà
NRF_BLOCK_DEV_EMPTY_CONFIG_LOG_INIT_FILTER_LEVEL


3199 
	#NRF_BLOCK_DEV_EMPTY_CONFIG_LOG_INIT_FILTER_LEVEL
 3

	)

3214 #iâdeà
NRF_BLOCK_DEV_EMPTY_CONFIG_INFO_COLOR


3215 
	#NRF_BLOCK_DEV_EMPTY_CONFIG_INFO_COLOR
 0

	)

3230 #iâdeà
NRF_BLOCK_DEV_EMPTY_CONFIG_DEBUG_COLOR


3231 
	#NRF_BLOCK_DEV_EMPTY_CONFIG_DEBUG_COLOR
 0

	)

3238 #iâdeà
NRF_BLOCK_DEV_QSPI_CONFIG_LOG_ENABLED


3239 
	#NRF_BLOCK_DEV_QSPI_CONFIG_LOG_ENABLED
 0

	)

3249 #iâdeà
NRF_BLOCK_DEV_QSPI_CONFIG_LOG_LEVEL


3250 
	#NRF_BLOCK_DEV_QSPI_CONFIG_LOG_LEVEL
 3

	)

3261 #iâdeà
NRF_BLOCK_DEV_QSPI_CONFIG_LOG_INIT_FILTER_LEVEL


3262 
	#NRF_BLOCK_DEV_QSPI_CONFIG_LOG_INIT_FILTER_LEVEL
 3

	)

3277 #iâdeà
NRF_BLOCK_DEV_QSPI_CONFIG_INFO_COLOR


3278 
	#NRF_BLOCK_DEV_QSPI_CONFIG_INFO_COLOR
 0

	)

3293 #iâdeà
NRF_BLOCK_DEV_QSPI_CONFIG_DEBUG_COLOR


3294 
	#NRF_BLOCK_DEV_QSPI_CONFIG_DEBUG_COLOR
 0

	)

3301 #iâdeà
NRF_BLOCK_DEV_RAM_CONFIG_LOG_ENABLED


3302 
	#NRF_BLOCK_DEV_RAM_CONFIG_LOG_ENABLED
 0

	)

3312 #iâdeà
NRF_BLOCK_DEV_RAM_CONFIG_LOG_LEVEL


3313 
	#NRF_BLOCK_DEV_RAM_CONFIG_LOG_LEVEL
 3

	)

3324 #iâdeà
NRF_BLOCK_DEV_RAM_CONFIG_LOG_INIT_FILTER_LEVEL


3325 
	#NRF_BLOCK_DEV_RAM_CONFIG_LOG_INIT_FILTER_LEVEL
 3

	)

3340 #iâdeà
NRF_BLOCK_DEV_RAM_CONFIG_INFO_COLOR


3341 
	#NRF_BLOCK_DEV_RAM_CONFIG_INFO_COLOR
 0

	)

3356 #iâdeà
NRF_BLOCK_DEV_RAM_CONFIG_DEBUG_COLOR


3357 
	#NRF_BLOCK_DEV_RAM_CONFIG_DEBUG_COLOR
 0

	)

3364 #iâdeà
NRF_CLI_BLE_UART_CONFIG_LOG_ENABLED


3365 
	#NRF_CLI_BLE_UART_CONFIG_LOG_ENABLED
 0

	)

3375 #iâdeà
NRF_CLI_BLE_UART_CONFIG_LOG_LEVEL


3376 
	#NRF_CLI_BLE_UART_CONFIG_LOG_LEVEL
 3

	)

3391 #iâdeà
NRF_CLI_BLE_UART_CONFIG_INFO_COLOR


3392 
	#NRF_CLI_BLE_UART_CONFIG_INFO_COLOR
 0

	)

3407 #iâdeà
NRF_CLI_BLE_UART_CONFIG_DEBUG_COLOR


3408 
	#NRF_CLI_BLE_UART_CONFIG_DEBUG_COLOR
 0

	)

3415 #iâdeà
NRF_CLI_LIBUARTE_CONFIG_LOG_ENABLED


3416 
	#NRF_CLI_LIBUARTE_CONFIG_LOG_ENABLED
 0

	)

3426 #iâdeà
NRF_CLI_LIBUARTE_CONFIG_LOG_LEVEL


3427 
	#NRF_CLI_LIBUARTE_CONFIG_LOG_LEVEL
 3

	)

3442 #iâdeà
NRF_CLI_LIBUARTE_CONFIG_INFO_COLOR


3443 
	#NRF_CLI_LIBUARTE_CONFIG_INFO_COLOR
 0

	)

3458 #iâdeà
NRF_CLI_LIBUARTE_CONFIG_DEBUG_COLOR


3459 
	#NRF_CLI_LIBUARTE_CONFIG_DEBUG_COLOR
 0

	)

3466 #iâdeà
NRF_CLI_UART_CONFIG_LOG_ENABLED


3467 
	#NRF_CLI_UART_CONFIG_LOG_ENABLED
 0

	)

3477 #iâdeà
NRF_CLI_UART_CONFIG_LOG_LEVEL


3478 
	#NRF_CLI_UART_CONFIG_LOG_LEVEL
 3

	)

3493 #iâdeà
NRF_CLI_UART_CONFIG_INFO_COLOR


3494 
	#NRF_CLI_UART_CONFIG_INFO_COLOR
 0

	)

3509 #iâdeà
NRF_CLI_UART_CONFIG_DEBUG_COLOR


3510 
	#NRF_CLI_UART_CONFIG_DEBUG_COLOR
 0

	)

3517 #iâdeà
NRF_LIBUARTE_CONFIG_LOG_ENABLED


3518 
	#NRF_LIBUARTE_CONFIG_LOG_ENABLED
 0

	)

3528 #iâdeà
NRF_LIBUARTE_CONFIG_LOG_LEVEL


3529 
	#NRF_LIBUARTE_CONFIG_LOG_LEVEL
 3

	)

3544 #iâdeà
NRF_LIBUARTE_CONFIG_INFO_COLOR


3545 
	#NRF_LIBUARTE_CONFIG_INFO_COLOR
 0

	)

3560 #iâdeà
NRF_LIBUARTE_CONFIG_DEBUG_COLOR


3561 
	#NRF_LIBUARTE_CONFIG_DEBUG_COLOR
 0

	)

3568 #iâdeà
NRF_MEMOBJ_CONFIG_LOG_ENABLED


3569 
	#NRF_MEMOBJ_CONFIG_LOG_ENABLED
 0

	)

3579 #iâdeà
NRF_MEMOBJ_CONFIG_LOG_LEVEL


3580 
	#NRF_MEMOBJ_CONFIG_LOG_LEVEL
 3

	)

3595 #iâdeà
NRF_MEMOBJ_CONFIG_INFO_COLOR


3596 
	#NRF_MEMOBJ_CONFIG_INFO_COLOR
 0

	)

3611 #iâdeà
NRF_MEMOBJ_CONFIG_DEBUG_COLOR


3612 
	#NRF_MEMOBJ_CONFIG_DEBUG_COLOR
 0

	)

3619 #iâdeà
NRF_PWR_MGMT_CONFIG_LOG_ENABLED


3620 
	#NRF_PWR_MGMT_CONFIG_LOG_ENABLED
 0

	)

3630 #iâdeà
NRF_PWR_MGMT_CONFIG_LOG_LEVEL


3631 
	#NRF_PWR_MGMT_CONFIG_LOG_LEVEL
 3

	)

3646 #iâdeà
NRF_PWR_MGMT_CONFIG_INFO_COLOR


3647 
	#NRF_PWR_MGMT_CONFIG_INFO_COLOR
 0

	)

3662 #iâdeà
NRF_PWR_MGMT_CONFIG_DEBUG_COLOR


3663 
	#NRF_PWR_MGMT_CONFIG_DEBUG_COLOR
 0

	)

3670 #iâdeà
NRF_QUEUE_CONFIG_LOG_ENABLED


3671 
	#NRF_QUEUE_CONFIG_LOG_ENABLED
 0

	)

3681 #iâdeà
NRF_QUEUE_CONFIG_LOG_LEVEL


3682 
	#NRF_QUEUE_CONFIG_LOG_LEVEL
 3

	)

3693 #iâdeà
NRF_QUEUE_CONFIG_LOG_INIT_FILTER_LEVEL


3694 
	#NRF_QUEUE_CONFIG_LOG_INIT_FILTER_LEVEL
 3

	)

3709 #iâdeà
NRF_QUEUE_CONFIG_INFO_COLOR


3710 
	#NRF_QUEUE_CONFIG_INFO_COLOR
 0

	)

3725 #iâdeà
NRF_QUEUE_CONFIG_DEBUG_COLOR


3726 
	#NRF_QUEUE_CONFIG_DEBUG_COLOR
 0

	)

3733 #iâdeà
NRF_SDH_ANT_LOG_ENABLED


3734 
	#NRF_SDH_ANT_LOG_ENABLED
 0

	)

3744 #iâdeà
NRF_SDH_ANT_LOG_LEVEL


3745 
	#NRF_SDH_ANT_LOG_LEVEL
 3

	)

3760 #iâdeà
NRF_SDH_ANT_INFO_COLOR


3761 
	#NRF_SDH_ANT_INFO_COLOR
 0

	)

3776 #iâdeà
NRF_SDH_ANT_DEBUG_COLOR


3777 
	#NRF_SDH_ANT_DEBUG_COLOR
 0

	)

3784 #iâdeà
NRF_SDH_BLE_LOG_ENABLED


3785 
	#NRF_SDH_BLE_LOG_ENABLED
 0

	)

3795 #iâdeà
NRF_SDH_BLE_LOG_LEVEL


3796 
	#NRF_SDH_BLE_LOG_LEVEL
 3

	)

3811 #iâdeà
NRF_SDH_BLE_INFO_COLOR


3812 
	#NRF_SDH_BLE_INFO_COLOR
 0

	)

3827 #iâdeà
NRF_SDH_BLE_DEBUG_COLOR


3828 
	#NRF_SDH_BLE_DEBUG_COLOR
 0

	)

3835 #iâdeà
NRF_SDH_LOG_ENABLED


3836 
	#NRF_SDH_LOG_ENABLED
 0

	)

3846 #iâdeà
NRF_SDH_LOG_LEVEL


3847 
	#NRF_SDH_LOG_LEVEL
 3

	)

3862 #iâdeà
NRF_SDH_INFO_COLOR


3863 
	#NRF_SDH_INFO_COLOR
 0

	)

3878 #iâdeà
NRF_SDH_DEBUG_COLOR


3879 
	#NRF_SDH_DEBUG_COLOR
 0

	)

3886 #iâdeà
NRF_SDH_SOC_LOG_ENABLED


3887 
	#NRF_SDH_SOC_LOG_ENABLED
 0

	)

3897 #iâdeà
NRF_SDH_SOC_LOG_LEVEL


3898 
	#NRF_SDH_SOC_LOG_LEVEL
 3

	)

3913 #iâdeà
NRF_SDH_SOC_INFO_COLOR


3914 
	#NRF_SDH_SOC_INFO_COLOR
 0

	)

3929 #iâdeà
NRF_SDH_SOC_DEBUG_COLOR


3930 
	#NRF_SDH_SOC_DEBUG_COLOR
 0

	)

3937 #iâdeà
NRF_SORTLIST_CONFIG_LOG_ENABLED


3938 
	#NRF_SORTLIST_CONFIG_LOG_ENABLED
 0

	)

3948 #iâdeà
NRF_SORTLIST_CONFIG_LOG_LEVEL


3949 
	#NRF_SORTLIST_CONFIG_LOG_LEVEL
 3

	)

3964 #iâdeà
NRF_SORTLIST_CONFIG_INFO_COLOR


3965 
	#NRF_SORTLIST_CONFIG_INFO_COLOR
 0

	)

3980 #iâdeà
NRF_SORTLIST_CONFIG_DEBUG_COLOR


3981 
	#NRF_SORTLIST_CONFIG_DEBUG_COLOR
 0

	)

3988 #iâdeà
NRF_TWI_SENSOR_CONFIG_LOG_ENABLED


3989 
	#NRF_TWI_SENSOR_CONFIG_LOG_ENABLED
 0

	)

3999 #iâdeà
NRF_TWI_SENSOR_CONFIG_LOG_LEVEL


4000 
	#NRF_TWI_SENSOR_CONFIG_LOG_LEVEL
 3

	)

4015 #iâdeà
NRF_TWI_SENSOR_CONFIG_INFO_COLOR


4016 
	#NRF_TWI_SENSOR_CONFIG_INFO_COLOR
 0

	)

4031 #iâdeà
NRF_TWI_SENSOR_CONFIG_DEBUG_COLOR


4032 
	#NRF_TWI_SENSOR_CONFIG_DEBUG_COLOR
 0

	)

4039 #iâdeà
PM_LOG_ENABLED


4040 
	#PM_LOG_ENABLED
 1

	)

4050 #iâdeà
PM_LOG_LEVEL


4051 
	#PM_LOG_LEVEL
 3

	)

4066 #iâdeà
PM_LOG_INFO_COLOR


4067 
	#PM_LOG_INFO_COLOR
 0

	)

4082 #iâdeà
PM_LOG_DEBUG_COLOR


4083 
	#PM_LOG_DEBUG_COLOR
 0

	)

4096 #iâdeà
SER_HAL_TRANSPORT_CONFIG_LOG_ENABLED


4097 
	#SER_HAL_TRANSPORT_CONFIG_LOG_ENABLED
 1

	)

4107 #iâdeà
SER_HAL_TRANSPORT_CONFIG_LOG_LEVEL


4108 
	#SER_HAL_TRANSPORT_CONFIG_LOG_LEVEL
 3

	)

4123 #iâdeà
SER_HAL_TRANSPORT_CONFIG_INFO_COLOR


4124 
	#SER_HAL_TRANSPORT_CONFIG_INFO_COLOR
 0

	)

4139 #iâdeà
SER_HAL_TRANSPORT_CONFIG_DEBUG_COLOR


4140 
	#SER_HAL_TRANSPORT_CONFIG_DEBUG_COLOR
 0

	)

4156 #iâdeà
NRF_LOG_STR_FORMATTER_TIMESTAMP_FORMAT_ENABLED


4157 
	#NRF_LOG_STR_FORMATTER_TIMESTAMP_FORMAT_ENABLED
 1

	)

4173 #iâdeà
SEGGER_RTT_CONFIG_BUFFER_SIZE_UP


4174 
	#SEGGER_RTT_CONFIG_BUFFER_SIZE_UP
 512

	)

4178 #iâdeà
SEGGER_RTT_CONFIG_MAX_NUM_UP_BUFFERS


4179 
	#SEGGER_RTT_CONFIG_MAX_NUM_UP_BUFFERS
 2

	)

4183 #iâdeà
SEGGER_RTT_CONFIG_BUFFER_SIZE_DOWN


4184 
	#SEGGER_RTT_CONFIG_BUFFER_SIZE_DOWN
 16

	)

4188 #iâdeà
SEGGER_RTT_CONFIG_MAX_NUM_DOWN_BUFFERS


4189 
	#SEGGER_RTT_CONFIG_MAX_NUM_DOWN_BUFFERS
 2

	)

4203 #iâdeà
SEGGER_RTT_CONFIG_DEFAULT_MODE


4204 
	#SEGGER_RTT_CONFIG_DEFAULT_MODE
 0

	)

4207 #iâdeà
NRFX_TIMER_ENABLED


4208 
	#NRFX_TIMER_ENABLED
 1

	)

4211 #iâdeà
NRFX_TIMER_DEFAULT_CONFIG_IRQ_PRIORITY


4212 
	#NRFX_TIMER_DEFAULT_CONFIG_IRQ_PRIORITY
 6

	)

4215 #iâdeà
NRFX_TIMER_CONFIG_LOG_LEVEL


4216 
	#NRFX_TIMER_CONFIG_LOG_LEVEL
 4

	)

4219 #iâdeà
TIMER_ENABLED


4220 
	#TIMER_ENABLED
 1

	)

4223 #iâdeà
TIMER_DEFAULT_CONFIG_BIT_WIDTH


4224 
	#TIMER_DEFAULT_CONFIG_BIT_WIDTH
 3

	)

4227 #iâdeà
TIMER_DEFAULT_CONFIG_IRQ_PRIORITY


4228 
	#TIMER_DEFAULT_CONFIG_IRQ_PRIORITY
 6

	)

4235 #iâdeà
TIMER1_ENABLED


4236 
	#TIMER1_ENABLED
 1

	)

4239 #iâdeà
TIMER2_ENABLED


4240 
	#TIMER2_ENABLED
 1

	)

4243 #iâdeà
NRFX_TIMER_DEFAULT_CONFIG_FREQUENCY


4244 
	#NRFX_TIMER_DEFAULT_CONFIG_FREQUENCY
 0

	)

4247 #iâdeà
NRFX_TIMER_DEFAULT_CONFIG_MODE


4248 
	#NRFX_TIMER_DEFAULT_CONFIG_MODE
 0

	)

4251 #iâdeà
NRF_ESB_MAX_PAYLOAD_LENGTH


4252 
	#NRF_ESB_MAX_PAYLOAD_LENGTH
 252

	)

4258 #iâdeà
MEM_MANAGER_ENABLED


4259 
	#MEM_MANAGER_ENABLED
 1

	)

4264 #iâdeà
MEMORY_MANAGER_SMALL_BLOCK_COUNT


4265 
	#MEMORY_MANAGER_SMALL_BLOCK_COUNT
 1

	)

4271 #iâdeà
MEMORY_MANAGER_SMALL_BLOCK_SIZE


4272 
	#MEMORY_MANAGER_SMALL_BLOCK_SIZE
 32

	)

4278 #iâdeà
MEMORY_MANAGER_MEDIUM_BLOCK_COUNT


4279 
	#MEMORY_MANAGER_MEDIUM_BLOCK_COUNT
 1

	)

4285 #iâdeà
MEMORY_MANAGER_MEDIUM_BLOCK_SIZE


4286 
	#MEMORY_MANAGER_MEDIUM_BLOCK_SIZE
 256

	)

4292 #iâdeà
MEMORY_MANAGER_LARGE_BLOCK_COUNT


4293 
	#MEMORY_MANAGER_LARGE_BLOCK_COUNT
 3

	)

4299 #iâdeà
MEMORY_MANAGER_LARGE_BLOCK_SIZE


4300 
	#MEMORY_MANAGER_LARGE_BLOCK_SIZE
 1280

	)

4306 #iâdeà
MEMORY_MANAGER_XLARGE_BLOCK_COUNT


4307 
	#MEMORY_MANAGER_XLARGE_BLOCK_COUNT
 10

	)

4313 #iâdeà
MEMORY_MANAGER_XLARGE_BLOCK_SIZE


4314 
	#MEMORY_MANAGER_XLARGE_BLOCK_SIZE
 1320

	)

4320 #iâdeà
MEMORY_MANAGER_XXLARGE_BLOCK_COUNT


4321 
	#MEMORY_MANAGER_XXLARGE_BLOCK_COUNT
 1

	)

4327 #iâdeà
MEMORY_MANAGER_XXLARGE_BLOCK_SIZE


4328 
	#MEMORY_MANAGER_XXLARGE_BLOCK_SIZE
 3444

	)

4334 #iâdeà
MEMORY_MANAGER_XSMALL_BLOCK_COUNT


4335 
	#MEMORY_MANAGER_XSMALL_BLOCK_COUNT
 0

	)

4341 #iâdeà
MEMORY_MANAGER_XSMALL_BLOCK_SIZE


4342 
	#MEMORY_MANAGER_XSMALL_BLOCK_SIZE
 64

	)

4348 #iâdeà
MEMORY_MANAGER_XXSMALL_BLOCK_COUNT


4349 
	#MEMORY_MANAGER_XXSMALL_BLOCK_COUNT
 0

	)

4355 #iâdeà
MEMORY_MANAGER_XXSMALL_BLOCK_SIZE


4356 
	#MEMORY_MANAGER_XXSMALL_BLOCK_SIZE
 32

	)

4361 #iâdeà
MEM_MANAGER_CONFIG_LOG_ENABLED


4362 
	#MEM_MANAGER_CONFIG_LOG_ENABLED
 0

	)

4372 #iâdeà
MEM_MANAGER_CONFIG_LOG_LEVEL


4373 
	#MEM_MANAGER_CONFIG_LOG_LEVEL
 3

	)

4388 #iâdeà
MEM_MANAGER_CONFIG_INFO_COLOR


4389 
	#MEM_MANAGER_CONFIG_INFO_COLOR
 0

	)

4404 #iâdeà
MEM_MANAGER_CONFIG_DEBUG_COLOR


4405 
	#MEM_MANAGER_CONFIG_DEBUG_COLOR
 0

	)

4413 #iâdeà
MEM_MANAGER_DISABLE_API_PARAM_CHECK


4414 
	#MEM_MANAGER_DISABLE_API_PARAM_CHECK
 0

	)

4420 #iâdeà
NRFX_SPIS_ENABLED


4421 
	#NRFX_SPIS_ENABLED
 1

	)

4424 #iâdeà
NRFX_SPIS1_ENABLED


4425 
	#NRFX_SPIS1_ENABLED
 1

	)

4428 #iâdeà
NRFX_SPIS_DEFAULT_DEF


4429 
	#NRFX_SPIS_DEFAULT_DEF
 255

	)

4432 #iâdeà
NRFX_SPIS_DEFAULT_ORC


4433 
	#NRFX_SPIS_DEFAULT_ORC
 255

	)

4437 #iâdeà
NRFX_SPIS_DEFAULT_CONFIG_IRQ_PRIORITY


4438 
	#NRFX_SPIS_DEFAULT_CONFIG_IRQ_PRIORITY
 3

	)

4444 #iâdeà
NRFX_TWIS_ENABLED


4445 
	#NRFX_TWIS_ENABLED
 1

	)

4448 #iâdeà
NRFX_TWIS0_ENABLED


4449 
	#NRFX_TWIS0_ENABLED
 1

	)

4452 #iâdeà
NRFX_TWIS_NO_SYNC_MODE


4453 
	#NRFX_TWIS_NO_SYNC_MODE
 0

	)

4456 #iâdeà
TWIS_ASSUME_INIT_AFTER_RESET_ONLY


4457 
	#TWIS_ASSUME_INIT_AFTER_RESET_ONLY
 0

	)

4460 #iâdeà
NRFX_TWIS_ASSUME_INIT_AFTER_RESET_ONLY


4461 
	#NRFX_TWIS_ASSUME_INIT_AFTER_RESET_ONLY
 0

	)

4464 #iâdeà
NRF_FSTORAGE_ENABLED


4465 
	#NRF_FSTORAGE_ENABLED
 1

	)

4468 #iâdeà
NRF_FSTORAGE_PARAM_CHECK_DISABLED


4469 
	#NRF_FSTORAGE_PARAM_CHECK_DISABLED
 0

	)

4473 #iâdeà
NRF_FSTORAGE_SD_QUEUE_SIZE


4474 
	#NRF_FSTORAGE_SD_QUEUE_SIZE
 4

	)

4477 #iâdeà
NRF_FSTORAGE_SD_MAX_RETRIES


4478 
	#NRF_FSTORAGE_SD_MAX_RETRIES
 8

	)

4481 #iâdeà
NRF_FSTORAGE_SD_MAX_WRITE_SIZE


4482 
	#NRF_FSTORAGE_SD_MAX_WRITE_SIZE
 4096

	)

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_flash.c

7 
	~"Äf_log.h
"

8 
	~"Äf_f¡Üage.h
"

9 
	~"Äf_¡»¼Ü.h
"

10 
	~"Äf_f¡Üage_nvmc.h
"

11 
	~"sdk_rÜs.h
"

12 
	~"Äf_soc.h
"

14 
	~"gs_´x.h
"

15 
	~"­p_tim.h
"

16 
	~"b¥.h
"

18 
f¡Üage_evt_hªdËr
(
Äf_f¡Üage_evt_t
 * 
p_evt
);

20 
NRF_FSTORAGE_DEF
(
Äf_f¡Üage_t
 
f¡Üage
) =

22 .
evt_hªdËr
 = 
f¡Üage_evt_hªdËr
,

23 .
	g¡¬t_addr
 = 0x3e000,

24 .
	gd_addr
 = 0x3ffff,

27 
ut32_t
 
	$Äf5_æash_d_addr_g
()

29 
ut32_t
 cÚ¡ 
boÙlßd_addr
 = 
NRF_UICR
->
NRFFW
[0];

30 
ut32_t
 cÚ¡ 
·ge_sz
 = 
NRF_FICR
->
CODEPAGESIZE
;

31 
ut32_t
 cÚ¡ 
code_sz
 = 
NRF_FICR
->
CODESIZE
;

33  (
boÙlßd_addr
 != 0xFFFFFFFF ?

34 
boÙlßd_addr
 : (
code_sz
 * 
·ge_sz
));

35 
	}
}

37 
	$pow_mªage
()

39 
	`__WFE
();

40 
	}
}

42 
	$f¡Üage_evt_hªdËr
(
Äf_f¡Üage_evt_t
 * 
p_evt
)

44 ià(
p_evt
->
»suÉ
 !ð
NRF_SUCCESS
) {

45 
	`NRF_LOG_INFO
("--> Eventeceived: ERROR whilexecutingn fstorage operation.");

49 
p_evt
->
id
)

51 
NRF_FSTORAGE_EVT_WRITE_RESULT
:

53 
	`NRF_LOG_INFO
("--> Eventeceived: wrote %d bytestddress 0x%x.",

54 
p_evt
->
Ën
,_evt->
addr
);

56 
NRF_FSTORAGE_EVT_ERASE_RESULT
:

58 
	`NRF_LOG_INFO
("--> Eventeceived:rased %dage fromddress 0x%x.",

59 
p_evt
->
Ën
,_evt->
addr
);

65 
	}
}

67 
	$´t_æash_fo
(
Äf_f¡Üage_t
 * 
p_f¡Üage
)

69 
	`NRF_LOG_INFO
("========| flash info |========");

70 
	`NRF_LOG_INFO
("a£ un: \t%d bys", 
p_f¡Üage
->
p_æash_fo
->
a£_un
);

71 
	`NRF_LOG_INFO
("´og¿m un: \t%d bys", 
p_f¡Üage
->
p_æash_fo
->
´og¿m_un
);

72 
	`NRF_LOG_INFO
("==============================");

73 
	}
}

76 
	$wa_fÜ_æash_»ady
()

79 
	`Äf_f¡Üage_is_busy
(&
f¡Üage
))

81 
	`pow_mªage
();

83 
	}
}

85 
ut32_t
 
	$round_up_u32
(
ut32_t
 
Ën
)

87 ià(
Ën
 % (
ut32_t
)) {

88  (
Ën
 + (
ut32_t
) - (len % (uint32_t)));

91  
Ën
;

92 
	}
}

94 
	$f¡Üage_»ad
(
ut32_t
 
addr
, * 
d©a
 ,ut32_
Ën
)

96 
»t_code_t
 
rc
;

97 
Ën
 = 
	`round_up_u32
(len);

100 
rc
 = 
	`Äf_f¡Üage_»ad
(&
f¡Üage
, 
addr
, 
d©a
, 
Ën
);

101 ià(
rc
 !ð
NRF_SUCCESS
) {

102 
	`NRF_LOG_INFO
("Äf_f¡Üage_»ad(è»tuºed: %s\r\n",
	`Äf_¡»¼Ü_g
(
rc
));

103  
rc
;

106  
rc
;

107 
	}
}

109 
	$f¡Üage_wre
Ð
ut32_t
 
addr
, cÚ¡ * 
p_d©a
,ut32_
Ën
)

111 
Ën
 = 
	`round_up_u32
(len);

112 
»t_code_t
 
rc
 = 
	`Äf_f¡Üage_wre
(&
f¡Üage
, 
addr
, 
p_d©a
, 
Ën
, 
NULL
);

113 ià(
rc
 !ð
NRF_SUCCESS
) {

114 
	`NRF_LOG_INFO
("Äf_f¡Üage_wre(è»tuºed: %s\r\n",
	`Äf_¡»¼Ü_g
(
rc
));

117  
rc
;

118 
	}
}

120 
	$f¡Üage_a£
(
ut32_t
 
addr
, ut32_
·ges_út
)

122 
»t_code_t
 
rc
 = 
	`Äf_f¡Üage_a£
(&
f¡Üage
, 
addr
, 
·ges_út
, 
NULL
);

123 ià(
rc
 !ð
NRF_SUCCESS
) {

124 
	`NRF_LOG_INFO
("Äf_f¡Üage_a£(è»tuºed: %s\r\n",
	`Äf_¡»¼Ü_g
(
rc
));

127  
rc
;

128 
	}
}

130 
	$gs_æash_
(
gs_æash
 *
æash
)

132 
ut32_t
 
r_code
;

133 
Äf_f¡Üage_­i_t
 * 
p_fs_­i
;

134 
gs_twis_»g
 *
»gli¡
 = (gs_twis_»g *)
æash
->
æash_addr
;

136 
p_fs_­i
 = &
Äf_f¡Üage_nvmc
;

137 
f¡Üage
.
¡¬t_addr
 = 
æash
->
æash_¡¬t
;

138 
f¡Üage
.
d_addr
 = 
æash
->
æash_¡Ý
;

139 
r_code
 = 
	`Äf_f¡Üage_
(&
f¡Üage
, 
p_fs_­i
, 
NULL
);

140 
	`APP_ERROR_CHECK
(
r_code
);

142 
	`´t_æash_fo
(&
f¡Üage
);

143 (è
	`Äf5_æash_d_addr_g
();

146 
	`Äf_f¡Üage_»ad
(&
f¡Üage
, 
æash
->
æash_¡¬t
, 
»gli¡
, 
	`round_up_u32
(256));

148 ià(
»gli¡
->
æash_
 != 0x01) {

149 
	`mem£t
(
»gli¡
,0x00,0xff);

150 
»gli¡
->
æash_
 = 0x01;

151 
	`f¡Üage_a£
(
æash
->
æash_¡¬t
,1);

152 
	`wa_fÜ_æash_»ady
();

153 
	`f¡Üage_wre
(
æash
->
æash_¡¬t
,
»gli¡
, 256);

156 
	`mem£t
(
»gli¡
,0x00,0x60);

157 
»gli¡
->
æash_
 = 0x01;

160 
	`NRF_LOG_INFO
("Äf_f¡Üage_ gegli¡ %x\n",
»gli¡
);

163 
	}
}

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_flash.h

1 #iâdeà
__GS_FLASH_H__


2 
	#__GS_FLASH_H__


	)

4 
	sgs_æash
 {

5 
ut32_t
 
	mæash_¡¬t
;

6 
ut32_t
 
	mæash_¡Ý
;

7 *
	mæash_addr
;

11 
gs_æash_
(
gs_æash
 *
æash
);

12 
wa_fÜ_æash_»ady
();

13 
f¡Üage_a£
(
ut32_t
 
addr
, ut32_
·ges_út
);

14 
f¡Üage_wre
Ð
ut32_t
 
addr
, cÚ¡ * 
p_d©a
,ut32_
Ën
);

15 
f¡Üage_»ad
(
ut32_t
 
addr
, * 
d©a
, ut32_
Ën
);

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_gpio.c

7 
	~"Äf_log.h
"

8 
	~"Äf_day.h
"

9 
	~"Äfx_gpiÙe.h
"

10 
	~"gs_gpio.h
"

12 
gs_gpios
 *
	gg_gpio
;

13 
	$gs_£t_»ady_le
()

17 
	`Äf_gpio_p_wre
(
g_gpio
->
»ady_le
,0);

18 
	}
}

20 
	$gs_þr_»ady_le
()

24 
	`Äf_gpio_p_wre
(
g_gpio
->
»ady_le
,1);

25 
	}
}

27 
	$gs_gpio_
(
gs_gpios
 *
gpio
)

30 
g_gpio
 = 
gpio
;

31 
	`Äf_gpio_cfg_ouut
(
g_gpio
->
»ady_le
);

32 
	`Äf_gpio_p_wre
(
g_gpio
->
»ady_le
,g_gpio->

);

33 
	}
}

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_gpio.h

7 #iâdeà
__GS_EVENT_H__


8 
	#__GS_EVENT_H__


	)

10 
	#GS_GPIO_HIGH
 1

	)

11 
	#GS_GPIO_LOW
 0

	)

12 
	#GS_SPIS_READY_PIN
 6

	)

13 
	sgs_gpios
 {

14 
	m»ady_le
;

15 
	m
;

18 
gs_£t_»ady_le
();

19 
gs_þr_»ady_le
();

20 
gs_gpio_
(
gs_gpios
 *);

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_main.c

8 
	~<¡dboÞ.h
>

9 
	~<¡dt.h
>

10 
	~"sdk_commÚ.h
"

11 
	~"Äf_day.h
"

12 
	~"Äf_gpio.h
"

13 
	~"Äf_rÜ.h
"

14 
	~"mem_mªag.h
"

15 
	~"b¥.h
"

16 
	~"Äf_log.h
"

17 
	~"Äf_log_ù¾.h
"

18 
	~"Äf_log_deçuÉ_backds.h
"

20 
	~"gs_´x.h
"

22 
deviû_fo
 
	gg_devfo
[8] = {

23 {
çl£
,0,0,0,0,0,0},

24 {
çl£
,0,0,0,0,0,0},

25 {
çl£
,0,0,0,0,0,0},

26 {
çl£
,0,0,0,0,0,0},

27 {
çl£
,0,0,0,0,0,0},

28 {
çl£
,0,0,0,0,0,0},

29 {
çl£
,0,0,0,0,0,0},

30 {
çl£
,0,0,0,0,0,0}

32 
gs_twis_»g
 
	gg_twis_»gli¡
;

33 
gs_´x
 
	gg_´x
 = {

34 .
¥is
 = {

35 .
xãr_dÚe
 = 
çl£
,

36 .
	g¥is_lock
 = 
çl£
,

37 .
	gcmd
 = 
DEVICE_CMD_UNKNOWN
,

38 .
	g¡©e
 = 
GS_SPIS_STATE_IDEL
,

39 .
	g¥is
 = 
NRF_DRV_SPIS_INSTANCE
(
GS_SPIS_INSTANCE
),

40 .
	gcÚfig
 = {

41 .
miso
 = 
GS_SPIS_MISO_PIN
,

42 .
	gmosi
 = 
GS_SPIS_MOSI_PIN
,

43 .
	gsck
 = 
GS_SPIS_SCK_PIN
,

44 .
	gc¢
 = 
GS_SPIS_CSN_PIN
,

45 .
	gmode
 = 
NRF_DRV_SPIS_MODE_0
,

46 .
	g´iÜy
 = 
GS_SPIS_IRQ_PRIORITY_LEVEL
,

47 .
	gdef
 = 
GS_SPIS_DEFAULT_DEF_CHARACTER
,

48 .
	gÜc
 = 
GS_SPIS_DEFAULT_ORC_CHARACTER
,

52 .
	gtwis
 = {

53 .
cÚfig
 = {

54 .
addr
 = 
GS_DEFAULT_TWIS_ADDR
,

55 .
	gsþ
 = 11,

56 .
	gsda
 = 12,

57 .
	g´iÜy
 = 
GS_DEFAULT_TWIS_PRIORITY
,

60 .
	gr
 = 0,

61 .
	g»gli¡
 = &
g_twis_»gli¡
,

62 .
	gtwis
 = 
NRF_DRV_TWIS_INSTANCE
(
GS_TWIS_INSTANCE
),

65 .
	ggpio
 = {

66 .
»ady_le
 = 
GS_SPIS_READY_PIN
,

67 .
	g
 = 
GS_GPIO_HIGH
,

70 .
	gÄf
 = {

71 .
ba£addr0
 = 
GS_DEFAULT_BASE_ADDRESS_0
,

72 .
	gba£addr1
 = 
GS_DEFAULT_BASE_ADDRESS_1
,

73 .
	g´efix
 = 
GS_DEFAULT_ADDR_PREFIX
,

74 .
	gchªÃl_bË
 = 
GS_DEFAULT_CHANNEL_TABLE
,

75 .
	gchªÃl_£t
 = 
GS_DEFAULT_CHNNUM
,

78 .
	gæash
 = {

79 .
æash_¡¬t
 = 0x3e000,

80 .
	gæash_¡Ý
 = 0x3ffff,

81 .
	gæash_addr
 = (*)&
g_twis_»gli¡
,

85 .
	gtim
 = {

86 .
³riod
 = 10,

87 .
	gabË
 = 
çl£
,

88 .
	gÿÎback
 = 
NULL
,

89 .
	gticks_couÁ
 = 100,

90 .
	gdev
 = 
NRF_DRV_TIMER_INSTANCE
(
GS_RF_TIMER_INSTANCE
),

93 .
	gcmd¬g
 = 
NRFCMD_UNKNOWN
,

94 .
	gh¹bt
 = 0,

95 .
	gdevút
 = 8,

96 .
	gdevli¡
 = 
g_devfo
,

97 .
	gvsiÚ
 = "V0.01",

100 
	$þocks_¡¬t
()

102 
NRF_CLOCK
->
EVENTS_HFCLKSTARTED
 = 0;

103 
NRF_CLOCK
->
TASKS_HFCLKSTART
 = 1;

104 
NRF_CLOCK
->
EVENTS_HFCLKSTARTED
 == 0);

105 
	}
}

108 
	$ma
()

110 
ut32_t
 
r_code
;

111 
gs_´x
 *
´x
 = &
g_´x
;

113 
	`þocks_¡¬t
();

114 
r_code
 = 
	`Äf_mem_
();

115 
	`APP_ERROR_CHECK
(
r_code
);

117 
r_code
 = 
	`NRF_LOG_INIT
(
NULL
);

118 
	`NRF_LOG_DEFAULT_BACKENDS_INIT
();

119 
	`APP_ERROR_CHECK
(
r_code
);

122 
	`gs_­p_tim_
(&
´x
->
tim
);

125 
	`gs_æash_
(&
´x
->
æash
);

128 
	`gs_gpio_
(&
´x
->
gpio
);

131 
	`gs_¥is_
(&
´x
->
¥is
);

134 
	`gs_twis_
(&
´x
->
twis
);

135 
	`memýy
(
´x
->
twis
.
»gli¡
->
vsiÚ
,prx->version,6);

136 
	`NRF_LOG_INFO
("GSRF PRX % S¹ed.",
´x
->
vsiÚ
);

137 
ue
) {

138 
	`NRF_LOG_FLUSH
();

139 ià(
	`gs_rf_abËd
()) {

140 ià(
´x
->
¥is
.
xãr_ÿÎback
)

141 
´x
->
¥is
.
	`xãr_ÿÎback
(&prx->spis);

145 
	}
}

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_nrf_esb.c

1 
	~"Äf_esb.h
"

2 
	~<¡dboÞ.h
>

3 
	~<¡dt.h
>

4 
	~"sdk_commÚ.h
"

5 
	~"Äf.h
"

6 
	~"Äf_esb_rÜ_codes.h
"

7 
	~"Äf_day.h
"

8 
	~"Äf_gpio.h
"

9 
	~"Äf_rÜ.h
"

10 
	~"bßrds.h
"

13 
	~"Äf_log.h
"

14 
	~"Äf_log_ù¾.h
"

15 
	~"Äf_log_deçuÉ_backds.h
"

17 
	~"gs_tim.h
"

18 
	~"gs_rgbuf.h
"

20 
	#ESB_DEVICE_PIPE
 0

	)

21 
	#ESB_RX_PAYLOAD_LENGTH
 224

	)

23 
Äf_esb_·ylßd_t
 
	grx_·ylßd
;

24 
boÞ
 
	gg_esb_¡¬t
 = 
çl£
;

25 
	$Äf_esb_evt_hªdËr
(
Äf_esb_evt_t
 cÚ¡ * 
p_evt
)

27 
gs_rgbuf
 *
rgbuf
 = 
	`gs_rgbuf_g_by_devid
(
ESB_DEVICE_PIPE
);

28 
ut8_t
 *
rx_·ylßd_addr
 = 
	`rf_»que¡_·ylßd_addr
(
rgbuf
,
ESB_RX_PAYLOAD_LENGTH
);

29 
p_evt
->
evt_id
)

31 
NRF_ESB_EVENT_TX_SUCCESS
:

34 
NRF_ESB_EVENT_TX_FAILED
:

37 
NRF_ESB_EVENT_RX_RECEIVED
:

39 ià(
	`Äf_esb_»ad_rx_·ylßd
(&
rx_·ylßd
è=ð
NRF_SUCCESS
)

41 
pe_»cived_bys_³r_£c
[
rx_·ylßd
.
pe
] +ðrx_·ylßd.
Ëngth
;

43 ià(
rx_·ylßd_addr
 !ð
NULL
) {

44 
	`memýy
(
rx_·ylßd_addr
,
rx_·ylßd
.
d©a
,rx_·ylßd.
Ëngth
);

48 
gs_rf_drÝ_·cks_tÙ®
++;

50 
rf_»cived_bys_³r_£c
 +ð
rx_·ylßd
.
Ëngth
;

56 
	}
}

58 
ut32_t
 
	$gs_esb_
( )

60 
ut32_t
 
r_code
;

61 
ut8_t
 
ba£_addr_0
[4] = {0xE7, 0xE7, 0xE7, 0xE7};

62 
ut8_t
 
ba£_addr_1
[4] = {0xC2, 0xC2, 0xC2, 0xC2};

63 
ut8_t
 
addr_´efix
[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8 };

64 
Äf_esb_cÚfig_t
 
Äf_esb_cÚfig
 = 
NRF_ESB_DEFAULT_CONFIG
;

65 
Äf_esb_cÚfig
.
·ylßd_Ëngth
 = 252;

66 
Äf_esb_cÚfig
.
´ÙocÞ
 = 
NRF_ESB_PROTOCOL_ESB_DPL
;

67 
Äf_esb_cÚfig
.
b¿
 = 
NRF_ESB_BITRATE_2MBPS
;

68 
Äf_esb_cÚfig
.
mode
 = 
NRF_ESB_MODE_PRX
;

69 
Äf_esb_cÚfig
.
evt_hªdËr
 = 
Äf_esb_evt_hªdËr
;

70 
Äf_esb_cÚfig
.
£Ëùive_auto_ack
 = 
çl£
;

73 
r_code
 = 
	`Äf_esb_
(&
Äf_esb_cÚfig
);

74 
	`VERIFY_SUCCESS
(
r_code
);

76 
r_code
 = 
	`Äf_esb_£t_ba£_add»ss_0
(
ba£_addr_0
);

77 
	`VERIFY_SUCCESS
(
r_code
);

79 
r_code
 = 
	`Äf_esb_£t_ba£_add»ss_1
(
ba£_addr_1
);

80 
	`VERIFY_SUCCESS
(
r_code
);

82 
r_code
 = 
	`Äf_esb_£t_´efixes
(
addr_´efix
, 8);

83 
	`VERIFY_SUCCESS
(
r_code
);

86 
	`NRF_LOG_INFO
("esb in codð%d\n",
r_code
);

87  
r_code
;

88 
	}
}

90 
ut32_t
 
	$gs_esb_abË
()

92 
ut32_t
 
r_code
 = 0;

93 
g_esb_¡¬t
 = 
ue
;

94 
r_code
 = 
	`Äf_esb_¡¬t_rx
();

95 
	`NRF_LOG_INFO
("esbÇbË codð%d\n",
r_code
);

96  
r_code
;

97 
	}
}

99 
ut32_t
 
	$gs_esb_di§bË
()

101 
g_esb_¡¬t
 = 
çl£
;

102  
	`Äf_esb_¡Ý_rx
();

103 
	}
}

105 
boÞ
 
	$gs_esb_abËd
()

107  
g_esb_¡¬t
;

108 
	}
}

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_nrf_gzll.c

7 
	~<¡rg.h
>

8 
	~"Äf_gzÎ.h
"

9 
	~"Äf_log.h
"

10 
	~"Äf_log_ù¾.h
"

11 
	~"Äf_gzÎ_rÜ.h
"

12 
	~"gs_tim.h
"

13 
	~"gs_´x.h
"

15 
ut8_t
 
	gm_d©a_·ylßd
[
NRF_GZLL_CONST_MAX_PAYLOAD_LENGTH
];

16 
ut8_t
 
	gm_ack_·ylßd
[6] = {0xef,0x01,0x00,0x00,0x55,0xaa};

19 
gs_´x
 *
	$g_gs_´x
()

21  &
g_´x
;

22 
	}
}

24 
	$gs_rf_þn_txfifo
(
ut32_t
 
pe
)

26 
	`Äf_gzÎ_æush_tx_fifo
 (
pe
);

27 
	}
}

29 
	$gs_rf_þn_rxfifo
(
ut32_t
 
pe
)

31 
	`Äf_gzÎ_æush_rx_fifo
 (
pe
);

32 
	}
}

34 
	$Äf_gzÎ_ho¡_rx_d©a_»ady
(
ut32_t
 
pe
, 
Äf_gzÎ_ho¡_rx_fo_t
 
rx_fo
)

36 
boÞ
 
»suÉ_v®ue
 = 
çl£
;

37 
ut32_t
 
rx_·ylßd_Ëngth
 = 
NRF_GZLL_CONST_MAX_PAYLOAD_LENGTH
;

38 
gs_rgbuf
 *
rgbuf
 = 
	`gs_rgbuf_g_by_devid
(
pe
);

39 
ut8_t
 *
rx_·ylßd_addr
 = 
	`rf_»que¡_·ylßd_addr
(
rgbuf
,
rx_·ylßd_Ëngth
);

40 
gs_´x
 *
´x
 = 
	`g_gs_´x
();

42 ià(!
rx_·ylßd_addr
) {

43 
rx_·ylßd_addr
 = 
m_d©a_·ylßd
;

44 
gs_rf_drÝ_·cks_tÙ®
++;

51 
»suÉ_v®ue
 = 
	`Äf_gzÎ_ãtch_·ck_äom_rx_fifo
(
pe
,

52 
rx_·ylßd_addr
,&
rx_·ylßd_Ëngth
);

53 ià(!
»suÉ_v®ue
) {

54 
	`NRF_LOG_ERROR
("RX fiforror ");

57 ià(
rx_·ylßd_Ëngth
 !ð
NRF_GZLL_CONST_MAX_PAYLOAD_LENGTH
) {

64 iàÐ
rx_·ylßd_Ëngth
 > 0 ) {

65 
pe_»cived_bys_³r_£c
[
pe
] +ð
rx_·ylßd_Ëngth
;

66 
rf_»cived_bys_³r_£c
 +ð
rx_·ylßd_Ëngth
;

71 ià(!
´x
->
h¹bt
) {

72 
deviû_fo
 *
devfo
 = 
´x
->
devli¡
 + 
pe
;

73 ià(
´x
->
tim
.
ticks
 > 2 *rx->tim.
ticks_couÁ
 / 3) {

74 ià(!
devfo
->
sync
) {

76 
devfo
->
ch¬ge
 = *(
rx_·ylßd_addr
 + 0);

77 
devfo
->
b©ry_h
 = *(
rx_·ylßd_addr
 + 1);

78 
devfo
->
b©ry_l
 = *(
rx_·ylßd_addr
 + 2);

79 
devfo
->
h¹bt
 = 0xff;

81 
devfo
->
sync
 = 
ue
;

86 ià(
´x
->
cmd¬g
 =ð
NRFCMD_DISCONNECT
) {

87 ià(
´x
->
cmdv®
 & (1 << 
pe
)) {

88 
m_ack_·ylßd
[2] = 
pe
;

89 
m_ack_·ylßd
[3] = 
NRFCMD_DISCONNECT
;

90 
»suÉ_v®ue
 =

91 
	`Äf_gzÎ_add_·ck_to_tx_fifo
(
pe
,
m_ack_·ylßd
,(m_ack_payload));

92 ià(! 
»suÉ_v®ue
) {

93 
	`NRF_LOG_ERROR
("£ndckØdeviû %d¼Ü!",
pe
);

103 ià(
´x
->
cmdv®
 == 0x00) {

104 
´x
->
cmd¬g
 = 
NRFCMD_UNKNOWN
;

109 
	}
}

111 
	$Äf_gzÎ_deviû_tx_sucûss
(
ut32_t
 
pe
, 
Äf_gzÎ_deviû_tx_fo_t
 
tx_fo
)

113 
	}
}

115 
	$Äf_gzÎ_deviû_tx_çed
(
ut32_t
 
pe
, 
Äf_gzÎ_deviû_tx_fo_t
 
tx_fo
)

117 
	}
}

120 
ut32_t
 
	$gs_gzÎ_£t_ba£_add»ss0
(
gs_Äf_deviû
 *
dev
)

122 
ut8_t
 
ba£_add»ss0
[] = 
GS_DEFAULT_BASE_ADDRESS_0
;

123 
gs_´x
 *
´x
 = 
	`g_gs_´x
();

124 
gs_twis_»g
 *
»g
 = 
´x
->
twis
.
»gba£
;

125 ià(
»g
) {

127 ià(
»g
->
ho¡_ba£_addr0
[0]) {

128 
	`memýy
(
ba£_add»ss0
,
»g
->
ho¡_ba£_addr0
,(base_address0));

132  
	`Äf_gzÎ_£t_ba£_add»ss_0
(
ba£_add»ss0
);

133 
	}
}

135 
ut32_t
 
	$gs_gzÎ_£t_ba£_add»ss1
(
gs_Äf_deviû
 *
d
)

137 
gs_´x
 *
´x
 = 
	`g_gs_´x
();

138 
gs_twis_»g
 *
»g
 = 
´x
->
twis
.
»gba£
;

139 
ut8_t
 
ba£_add»ss1
[] = 
GS_DEFAULT_BASE_ADDRESS_1
;

141 iàÐ
»g
 ) {

143 ià(
»g
->
ho¡_ba£_addr0
[0]) {

144 
	`memýy
(
ba£_add»ss1
,
»g
->
ho¡_ba£_addr1
,(base_address1));

148  
	`Äf_gzÎ_£t_ba£_add»ss_1
(
ba£_add»ss1
);

149 
	}
}

152 
ut32_t
 
	$gs_gzÎ_£t_chªÃl_bË
()

154 
ut8_t
 
chªÃl_bË
[] = 
GS_DEFAULT_CHANNEL_TABLE
;

155 
ut8_t
 
chÂum
 = 
GS_DEFAULT_CHNNUM
;

156 
gs_´x
 *
´x
 = 
	`g_gs_´x
();

157 
gs_twis_»g
 *
»g
 = 
´x
->
twis
.
»gba£
;

159 iàÐ
»g
 ) {

161 ià(
»g
->
ho¡_chn_bË
[0] &&eg->host_chn_table[0] != 0xff) {

162 
	`memýy
(
chªÃl_bË
,
»g
->
ho¡_chn_bË
,(channel_table));

165 ià(
»g
->
ho¡_chn_£t
 &&eg->host_chn_set != 0xff) {

166 
tmp
 = 0;

167 
chÂum
 = 
»g
->
ho¡_chn_£t
;

168 
tmp
 = 0 ;m°< 
chÂum
;mp++) {

169 
	`NRF_LOG_ERROR
("Nrf set host channel %d = %d",\

170 
tmp
,
chªÃl_bË
[tmp]);

175  
	`Äf_gzÎ_£t_chªÃl_bË
(
chªÃl_bË
,
chÂum
);

176 
	}
}

178 
	$Äf_gzÎ_di§bËd
()

180 
	}
}

182 
	$gs_gzÎ_di§bË
()

184 if(
	`Äf_gzÎ_is_abËd
())

186 
	`Äf_gzÎ_di§bË
();

188 
	}
}

190 
ut32_t
 
	$gs_gzÎ_abËd
()

192  
	`Äf_gzÎ_is_abËd
();

193 
	}
}

195 
ut32_t
 
	$gs_gzÎ_abË
()

197 
ut32_t
 
r_code
 = 0;

198 if(!
	`Äf_gzÎ_is_abËd
())

200 
r_code
 = 
	`Äf_gzÎ_abË
();

202  
r_code
;

203 
	}
}

205 
ut32_t
 
	$gs_gzÎ_
()

208 
boÞ
 
»suÉ_v®ue
 = 
	`Äf_gzÎ_
(
NRF_GZLL_MODE_HOST
);

209 
	`GAZELLE_ERROR_CODE_CHECK
(
»suÉ_v®ue
);

220 
	`gs_gzÎ_£t_chªÃl_bË
();

223 
»suÉ_v®ue
 = 
	`Äf_gzÎ_abË
();

224 
	`GAZELLE_ERROR_CODE_CHECK
(
»suÉ_v®ue
);

226 
	`NRF_LOG_INFO
("gsrf gzll start!.");

228 
	}
}

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_prx.h

7 #iâdeà
__GS_PRX_H__


8 
	#__GS_PRX_H__


	)

10 
	~"gs_twis.h
"

11 
	~"gs_¥is.h
"

12 
	~"gs_gpio.h
"

13 
	~"gs_rf.h
"

14 
	~"gs_tim.h
"

15 
	~"gs_rgbuf.h
"

16 
	~"gs_æash.h
"

17 
	e´x_cmd
 {

18 
	mNRFCMD_UNKNOWN
 = 0,

19 
	mNRFCMD_DISCONNECT
 = 1,

22 
	sdeviû_fo
 {

23 
boÞ
 
	msync
;

24 
ut8_t
 
	mpe
;

25 
ut8_t
 
	mch¬ge
;

26 
ut8_t
 
	mb©ry_h
;

27 
ut8_t
 
	mb©ry_l
;

28 
ut8_t
 
	mcÚÃù
;

29 
ut8_t
 
	mh¹bt
;

33 
	sgs_´x
 {

34 
ut8_t
 
	mcmd¬g
;

35 
ut8_t
 
	mcmdv®
;

36 vÞ©
ut8_t
 
	mh¹bt
;

37 
gs_¥is
 
	m¥is
;

38 
gs_twis
 
	mtwis
;

39 
gs_gpios
 
	mgpio
;

40 
gs_Äf_deviû
 
	mÄf
;

41 
gs_æash
 
	mæash
;

42 
gs_tim
 
	mtim
;

43 
ut8_t
 
	mdevút
;

45 *
	mvsiÚ
;

46 
deviû_fo
 *
	mdevli¡
;

47 (*
	m¥is_xãr
è(*
	mcÚx
);

48 }
	tgs_´x_t
;

50 
gs_´x
 
g_´x
;

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_rf.c

7 #ifdeà
CONFIG_NRF_GZLL


8 
	~"gs_Äf_gzÎ.c
"

10 
	~"gs_Äf_esb.c
"

13 
	$gs_rf_di§bË
()

15 #ifdeà
CONFIG_NRF_GZLL


16 
	`gs_gzÎ_di§bË
();

18 
	`gs_esb_di§bË
();

20 
	`NRF_LOG_INFO
("RF Disable!\n");

21 
	}
}

23 
ut32_t
 
	$gs_rf_abËd
()

25 #ifdeà
CONFIG_NRF_GZLL


26  
	`Äf_gzÎ_is_abËd
();

28  
	`gs_esb_abËd
();

30 
	}
}

32 
ut32_t
 
	$gs_rf_
()

34 
	`NRF_LOG_INFO
("GrandStream RfAudio Init.");

35 #ifdeà
CONFIG_NRF_GZLL


36  
	`gs_gzÎ_
();

38  
	`gs_esb_
();

42 
	}
}

44 
ut32_t
 
	$gs_rf_abË
()

46 
	`NRF_LOG_INFO
("RF Enable!\n.");

47 
	`gs_rf_
();

48 #ifdeà
CONFIG_NRF_GZLL


49  
	`gs_gzÎ_abË
();

51  
	`gs_esb_abË
();

53 
	}
}

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_rf.h

8 #iâdeà
__GS_RF_H__


9 
	#__GS_RF_H__


	)

11 
	#GS_DEFAULT_BASE_ADDRESS_0
 {'G','S','R','F'}

	)

12 
	#GS_DEFAULT_BASE_ADDRESS_1
 {'A','B','C','D'}

	)

13 
	#GS_DEFAULT_ADDR_PREFIX
 {0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8}

	)

14 
	#GS_DEFAULT_CHANNEL_TABLE
 {79,2,77,4}

	)

15 
	#GS_DEFAULT_CHNNUM
 4

	)

17 
	sgs_Äf_deviû
 {

18 
ut8_t
 
	mba£addr0
[8];

19 
ut8_t
 
	mba£addr1
[8];

20 
ut8_t
 
	m´efix
[8];

21 
ut8_t
 
	mchªÃl_bË
[10];

22 
ut8_t
 
	mchªÃl_£t
;

26 
gs_rf_di§bË
();

27 
ut32_t
 
gs_rf_
();

28 
ut32_t
 
gs_rf_abË
();

29 
ut32_t
 
gs_rf_abËd
();

30 
gs_rf_þn_txfifo
(
ut32_t
 
pe
);

31 
gs_rf_þn_rxfifo
(
ut32_t
 
pe
);

32 
ut32_t
 
gs_£t_ba£_add»ss0
(
gs_Äf_deviû
 *
´x
);

33 
ut32_t
 
gs_£t_ba£_add»ss1
(
gs_Äf_deviû
 *
´x
);

34 
ut32_t
 
gs_rf_£t_chªÃl_bË
(
gs_Äf_deviû
 *
´x
);

35 
ut32_t
 
gs_rf_£t_´efix_bË
(
gs_Äf_deviû
 *
´x
);

36 
boÞ
 
gs_rf_£t_rx_pe_abËd
(
ut32_t
 
pes
);

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_ringbuf.c

7 
	~<¡dt.h
>

8 
	~<¡dlib.h
>

9 
	~"Äf_log.h
"

11 
	~"gs_rgbuf.h
"

13 
gs_rgbuf
 
	ggs_rgbuf
[
GS_DEFAULT_DEVICE_NUMBER
];

14 
gs_rgbuf
 *
	ggs_rgbuf_li¡
 = gs_ringbuf;

15 
ut8_t
 
	gg_gs_rgbuf_avaabe_couÁ
 = 0;

17 
t8_t
 
	$¥is_·ck_
(
gs_rgbuf
 *
rgbuf
)

19 
ut8_t
 
dex
 = 0;

20 
ut8_t
 
couÁ
 = 
rgbuf
->
¥is_·ck_couÁ
;

21 
¥is_·ck
 *
·ck
;

22 
¥is_·ck
 *
·ckli¡
 = 
	`m®loc
((¥is_·ckè* 
couÁ
);

23 if(!
·ckli¡
){

24 
	`NRF_LOG_ERROR
("get spisacketrror!");

28 
·ck
 = 
·ckli¡
;

29 
dex
 = 0; index < 
couÁ
; index++,
·ck
++){

30 
·ck
->
dex
 = index;

31 
·ck
->
¡©us
 = 
BUF_FREE
;

32 
·ck
->
addr
 = 
rgbuf
->
buff
 +gbuf->
¥is_·ck_size
 * 
dex
;

33 
·ck
->
¡¬t
 = (
ut8_t
 *íack->
addr
;

34 
·ck
->
ty³
 = (
ut8_t
 *íack->
addr
 + 1;

35 
·ck
->
devid
 = (
ut8_t
 *íack->
addr
 + 2;

39 
rgbuf
->
·ckli¡
 =acketlist;

42 
	}
}

44 
	$¥is_·ck_£t_¡©us
(
¥is_·ck
 *
·ck
,
rgbuf_¡©us
 
¡©us
)

46 if(!
·ck
)

49 
·ck
->
¡©us
 = status;

50 
	}
}

52 
	$¥is_·ck_£t_hd
(
¥is_·ck
 *
·ck
,
ut8_t
 
ty³
,ut8_
devid
)

54 if(!
·ck
)

56 *
·ck
->
ty³
 =ype;

57 *
·ck
->
devid
 = devid;

58 *
·ck
->
¡¬t
 = 
GS_SPI_HEAD_START
;

59 
	}
}

61 
t8_t
 
	$gs_rgbuf_
(
gs_rgbuf
 *
rgbuf
,
ut8_t
 
couÁ
,ut8_
size
)

63 
ut8_t
 *
pbuf
 = 
NULL
;

64 
ut32_t
 
Ëngth
 = 0;

65 
ut8_t
 
r_code
 = 0;

67 
Ëngth
 = 
couÁ
 * 
size
;

68 
pbuf
 = 
	`m®loc
((
ut8_t
è* 
Ëngth
);

69 ià(!
pbuf
){

70 
	`NRF_LOG_ERROR
("getingbufrror!");

74 
rgbuf
->
buff
 = 
pbuf
;

75 
rgbuf
->
tx_dex
 = 0;

76 
rgbuf
->
rx_dex
 = 0;

77 
rgbuf
->
¥is_·ck_couÁ
 = 
couÁ
;

78 
rgbuf
->
¥is_·ck_size
 = 
size
;

81 
	`mem£t
(
pbuf
,0x00,
Ëngth
);

82 
r_code
 = 
	`¥is_·ck_
(
rgbuf
);

83 if(
r_code
){

84 
	`NRF_LOG_ERROR
("init spisacketrror!");

89 
	}
}

91 
	$gs_rgbuf_ex
(
gs_rgbuf
 *
rgbuf
)

93 if(!
rgbuf
)

96 if(
rgbuf
->
·ckli¡
)

97 
	`ä
(
rgbuf
->
·ckli¡
);

99 if(
rgbuf
->
buff
) {

100 
	`ä
(
rgbuf
->
buff
);

102 
rgbuf
->
buff
 = 
NULL
;

103 
rgbuf
->
·ckli¡
 = 
NULL
;

104 
	`mem£t
(
rgbuf
,0x00,(
gs_rgbuf
));

105 
	}
}

108 
ut8_t
 
	$gs_rgbuf_g_·ck_couÁ
(
gs_rgbuf
 *
rgbuf
)

110 if(!
rgbuf
)

113  
rgbuf
->
¥is_·ck_couÁ
;

114 
	}
}

116 
ut8_t
 
	$gs_rgbuf_g_·ck_size
(
gs_rgbuf
 *
rgbuf
)

118 if(!
rgbuf
)

121  
rgbuf
->
¥is_·ck_size
;

122 
	}
}

124 
ut8_t
 
	$gs_rgbuf_g_·ck_avaed
(
gs_rgbuf
 *
rgbuf
)

126 
¥is_·ck
 *
·ck
 = 
rgbuf
->
cu¼t
;

127 if(!
·ck
)

131 
	`NRF_LOG_INFO
("·ck index %dvaed %d",
·ck
->
dex
 ,·ck->
avaed
);

132  
·ck
->
avaed
;

134 
	}
}

136 
t8_t
 
	$gs_rgbuf_g_txdex
(
gs_rgbuf
 *
rgbuf
)

138 if(!
rgbuf
)

141  
rgbuf
->
tx_dex
;

142 
	}
}

144 
t8_t
 
	$gs_rgbuf_g_rxdex
(
gs_rgbuf
 *
rgbuf
)

146 if(!
rgbuf
)

149  
rgbuf
->
rx_dex
;

150 
	}
}

153 
¥is_·ck
 *
	$gs_rgbuf_g_rx·ck
(
gs_rgbuf
 *
rgbuf
)

155 
ut32_t
 
off£t
 = 0;

156 
¥is_·ck
 *
·ck
 = 
NULL
;

158 if(!
rgbuf
){

159 
	`NRF_LOG_DEBUG
("ringbufmpty!");

160  
NULL
;

163 
off£t
 = 
rgbuf
->
rx_dex
;

164 if(
off£t
 >ð
rgbuf
->
¥is_·ck_couÁ
)

166 
off£t
 = 0;

169 
·ck
 = 
rgbuf
->
·ckli¡
 + 
off£t
;

170 if(
·ck
->
¡©us
 =ð
BUF_FREE
){

171 
rgbuf
->
rx_dex
 = 
off£t
 + 1;

172 
·ck
->
¡©us
 = 
BUF_IN_RF
;

173 
	`NRF_LOG_ERROR
("gx·ck index %d!",
·ck
->
dex
);

174  
·ck
;

177 
	`NRF_LOG_DEBUG
("current spisacket busying!");

178  
NULL
;

179 
	}
}

181 
¥is_·ck
 *
	$gs_rgbuf_g_tx·ck
(
gs_rgbuf
 *
rgbuf
)

183 
ut32_t
 
off£t
 = 0;

184 
¥is_·ck
 *
·ck
 = 
NULL
;

186 if(!
rgbuf
)

187  
NULL
;

189 
off£t
 = 
rgbuf
->
tx_dex
;

190 if(
off£t
 >ð
rgbuf
->
¥is_·ck_couÁ
)

192 
off£t
 = 0;

196 
·ck
 = 
rgbuf
->
·ckli¡
 + 
off£t
;

197 if(
·ck
->
¡©us
 =ð
BUF_OUT_RF
){

198 
rgbuf
->
tx_dex
 = 
off£t
 + 1;

199 
·ck
->
¡©us
 = 
BUF_IN_SPI
;

201  
·ck
;

205  
NULL
;

206 
	}
}

208 
	$rgbuf_dump
(
gs_rgbuf
 *
rgbuf
)

210 
	}
}

212 
ut8_t
 *
	$rf_»que¡_·ylßd_addr
(
gs_rgbuf
 *
rgbuf
,
ut8_t
 
size
)

214 
¥is_·ck
 *
·ck
 = 
rgbuf
->
cu¼t
;

215 
ut8_t
 
»md
 , *
rf_·ylßd_addr
 = 
NULL
;

217 if(
·ck
 =ð
NULL
){

218 
ut8_t
 
off£t
 = 0;

219 
off£t
 = 
rgbuf
->
rx_dex
;

220 if(
off£t
 >ð
rgbuf
->
¥is_·ck_couÁ
)

221 
off£t
 = 0;

223 
·ck
 = 
rgbuf
->
·ckli¡
 + 
off£t
;

224 if(
·ck
->
¡©us
 =ð
BUF_FREE
){

225 
·ck
->
¡©us
 = 
BUF_IN_RF
;

226 
rgbuf
->
rx_dex
 = 
off£t
 + 1;

227 
rgbuf
->
cu¼t
 = 
·ck
;

228 
·ck
->
»md
 = 
rgbuf
->
¥is_·ck_size
 - 
GS_SPI_HEAD_LENGTH
 ;

233 
	`rgbuf_dump
(
rgbuf
);

235  
NULL
;

239 
»md
 = 
·ck
->remind;

240 if((
»md
 - 
size
) >= 0){

241 
rf_·ylßd_addr
 = (
·ck
->
addr
 + 
GS_SPI_HEAD_LENGTH
 ) +\

242 ((
rgbuf
->
¥is_·ck_size
 - 
GS_SPI_HEAD_LENGTH
 ) - 
»md
);

243 
»md
 -ð
size
;

246 
rgbuf
->
cu¼t
 = 
NULL
;

247 
·ck
->
¡©us
 = 
BUF_OUT_RF
;

248 
·ck
->
avaed
 = 
rgbuf
->
¥is_·ck_size
 - 
»md
;

249  
	`rf_»que¡_·ylßd_addr
(
rgbuf
,
size
);

252 
·ck
->
»md
 =emind;

253 if(!
rf_·ylßd_addr
)

255 
	`NRF_LOG_INFO
("rf getayloadddr fromacket:%d offset:%demind %d",

256 
·ck
->
dex
,(
»md
 + 
size
) / size,remind );

259  
rf_·ylßd_addr
;

260 
	}
}

263 
gs_rgbuf
 *
	$gs_rgbuf_g_by_devid
(
ut8_t
 
devid
)

265 if(
devid
 > 
g_gs_rgbuf_avaabe_couÁ
)

267 
	`NRF_LOG_ERROR
("devid is bighanvailabeingbuf count");

268  
NULL
;

271  &
gs_rgbuf
[
devid
];

272 
	}
}

274 
ut8_t
 
	$gs_rgbuf_li¡_
(
ut8_t
 
couÁ
,ut8_
size
,ut8_
deviû
)

276 
ut8_t
 
dex
 = 0;

277 
t8_t
 
r_code
 = 0;

279 
g_gs_rgbuf_avaabe_couÁ
 = 0;

280 
dex
 = 0 ; index < 
deviû
; index++)

282 
r_code
 = 
	`gs_rgbuf_
(&
gs_rgbuf
[
dex
],
couÁ
,
size
);

283 if(
r_code
 != 0)

285 
	`NRF_LOG_INFO
("g rgbuà»que¡ %d bufàrÜ!",
dex
);

286  
g_gs_rgbuf_avaabe_couÁ
;

289 
g_gs_rgbuf_avaabe_couÁ
++;

293  
g_gs_rgbuf_avaabe_couÁ
;

294 
	}
}

296 
ut8_t
 
	$gs_rgbuf_g_avaabe_couÁ
()

298  
g_gs_rgbuf_avaabe_couÁ
;

299 
	}
}

301 
	$gs_rgbuf_li¡_un
()

303 
ut8_t
 
dex
 = 0;

305 
dex
 = 0; index < 
g_gs_rgbuf_avaabe_couÁ
; index++)

307 
gs_rgbuf
 *
rgbuf
 = &gs_rgbuf[
dex
];

308 
	`gs_rgbuf_ex
(
rgbuf
);

310 
	}
}

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_ringbuf.h

7 #iâdeà
__gs_rgbuf_H__


8 
	#__gs_rgbuf_H__


	)

10 
	#RF_GZLL_PAYLOAD_SIZE
 32

	)

11 
	#PAYLOAD_COUNT_PERPACKET
 7

	)

12 
	#GS_DEFAULT_RXRINGBUF_COUNT
 3

	)

13 
	#GS_DEFAULT_TXRINGBUF_COUNT
 10

	)

14 
	#GS_DEFAULT_DEVICE_NUMBER
 8

	)

16 
	#GS_SPI_HEAD_START
 0xab

	)

17 
	#GS_SPI_HEAD_LENGTH
 3

19 
	#GS_DEFAULT_SAMPLE_UNIT
 32

	)

20 
	#GS_DEFAULT_SAMPLE_COUNT
 7

	)

23 
	ergbuf_¡©us
 {

24 
	mBUF_FREE
 = 0,

25 
	mBUF_IN_RF
 = 1,

26 
	mBUF_OUT_RF
 = 2,

27 
	mBUF_IN_SPI
 = 4,

30 
	s¥is_·ck
{

31 
ut8_t
 *
	maddr
;

32 
ut8_t
 *
	m¡¬t
;

33 
ut8_t
 *
	mty³
;

34 
ut8_t
 *
	mdevid
;

35 
ut8_t
 
	mdex
;

36 
ut8_t
 
	m¡©us
;

37 
ut8_t
 
	mavaed
;

38 
ut8_t
 
	m»md
;

41 
	sgs_rgbuf
{

42 
ut8_t
 *
	mbuff
;

43 
ut8_t
 
	mtx_dex
;

44 
ut8_t
 
	mrx_dex
;

45 
ut8_t
 
	m¥is_·ck_couÁ
;

46 
ut8_t
 
	m¥is_·ck_size
;

47 
¥is_·ck
 *
	mcu¼t
;

48 
¥is_·ck
 *
	m·ckli¡
;

51 
	sgs_¿mbuf
 {

52 
ut8_t
 
	mcouÁ
;

55 
gs_rgbuf
 *
gs_rgbuf_li¡
;

58 
¥is_·ck
 *
gs_rgbuf_g_rx·ck
(
gs_rgbuf
 *
rgbuf
);

59 
¥is_·ck
 *
gs_rgbuf_g_tx·ck
(
gs_rgbuf
 *
rgbuf
);

60 
ut8_t
 *
rf_»que¡_·ylßd_addr
(
gs_rgbuf
 *
rgbuf
,ut8_
size
);

61 
¥is_·ck_£t_¡©us
(
¥is_·ck
 *
·ck
,
rgbuf_¡©us
 
¡©us
);

62 
¥is_·ck_£t_hd
(
¥is_·ck
 *
·ck
,
ut8_t
 
ty³
,ut8_
devid
);

63 
t8_t
 
gs_rgbuf_g_txdex
(
gs_rgbuf
 *
rgbuf
);

64 
t8_t
 
gs_rgbuf_g_rxdex
(
gs_rgbuf
 *
rgbuf
);

65 
ut8_t
 
gs_rgbuf_g_·ck_size
(
gs_rgbuf
 *
rgbuf
);

66 
ut8_t
 
gs_rgbuf_g_·ck_avaed
(
gs_rgbuf
 *
rgbuf
);

67 
ut8_t
 
gs_rgbuf_g_·ck_couÁ
(
gs_rgbuf
 *
rgbuf
);

68 
ut8_t
 
gs_rgbuf_g_avaabe_couÁ
();

69 
ut8_t
 
gs_rgbuf_li¡_
(ut8_
couÁ
,ut8_
size
,ut8_
deviû
);

70 
gs_rgbuf
 *
gs_rgbuf_g_by_devid
(
ut8_t
 
devid
);

71 
gs_rgbuf_li¡_un
();

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_spis.c

7 
	~"Äf_gpio.h
"

8 
	~"Äf_soc.h
"

9 
	~"Äf_log.h
"

10 
	~"Äf_day.h
"

11 
	~"gs_´x.h
"

12 
	~"gs_tim.h
"

14 
gs_¥is
 *
	gg_sdev
 = 
NULL
;

15 
¥i_¦ave_evt_hªdË
(
Äf_drv_¥is_evt_t
 
evt
);

16 
	$gs_¥is_£nd_§m¶e
(*
cÚx
)

18 
ut32_t
 
r_code
;

19 
ut8_t
 
Ãxt_tx_devid
= 0;

20 
¥is_·ck
 *
·ck
 = 
NULL
;

21 
gs_rgbuf
 *
rgbuf
 = 
NULL
;

22 
gs_¥is
 *
sdev
 = (gs_¥is*)
cÚx
;

23 
ut8_t
 
avaabe_devút
 = 
	`gs_rgbuf_g_avaabe_couÁ
();

25  
Ãxt_tx_devid
 < 
avaabe_devút
 )

28 ià(!
sdev
->
xãr_dÚe
 && sdev->
¥is_lock
) {

34 
rgbuf
 = 
	`gs_rgbuf_g_by_devid
(
Ãxt_tx_devid
);

35 
·ck
 = 
	`gs_rgbuf_g_tx·ck
(
rgbuf
);

36 ià(
·ck
) {

37 
sdev
->
tx_±r
 = 
·ck
->
addr
;

38 
sdev
->
rx_±r
 = sdev->
rx_buf
;

39 
sdev
->
Ëngth
 = 
·ck
->
avaed
 + 1;

41 
	`¥is_·ck_£t_hd
(
·ck
,0xab,
Ãxt_tx_devid
);

44 
r_code
 = 
	`Äf_drv_¥is_bufãrs_£t
(&
sdev
->
¥is
,sdev->
tx_±r
,

45 
sdev
->
Ëngth
,sdev->
rx_±r
,sdev->length);

46 ià(
r_code
 =ð
NRF_SUCCESS
) {

47 
sdev
->
xãr_dÚe
 = 
çl£
;

48 
sdev
->
¥is_lock
 = 
ue
;

49 
sdev
->
tx·ck
 = 
·ck
;

63 
Ãxt_tx_devid
++;

68 if(++
Ãxt_tx_devid
 >ð
avaabe_devút
)

70 
Ãxt_tx_devid
 = 0;

72 
	}
}

74 
	$gs_£t_¥is_id
(
gs_¥is
 *
sdev
)

76 
Äf_drv_¥is_evt_t
 
evt
 = {

77 .
tx_amouÁ
 = 0,

78 .
rx_amouÁ
 = 0,

79 .
evt_ty³
 = 
NRF_DRV_SPIS_EVT_TYPE_MAX
,

82 
sdev
->
¡©e
 = 
GS_SPIS_STATE_SETUP
;

83 
	`¥i_¦ave_evt_hªdË
(
evt
);

84 
	}
}

88 
	$¥is_·r£_cmdle
(
gs_¥is_cmdle
 *
cmdle
)

90 
boÞ
 
gs_rf_¡¬t
 = 
çl£
;

91 
cmdle
->
cmd
)

93 
DEVICE_CMD_START_RF
:

94 ià(
g_sdev
->
¡©e
 !ð
DEVICE_CMD_START_RF
) {

95 
gs_rf_¡¬t
 = 
ue
;

96 
g_sdev
->
cmd
 = 
DEVICE_CMD_START_RF
;

97 
g_sdev
->
¡©e
 = 
GS_SPIS_STATE_AUDIO
;

99 
	`gs_rf_abË
();

102 
	`gs_£t_¥is_id
(
g_sdev
);

107 
DEVICE_CMD_STOP_RF
:

108 ià(
g_sdev
->
cmd
 !ð
DEVICE_CMD_STOP_RF
) {

109 
gs_rf_¡¬t
 = 
çl£
;

110 
g_sdev
->
cmd
 = 
DEVICE_CMD_STOP_RF
;

114 
	`NRF_LOG_INFO
("¡Ýàaá %dicks",
cmdle
->
day
);

116 
	`gs_rf_di§bË
();

120 
	`gs_£t_¥is_id
(
g_sdev
);

124 
	`gs_£t_¥is_id
(
g_sdev
);

129 
DEVICE_CMD_RF_DATA
:

131 ià(
gs_rf_¡¬t
) {

132 
g_sdev
->
¡©e
 = 
GS_SPIS_STATE_AUDIO
;

136 
	`gs_£t_¥is_id
(
g_sdev
);

141 
DEVICE_CMD_START_I2S
:

142 
	`gs_£t_¥is_id
(
g_sdev
);

145 
DEVICE_CMD_STOP_I2S
:

146 
	`gs_£t_¥is_id
(
g_sdev
);

149 
DEVICE_CMD_I2S_DATA
:

150 
	`gs_£t_¥is_id
(
g_sdev
);

154 
	`gs_£t_¥is_id
(
g_sdev
);

156 
	}
}

158 
	$¥i_¦ave_evt_hªdË
(
Äf_drv_¥is_evt_t
 
evt
)

160 
ut32_t
 
r_code
 = 
NRF_SUCCESS
;

162 
g_sdev
->
¡©e
)

164 
GS_SPIS_STATE_SETUP
 :

165 
g_sdev
->
tx_±r
 = g_sdev->
tx_buf
;

166 
g_sdev
->
rx_±r
 = g_sdev->
rx_buf
;

167 
r_code
 = 
	`Äf_drv_¥is_bufãrs_£t
(&
g_sdev
->
¥is
,g_sdev->
tx_±r
,

168 
g_sdev
->
Ëngth
,g_sdev->
rx_±r
,g_sdev->length);

169 ià(
r_code
 =ð
NRF_SUCCESS
) {

170 
g_sdev
->
¡©e
 = 
GS_SPIS_STATE_RXCMD
;

176 
GS_SPIS_STATE_RXCMD
 :

177 ià(
evt
.
evt_ty³
 =ð
NRF_DRV_SPIS_BUFFERS_SET_DONE
) {

179 
g_sdev
->
¥is
.
p_»g
->
TASKS_RELEASE
 = 1;

182 ià(
evt
.
evt_ty³
 =ð
NRF_DRV_SPIS_XFER_DONE
) {

186 
	`NRF_LOG_INFO
("CMD Reciv%d By d©a!",
evt
.
rx_amouÁ
);

187 
	`gs_£t_¥is_id
(
g_sdev
);

193 
GS_SPIS_STATE_AUDIO
 :

194 ià(
evt
.
evt_ty³
 =ð
NRF_DRV_SPIS_BUFFERS_SET_DONE
) {

196 
g_sdev
->
¥is
.
p_»g
->
TASKS_RELEASE
 = 1;

198 
	`gs_£t_»ady_le
();

201 ià(
evt
.
evt_ty³
 =ð
NRF_DRV_SPIS_XFER_DONE
) {

202 
g_sdev
->
xãr_dÚe
 = 
ue
;

203 
	`gs_þr_»ady_le
();

210 
	`NRF_LOG_ERROR
("UNKNOWN SPIS STATE");

211 
r_code
 = 
NRF_ERROR_INVALID_STATE
;

215 ià(
g_sdev
->
¥is_lock
) {

216 
¥is_·ck
 *
·ck
 = 
g_sdev
->
tx·ck
;

217 
	`¥is_·ck_£t_¡©us
(
·ck
,
BUF_FREE
);

218 
g_sdev
->
¥is_lock
 = 
çl£
;

221 
	`APP_ERROR_CHECK
(
r_code
);

222 
	}
}

224 
	$gs_¥is_¡Ý_audio
(
ut8_t
 
¦p
)

226 
gs_¥is_cmdle
 
¥is_cmd
 = {

227 .
cmd
 = 
DEVICE_CMD_STOP_RF
,

228 .
day
 = 
¦p
,

231 
g_sdev
->
xãr_dÚe
 = 
ue
;

232 
g_sdev
->
¥is_lock
 = 
çl£
;

233 
	`gs_þr_»ady_le
();

234 
	`¥is_·r£_cmdle
(&
¥is_cmd
);

235 
	}
}

237 
	$gs_¥is_¡¬t_audio
()

239 
gs_¥is_cmdle
 
¥is_cmd
 = {

240 .
cmd
 = 
DEVICE_CMD_START_RF
,

243 
	`¥is_·r£_cmdle
(&
¥is_cmd
);

244 
	}
}

246 
ut32_t
 
	$gs_¥is_
(
gs_¥is
 *
sdev
)

248 
ut32_t
 
r_code
;

249 
Äf_drv_¥is_cÚfig_t
 
gs_¥is_cÚfig
;

251 
gs_¥is_cÚfig
.
miso_p
 = 
sdev
->
cÚfig
.
miso
;

252 
gs_¥is_cÚfig
.
mosi_p
 = 
sdev
->
cÚfig
.
mosi
;

253 
gs_¥is_cÚfig
.
sck_p
 = 
sdev
->
cÚfig
.
sck
;

254 
gs_¥is_cÚfig
.
c¢_p
 = 
sdev
->
cÚfig
.
c¢
;

255 
gs_¥is_cÚfig
.
mode
 = 
sdev
->
cÚfig
.mode;

256 
gs_¥is_cÚfig
.
def
 = 
sdev
->
cÚfig
.def;

257 
gs_¥is_cÚfig
.
Üc
 = 
sdev
->
cÚfig
.orc;

258 
gs_¥is_cÚfig
.
q_´iÜy
 = 
sdev
->
cÚfig
.
´iÜy
;

259 
gs_¥is_cÚfig
.
c¢_puÎup
 = 
NRF_GPIO_PIN_PULLUP
;

260 
gs_¥is_cÚfig
.
miso_drive
 = 
NRF_DRV_SPIS_DEFAULT_MISO_DRIVE
;

261 
gs_¥is_cÚfig
.
b_Üd
 = 
NRF_DRV_SPIS_BIT_ORDER_MSB_FIRST
;

264 
	`Äf_gpio_cfg_put
(
gs_¥is_cÚfig
.
c¢_p
, 
NRF_GPIO_PIN_PULLUP
);

265 
r_code
 = 
	`Äf_drv_¥is_
(&
sdev
->
¥is
, &
gs_¥is_cÚfig
, 
¥i_¦ave_evt_hªdË
);

266 
	`APP_ERROR_CHECK
(
r_code
);

268 ià(
r_code
 !ð
NRF_SUCCESS
){

269  
r_code
;

272 
g_sdev
 = 
sdev
;

273 
	`gs_£t_¥is_id
(
sdev
);

274 
sdev
->
xãr_ÿÎback
 = 
gs_¥is_£nd_§m¶e
;

275 
	`NRF_LOG_INFO
("GrandStream SPIS INIT!");

280 
	}
}

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_spis.h

7 #iâdeà
__GS_SPIS_H__


8 
	#__GS_SPIS_H__


	)

9 
	~"Äf_drv_¥is.h
"

11 
	eÄf_ty³
 {

12 
	mNRF_GZLL
 = 1,

13 
	mNRF_ESB


16 
	eGS_DEVICE_CMD_STATE
 {

17 
	mDEVICE_CMD_UNKNOWN
 = -1,

18 
	mDEVICE_CMD_START_RF
 = 0,

19 
	mDEVICE_CMD_STOP_RF
 = 1,

20 
	mDEVICE_CMD_START_I2S
 = 2,

21 
	mDEVICE_CMD_STOP_I2S
 = 3,

22 
	mDEVICE_CMD_RF_DATA
 = 4,

23 
	mDEVICE_CMD_I2S_DATA
 = 5,

26 
	eGS_SPIS_STATE
 {

27 
	mGS_SPIS_STATE_IDEL
 = -1,

28 
	mGS_SPIS_STATE_SETUP
 = (1 << 0),

29 
	mGS_SPIS_STATE_RXCMD
 = (1 << 1),

30 
	mGS_SPIS_STATE_AUDIO
 = (1 << 2),

33 
	#GS_SPIS_INSTANCE
 1

	)

34 
	#GS_SPIS_MAX_LENGTH
 256

	)

35 
	#GS_SPIS_SCK_PIN
 15

	)

36 
	#GS_SPIS_MOSI_PIN
 17

	)

37 
	#GS_SPIS_MISO_PIN
 16

	)

38 
	#GS_SPIS_CSN_PIN
 19

	)

39 
	#GS_SPIS_DEFAULT_DEF_CHARACTER
 0x55

	)

40 
	#GS_SPIS_DEFAULT_ORC_CHARACTER
 0xAA

	)

41 
	#GS_SPIS_IRQ_PRIORITY_LEVEL
 2

	)

43 
	sgs_¥is_cmdle
 {

44 
ut8_t
 
	mhd
[2];

45 
ut8_t
 
	mcmd
;

46 
ut8_t
 
	mday
;

47 
ut8_t
 
	m·ylßd_Ën
;

48 
ut8_t
 
	m·ylßd_d©a
[128];

51 
	s¥is_cÚfig
 {

52 
ut8_t
 
	mmiso
;

53 
ut8_t
 
	mmosi
;

54 
ut8_t
 
	msck
;

55 
ut8_t
 
	mc¢
;

56 
ut8_t
 
	mmode
;

57 
ut8_t
 
	mdef
;

58 
ut8_t
 
	mÜc
;

59 
ut8_t
 
	m´iÜy
;

62 
	sgs_¥is
 {

63 
ut8_t
 
	m¡©e
;

64 
ut8_t
 
	mcmd
;

66 
boÞ
 
	mxãr_dÚe
;

67 
boÞ
 
	m¥is_lock
;

69 
ut8_t
 *
	mrx_±r
;

70 
ut8_t
 *
	mtx_±r
;

71 
ut8_t
 
	mËngth
;

72 
ut8_t
 
	mtx_buf
[
GS_SPIS_MAX_LENGTH
];

73 
ut8_t
 
	mrx_buf
[
GS_SPIS_MAX_LENGTH
];

75 
Äf_drv_¥is_t
 
	m¥is
;

76 
¥is_cÚfig
 
	mcÚfig
;

77 
¥is_·ck
 *
	mtx·ck
;

79 (*
	mxãr_ÿÎback
)(*
	mcÚx
);

82 
ut32_t
 
gs_¥is_
(
gs_¥is
 *
sdev
);

83 
gs_¥is_£nd_·ck
();

84 
gs_¥is_¡¬t_audio
();

85 
gs_¥is_¡Ý_audio
(
ut8_t
 
¦p
);

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_timer.c

7 
	~"gs_´x.h
"

8 
	~"Äf_log.h
"

10 vÞ©
ut32_t
 
	grf_»cived_bys_³r_£c
 = 0;

11 vÞ©
ut32_t
 
	ggs_rf_drÝ_·cks_tÙ®
 = 0;

12 vÞ©
ut32_t
 
	gpe_»cived_bys_³r_£c
[8] = {0};

15 
gs_tim
 *
	gg_tim
 = 
NULL
;

16 
gs_´x
 *
	$g_gs_´x
()

18  &
g_´x
;

19 
	}
}

21 
	$gs_rf_tim_hªdËr
(
Äf_tim_evt_t
 
evt_ty³
,*
cÚxt
)

23 
ut32_t
 
rf_¡©i¡ics_couÁ
 = 0;

24 
ut64_t
 
rf_»cived_tÙ®_bys
 = 0;

25 
gs_tim
 *
tim
 = 
g_tim
;

26 
gs_´x
 * 
´x
 = 
	`g_gs_´x
();

27 
devno
 = 0;

28 
evt_ty³
)

30 
NRF_TIMER_EVENT_COMPARE0
:

33 
NRF_TIMER_EVENT_COMPARE1
:

35 ià(
tim
->
ticks
 =ðtim->
ticks_couÁ
) {

36 
rf_¡©i¡ics_couÁ
++;

37 
rf_»cived_tÙ®_bys
 +ð
rf_»cived_bys_³r_£c
;

39 
	`NRF_LOG_INFO
("RX SPEED Avg=%dB/s RFDrop %dipe0 %dipe1 %dipe2 %dipe3 %d", \

40 
rf_»cived_tÙ®_bys
 / 
rf_¡©i¡ics_couÁ
 / 10, \

41 
gs_rf_drÝ_·cks_tÙ®
, \

42 
pe_»cived_bys_³r_£c
[0], \

43 
pe_»cived_bys_³r_£c
[1], \

44 
pe_»cived_bys_³r_£c
[2], \

45 
pe_»cived_bys_³r_£c
[3]);

47 
pe_»cived_bys_³r_£c
[0] = 0;

48 
pe_»cived_bys_³r_£c
[1] = 0;

49 
pe_»cived_bys_³r_£c
[2] = 0;

50 
pe_»cived_bys_³r_£c
[3] = 0;

51 
rf_»cived_bys_³r_£c
 = 0;

53 
tim
->
ticks
 = 0;

56 
tim
->
ticks
++;

68 
devno
 = 0; devnØ< 
´x
->
devút
; devno++) {

69 
deviû_fo
 *
devfo
 = 
´x
->
devli¡
 + 
devno
;

70 ià(
devfo
->
h¹bt
 )

71 
devfo
->
h¹bt
--;

73 ià(
tim
->
ticks
 < 1 *im->
ticks_couÁ
 / 3) {

74 
devfo
->
sync
 = 
ue
;

76 ià((
tim
->
ticks
 > 1 *im->
ticks_couÁ
 / 3) &&

77 (
tim
->
ticks
 < 2 *im->
ticks_couÁ
 / 3)) {

78 ià(
devfo
->
sync
) {

79 ià(
devfo
->
h¹bt
) {

80 
´x
->
twis
.
»gli¡
->
cÚÃù
 |ð(1 << 
devno
);

81 ià(!
devfo
->
cÚÃù
) {

82 
devfo
->
cÚÃù
 = 1;

83 
	`NRF_LOG_INFO
("<<===deviû %d cÚÃù\n",
devno
);

89 
´x
->
cmdv®
 &ð(0 << 
devno
);

90 
´x
->
twis
.
»gli¡
->
cÚÃù
 &ð~(1 << 
devno
);

92 ià(
devfo
->
cÚÃù
) {

93 
devfo
->
cÚÃù
 = 0;

94 
	`NRF_LOG_INFO
("===>>deviû %d discÚÃù\n",
devno
);

97 
´x
->
twis
.
»gli¡
->
b©¡©e
[
devno
] = 
devfo
->
ch¬ge
;

98 
´x
->
twis
.
»gli¡
->
b©fo
[
devno
] =

99 (
devfo
->
b©ry_h
 << 8è| devfo->
b©ry_l
;

100 
devfo
->
sync
 = 
çl£
;

110 
	}
}

112 
	$gs_£t_day_sk
(
sk_ÿÎback
 
ÿÎback
,*
cÚx
,
ut32_t
 
day
)

114 
gs_tim
 *
tim
 = 
g_tim
;

115 
ut32_t
 
sk_day
 = 0;

116 
sk_day
 = (
tim
->
ticks
 + 
day
è%im->
ticks_couÁ
;

117 ià(!
tim
->
ÿÎback
) {

118 
tim
->
sk_day
 =ask_delay;

119 
tim
->
ÿÎback
 = callback;

120 
tim
->
cÚx
 = contex;

125 
	}
}

127 
	$gs_tim_abË
()

129 
gs_tim
 *
tim
 = 
g_tim
;

131 ià(!
tim
->
abË
) {

132 
tim
->
abË
 = 
ue
;

133 
	`Äf_drv_tim_abË
(&
tim
->
dev
);

138 
	}
}

140 
	$gs_tim_di§bË
()

142 
gs_tim
 *
tim
 = 
g_tim
;

144 ià(
tim
->
abË
) {

145 
tim
->
abË
 = 
çl£
;

146 
	`Äf_drv_tim_di§bË
(&
tim
->
dev
);

150 
	}
}

152 
	$gs_rf_tim_
(
gs_tim
 *
tim
)

154 
ut32_t
 
time_ticks
;

156 
Äf_drv_tim_cÚfig_t
 
tim_cfg
 = 
NRF_DRV_TIMER_DEFAULT_CONFIG
;

157 
	`Äf_drv_tim_
(&
tim
->
dev
,&
tim_cfg
,
gs_rf_tim_hªdËr
);

160 
time_ticks
 = 
	`Äf_drv_tim_ms_to_ticks
(&
tim
->
dev
,tim->
³riod
);

161 
	`Äf_drv_tim_exnded_com·»
(&
tim
->
dev
,
NRF_TIMER_CC_CHANNEL1
,

162 
time_ticks
,
NRF_TIMER_SHORT_COMPARE1_CLEAR_MASK
,
ue
);

164 
	`gs_tim_abË
();

165 
	}
}

167 
	$gs_­p_tim_
(
gs_tim
 *
tim
)

169 
g_tim
 = 
tim
;

170 
	`gs_rf_tim_
(
tim
);

171 
	}
}

174 
	$gs_­p_tim_un
(
gs_tim
 *
tim
)

176 
g_tim
 = 
NULL
;

177 
	`Äf_drv_tim_un
(&
tim
->
dev
);

178 
	}
}

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_timer.h

8 #iâdeà
__GS_TIMER_H__


9 
	#__GS_TIMER_H__


	)

11 
	~"Äf.h
"

12 
	~"sdk_commÚ.h
"

13 
	~"Äf_tim.h
"

14 
	~"Äf_drv_tim.h
"

16 
	#SPIS_TX_PERIOD
 1

	)

17 
	#RF_STATISTICS_PERIOD
 1000

	)

19 
	#GS_RF_TIMER_INSTANCE
 1

	)

20 
	#GS_SPIS_TIMER_INSTANCE
 2

	)

22 vÞ©
ut32_t
 
gs_rf_drÝ_·cks_tÙ®
;

23 vÞ©
ut32_t
 
rf_»cived_bys_³r_£c
;

24 vÞ©
ut32_t
 
pe_»cived_bys_³r_£c
[8];

25 (*
	tsk_ÿÎback
)(*
	tcÚx
);

27 
	sgs_tim
 {

28 
boÞ
 
abË
;

29 
ut32_t
 
³riod
;

30 
ut32_t
 
ticks
;

31 
ut32_t
 
ticks_couÁ
;

32 
ut32_t
 
sk_day
;

33 
Äf_drv_tim_t
 
dev
;

34 *
cÚx
;

35 (*
ÿÎback
)(*
cÚx
);

38 
	`gs_tim_di§bË
();

39 
	`gs_tim_abË
();

40 
	`gs_£t_day_sk
(
sk_ÿÎback
 
ÿÎback
,*
cÚx
,
ut32_t
 
day
);

41 
	`gs_­p_tim_
(
gs_tim
 *
tim
);

42 
	`gs_­p_tim_un
(
gs_tim
 *
tim
);

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_twis.c

8 
	~"gs_´x.h
"

9 
	~"Äf_log.h
"

11 
gs_twis
 *
	gg_twis
;

12 
gs_twis_»g
 
	gg_£nsÜ_»g
;

13 
	$gs_twis_deviû_»£t
(
gs_twis
 *
dev
)

15 
gs_twis_»g
 *
»g
 = 
dev
->
»gba£
;

19 
»g
->
sy¡em_ù¾
 = 0x00;

22 
dev
->
¡©us
 = 
NRF_SYSTEM_STATUS_OFF
;

23 
	}
}

26 
	$gs_twis_¡¬t_sy¡em
()

28 
gs_twis_»g
 *
»g
 = 
g_twis
->
»gba£
;

29 
gs_´x
 *
´x
 = &
g_´x
;

30 
ut8_t
 
rgbuf_couÁ
 = 
»g
->rgbuf_couÁ? :
GS_DEFAULT_TXRINGBUF_COUNT
;

31 
ut8_t
 
§m¶e_un
 = 
»g
->§m¶e_un? :
GS_DEFAULT_SAMPLE_UNIT
;

32 
ut8_t
 
§m¶e_couÁ
 = 
»g
->§m¶e_couÁ? :
GS_DEFAULT_SAMPLE_COUNT
;

33 
ut8_t
 
deviû_couÁ
 = 
»g
->deviû_couÁ ? : 
GS_DEFAULT_DEVICE_NUMBER
;

34 
ut8_t
 
rgbuf_size
 = 0;

35 
	`NRF_LOG_INFO
(" funø% %d %d %d %d %d!",
__func__
,\

36 
rgbuf_couÁ
,
§m¶e_un
,
§m¶e_couÁ
,
deviû_couÁ
,
rgbuf_size
);

38 if(
rgbuf_couÁ
 > 50)

39 
»g
->
rgbuf_couÁ
 =ingbuf_count = 50;

41 ià(
§m¶e_un
 > 32)

42 
»g
->
§m¶e_un
 = sample_unit = 32;

44 ià(
§m¶e_couÁ
 > 7)

45 
»g
->
§m¶e_couÁ
 = sample_count = 7;

47 
rgbuf_size
 = 
§m¶e_un
 * 
§m¶e_couÁ
 + 5;

48 
	`NRF_LOG_INFO
("initingbuf size %d (sample %d x %d)",\

49 
rgbuf_size
,
§m¶e_un
,
§m¶e_couÁ
);

52 
	`gs_rgbuf_li¡_
(
rgbuf_couÁ
,
rgbuf_size
,
deviû_couÁ
);

55 
	`gs_¥is_¡¬t_audio
();

58 
g_twis
->
»gli¡
->
æash_
 = 0x01;

59 
	`memýy
(
g_twis
->
»gli¡
->
vsiÚ
,
´x
->version,6);

60 
	}
}

62 
	$deviû_discÚÃù
(
ut8_t
 
devid
)

64 
gs_´x
 *
´x
 = &
g_´x
;

65 
´x
->
cmd¬g
 = 
NRFCMD_DISCONNECT
;

66 
´x
->
cmdv®
 = 
devid
 &rx->
twis
.
»gli¡
->
cÚÃù
;

67 
	`NRF_LOG_INFO
("discÚÃù deviû bm­ %x=>%x",
devid
,
´x
->
cmdv®
);

68 
	}
}

70 
	$gs_sy¡em_a£
()

72 
gs_´x
 *
´x
 = &
g_´x
;

73 
	`f¡Üage_a£
(
´x
->
æash
.
æash_¡¬t
,1);

75 
	`NRF_LOG_INFO
("forcerase,factoryeset done!");

76 
	}
}

77 
	$gs_sy¡em_upd©e
()

79 
gs_´x
 *
´x
 = &
g_´x
;

80 
gs_twis_»g
 *
»g
 = 
g_twis
->
»gba£
;

84 
	`f¡Üage_a£
(
´x
->
æash
.
æash_¡¬t
,1);

85 
	`wa_fÜ_æash_»ady
();

86 
	`f¡Üage_wre
(
´x
->
æash
.
æash_¡¬t
,
»g
, 256);

87 
	`NRF_LOG_INFO
("updateeglist done");

88 
	}
}

90 
	$gs_twis_¡Ý_sy¡em
(
ut8_t
 
¦p
)

93 
	`mem£t
(
g_twis
->
»gli¡
,0x00,0x60);

96 
	`gs_¥is_¡Ý_audio
(
¦p
);

99 
	`gs_rgbuf_li¡_un
();

101 
	`NRF_LOG_INFO
("gs_twis_stop_system");

102 
	}
}

104 
	$gs_twis_wre_¡¬t
()

108 ()
	`Äf_drv_twis_rx_´¬e
(&
g_twis
->
twis
, g_twis->
rwbuf
,
TWIS_MAX_PAYLOAD_LENGTH
);

109 
	}
}

111 
	$gs_twis_wre_¡Ý
(
size_t
 
út
)

115 
g_twis
->
»g
 = g_twis->
rwbuf
[0];

119 ià(
út
 == 1) {

120 
g_twis
->
rw
 = 1;

121 
	`NRF_LOG_INFO
("´¬tØ»adegi¡ %x\n",
g_twis
->
»g
);

125 ià(
út
 >= 2) {

126 
tmp
 = 0;

127 
gs_twis_»g
 *
£nsÜ_»g
 = 
g_twis
->
»gba£
;

128 ià(
út
 + 
g_twis
->
»g
 > (
gs_twis_»g
)){

129 
	`NRF_LOG_INFO
("cnt +eg bighaneglist count!\n")

133 
tmp
 = 1;m°< 
út
;mp++) {

134 
v®
 = 
g_twis
->
rwbuf
[
tmp
];

135 *
»gba£
 = (*)
g_twis
->regbase;

136 
»g
 = 
g_twis
->»g + 
tmp
 -1;

137 *(
»gba£
 + 
»g
èð
v®
;

138 
	`NRF_LOG_INFO
("wr%xØegi¡ %x",
v®
,
»g
);

142 ià(
£nsÜ_»g
->
sy¡em_ù¾
 & 
NRF_SYSTEM_UPDATE
) {

144 
	`gs_sy¡em_upd©e
();

146 ià(!(
£nsÜ_»g
->
sy¡em_ù¾
 & 
NRF_SYSTEM_START
)) {

147 
	`gs_twis_¡Ý_sy¡em
(0);

148 
g_twis
->
¡©us
 = 
NRF_SYSTEM_STATUS_OFF
;

149 
	`gs_twis_¡¬t_sy¡em
();

150 
g_twis
->
¡©us
 = 
NRF_SYSTEM_STATUS_ON
;

152 
£nsÜ_»g
->
sy¡em_ù¾
 &ð~
NRF_SYSTEM_UPDATE
;

155 ià(
£nsÜ_»g
->
sy¡em_ù¾
 & 
NRF_SYSTEM_ERASE
) {

156 
	`gs_sy¡em_a£
();

157 
£nsÜ_»g
->
sy¡em_ù¾
 &ð~
NRF_SYSTEM_ERASE
;

160 ià(
£nsÜ_»g
->
sy¡em_ù¾
 & 
NRF_SYSTEM_START
) {

161 ià(
g_twis
->
¡©us
 =ð
NRF_SYSTEM_STATUS_OFF
) {

162 
	`gs_twis_¡¬t_sy¡em
();

163 
g_twis
->
¡©us
 = 
NRF_SYSTEM_STATUS_ON
;

167 ià(!(
£nsÜ_»g
->
sy¡em_ù¾
 & 
NRF_SYSTEM_START
)) {

168 ià(
g_twis
->
¡©us
 =ð
NRF_SYSTEM_STATUS_ON
) {

169 
	`gs_twis_¡Ý_sy¡em
(10);

170 
g_twis
->
¡©us
 = 
NRF_SYSTEM_STATUS_OFF
;

174 ià(
£nsÜ_»g
->
discÚÃù
) {

175 
	`deviû_discÚÃù
(
£nsÜ_»g
->
discÚÃù
);

176 
£nsÜ_»g
->
discÚÃù
 = 0x00;

179 
	}
}

181 
	$gs_twis_»ad_¡¬t
()

183 * 
»ad_»g
 = 
NULL
;

184 
»ad_dummy
[6];

185 
»md
,
Ëngth
 = 128;

186 
	`NRF_LOG_INFO
(" funø% !",
__func__
);

188 
»md
 = (
gs_twis_»g
è- 
g_twis
->
»g
;

189 ià(
»md
 >= 128)

190 
Ëngth
 = 128;

192 
Ëngth
 = 
»md
;

195 ià(
g_twis
->
rw
) {

196 
»ad_»g
 = (*)
g_twis
->
»gba£
 + g_twis->
»g
;

197 (è
	`Äf_drv_twis_tx_´¬e
(&
g_twis
->
twis
, 
»ad_»g
, 
Ëngth
);

201 (è
	`Äf_drv_twis_tx_´¬e
(&
g_twis
->
twis
, 
»ad_dummy
, 1);

203 
	}
}

205 
	$gs_twis_»ad_¡Ý
(
size_t
 
út
)

207 
g_twis
->
rw
 = 0;

208 
g_twis
->
»g
 = -1;

210 
	`NRF_LOG_INFO
(" funø% !",
__func__
);

211 
	}
}

213 
	$gs_twis_evt_hªdËr
(
Äf_drv_twis_evt_t
 cÚ¡ * cÚ¡ 
p_evt
)

215 
p_evt
->
ty³
)

217 
TWIS_EVT_READ_REQ
:

218 ià(
p_evt
->
d©a
.
buf_»q
) {

219 
	`gs_twis_»ad_¡¬t
();

224 
TWIS_EVT_READ_DONE
:

225 
	`gs_twis_»ad_¡Ý
(
p_evt
->
d©a
.
tx_amouÁ
);

228 
TWIS_EVT_WRITE_REQ
:

229 ià(
p_evt
->
d©a
.
buf_»q
) {

230 
	`gs_twis_wre_¡¬t
();

235 
TWIS_EVT_WRITE_DONE
:

236 
	`gs_twis_wre_¡Ý
(
p_evt
->
d©a
.
rx_amouÁ
);

239 
TWIS_EVT_READ_ERROR
:

240 
TWIS_EVT_WRITE_ERROR
:

241 
TWIS_EVT_GENERAL_ERROR
:

242 
	`NRF_LOG_INFO
("gswisventrror!\n");

243 
g_twis
->
r
 = 
ue
;

249 
	}
}

251 
ut32_t
 
	$gs_twis_
(
gs_twis
 *
tdev
)

253 
ut32_t
 
»t
 = -1;

254 cÚ¡ 
Äf_drv_twis_cÚfig_t
 
gs_twis_cÚfig
 =

256 .
addr
 = {
tdev
->
cÚfig
.addr,0},

257 .
sþ
 = 
tdev
->
cÚfig
.scl,

258 .
sda
 = 
tdev
->
cÚfig
.sda,

259 .
¼u±_´iÜy
 = 
tdev
->
cÚfig
.
´iÜy
,

260 .
sþ_puÎ
 = 
NRF_GPIO_PIN_PULLUP
,

261 .
sda_puÎ
 = 
NRF_GPIO_PIN_PULLUP
,

264 
»t
 = 
	`Äf_drv_twis_
(&
tdev
->
twis
,&
gs_twis_cÚfig
,
gs_twis_evt_hªdËr
);

265 ià(
»t
 !ð
NRF_SUCCESS
) {

266 
	`NRF_LOG_ERROR
("init gswisrror!");

267  
»t
;

270 
g_twis
 = 
tdev
;

271 
tdev
->
»gba£
 =dev->
»gli¡
;

272 
	`gs_twis_deviû_»£t
(
tdev
);

273 
	`Äf_drv_twis_abË
(&
tdev
->
twis
);

274 
	`NRF_LOG_INFO
("g twi  dÚe!egba£ = %x",
tdev
->
»gba£
);

275  
»t
;

276 
	}
}

	@/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_twis.h

8 #iâdeà
__GS_TWIS_H__


9 
	#__GS_TWIS_H__


	)

11 
	~"Äf_drv_twis.h
"

14 
	#GS_TWIS_INSTANCE
 0

	)

15 
	#GS_DEFAULT_TWIS_ADDR
 0x30

	)

16 
	#GS_DEFAULT_TWIS_SCL
 13

	)

17 
	#GS_DEFAULT_TWIS_SDA
 14

	)

18 
	#GS_DEFAULT_TWIS_PRIORITY
 6

	)

19 
	#TWIS_MAX_PAYLOAD_LENGTH
 128

	)

23 
	sgs_twis_»g
{

25 
	#NRF_DEVICE_PID
 0x00

	)

26 
	mdeviû_pid
;

27 
	#NRF_DEVICE_VID
 0x01

	)

28 
	mdeviû_vid
;

29 
	#NRF_DEVICE_SID
 0x02

	)

30 
	mdeviû_sid
;

31 
	#NRF_FLASH_INIT
 0x03

	)

32 
	mæash_
;

33 
	#NRF_DEVICE_CNNT
 0x04

	)

34 
	mcÚÃù
;

35 
	#NRF_DEVICE_DISC
 0x05

	)

36 
	mdiscÚÃù
;

37 
	#NRF_DEVICE_VER
 0x06

	)

38 
	mvsiÚ
[6];

39 
	m»sved
[4];

42 
	#NRF_SYSTEM_CTRL
 0x10

	)

43 
	#NRF_SYSTEM_START
 (1 << 0)

	)

44 
	#NRF_SYSTEM_UPDATE
 (1 << 1)

	)

45 
	#NRF_SYSTEM_ERASE
 (1 << 7)

	)

46 
	msy¡em_ù¾
;

47 
	#NRF_SYSTEM_STATE
 0x11

	)

48 
	msy¡em_¡©e
;

49 
	#NRF_SYSTEM_TYPE
 0x12

	)

50 
	msy¡em_§mty³
;

51 
	msy¡em_»sv
[13];

54 
	#NRF_DEVICE_BATINFO
 0x20

	)

55 
	mb©fo
[8];

56 
	#NRF_DEVICE_BATSTATE
 0x30

	)

57 
	mb©¡©e
[8];

58 
	mb©_rsv
[8];

61 
	#NRF_USER_DEFINE1
 0x40

	)

62 
	mm³d_rsv
[32];

64 
	#NRF_SAVED_REG_OFFSET
 0x60

	)

66 
	#NRF_HOST_RBCNT
 0x60

	)

67 
	mrgbuf_couÁ
;

68 
	#NRF_HOST_SPUNIT
 0x61

	)

69 
	m§m¶e_un
;

70 
	#NRF_HOST_SPCNT
 0x62

	)

71 
	m§m¶e_couÁ
;

72 
	#NRF_HOST_DEVCNT
 0x63

	)

73 
	mdeviû_couÁ
;

74 
	#NRF_HOST_ADDR0
 0x64

	)

75 
	mho¡_ba£_addr0
[4];

76 
	#NRF_HOST_ADDR1
 0x68

	)

77 
	mho¡_ba£_addr1
[4];

78 
	#NRF_HOST_PREFIX
 0x6c

	)

79 
	mho¡_addr_´efix
[8];

80 
	#NRF_HOST_RESV
 0x74

	)

81 
	mho¡_»sv
[12];

84 
	#NRF_HOST_CHNTAB
 0x80

	)

85 
	mho¡_chn_bË
[10];

86 
	#NRF_HOST_CHNSET
 0x8a

	)

87 
	mho¡_chn_£t
;

88 
	mho¡_chn_rsv
[5];

90 
	#NRF_HOST_PARINFO
 0x90

	)

91 
	m·rfo
[32];

93 
	#NRF_USER_DEFINE2
 0xb0

	)

94 
	m»sv
[80];

97 
	stwis_cÚfig
 {

98 
ut8_t
 
	maddr
;

99 
ut8_t
 
	msþ
;

100 
ut8_t
 
	msda
;

101 
ut8_t
 
	m´iÜy
;

104 
	esy¡em_¡©us
 {

105 
	mNRF_SYSTEM_STATUS_OFF
,

106 
	mNRF_SYSTEM_STATUS_ON
,

107 
	mNRF_SYSTEM_STATUS_UPDATE
,

110 
	sgs_twis
 {

111 
	mr
;

112 
	mrw
;

113 
	m»g
;

114 
	m¡©us
;

115 
Äf_drv_twis_t
 
	mtwis
;

116 
gs_twis_»g
 *
	m»gli¡
;

117 
twis_cÚfig
 
	mcÚfig
;

118 
gs_twis_»g
 *
	m»gba£
;

119 
	mrwbuf
[
TWIS_MAX_PAYLOAD_LENGTH
];

122 
ut32_t
 
gs_twis_
(
gs_twis
 *);

	@/usr/include/stdint.h

22 #iâdeà
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<ã©u»s.h
>

26 
	~<bs/wch¬.h
>

27 
	~<bs/wÜdsize.h
>

34 #iâdeà
__t8_t_defed


35 
	#__t8_t_defed


	)

36 sigÃd 
	tt8_t
;

37 
	tt16_t
;

38 
	tt32_t
;

39 #ià
__WORDSIZE
 == 64

40 
	tt64_t
;

42 
__exnsiÚ__


43 
	tt64_t
;

48 
	tut8_t
;

49 
	tut16_t
;

50 #iâdeà
__ut32_t_defed


51 
	tut32_t
;

52 
	#__ut32_t_defed


	)

54 #ià
__WORDSIZE
 == 64

55 
	tut64_t
;

57 
__exnsiÚ__


58 
	tut64_t
;

65 sigÃd 
	tt_Ëa¡8_t
;

66 
	tt_Ëa¡16_t
;

67 
	tt_Ëa¡32_t
;

68 #ià
__WORDSIZE
 == 64

69 
	tt_Ëa¡64_t
;

71 
__exnsiÚ__


72 
	tt_Ëa¡64_t
;

76 
	tut_Ëa¡8_t
;

77 
	tut_Ëa¡16_t
;

78 
	tut_Ëa¡32_t
;

79 #ià
__WORDSIZE
 == 64

80 
	tut_Ëa¡64_t
;

82 
__exnsiÚ__


83 
	tut_Ëa¡64_t
;

90 sigÃd 
	tt_ç¡8_t
;

91 #ià
__WORDSIZE
 == 64

92 
	tt_ç¡16_t
;

93 
	tt_ç¡32_t
;

94 
	tt_ç¡64_t
;

96 
	tt_ç¡16_t
;

97 
	tt_ç¡32_t
;

98 
__exnsiÚ__


99 
	tt_ç¡64_t
;

103 
	tut_ç¡8_t
;

104 #ià
__WORDSIZE
 == 64

105 
	tut_ç¡16_t
;

106 
	tut_ç¡32_t
;

107 
	tut_ç¡64_t
;

109 
	tut_ç¡16_t
;

110 
	tut_ç¡32_t
;

111 
__exnsiÚ__


112 
	tut_ç¡64_t
;

117 #ià
__WORDSIZE
 == 64

118 #iâdeà
___t_defed


119 
	t_t
;

120 
	#___t_defed


	)

122 
	tu_t
;

124 #iâdeà
___t_defed


125 
	t_t
;

126 
	#___t_defed


	)

128 
	tu_t
;

133 #ià
__WORDSIZE
 == 64

134 
	ttmax_t
;

135 
	tutmax_t
;

137 
__exnsiÚ__


138 
	ttmax_t
;

139 
__exnsiÚ__


140 
	tutmax_t
;

144 #ià
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
èø## 
L


	)

146 
	#__UINT64_C
(
c
èø## 
UL


	)

148 
	#__INT64_C
(
c
èø## 
LL


	)

149 
	#__UINT64_C
(
c
èø## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #ià
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #ià
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #ià
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #ià
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #ià
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #ià
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifdeà
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #iâdeà
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
è
	)
c

283 
	#INT16_C
(
c
è
	)
c

284 
	#INT32_C
(
c
è
	)
c

285 #ià
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
èø## 
L


	)

288 
	#INT64_C
(
c
èø## 
LL


	)

292 
	#UINT8_C
(
c
è
	)
c

293 
	#UINT16_C
(
c
è
	)
c

294 
	#UINT32_C
(
c
èø## 
U


	)

295 #ià
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
èø## 
UL


	)

298 
	#UINT64_C
(
c
èø## 
ULL


	)

302 #ià
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
èø## 
L


	)

304 
	#UINTMAX_C
(
c
èø## 
UL


	)

306 
	#INTMAX_C
(
c
èø## 
LL


	)

307 
	#UINTMAX_C
(
c
èø## 
ULL


	)

	@/usr/include/stdlib.h

22 #iâdef 
_STDLIB_H


24 
	~<ã©u»s.h
>

27 
	#__Ãed_size_t


	)

28 #iâdeà
__Ãed_m®loc_ªd_ÿÎoc


29 
	#__Ãed_wch¬_t


	)

30 
	#__Ãed_NULL


	)

32 
	~<¡ddef.h
>

34 
	g__BEGIN_DECLS


36 #iâdeà
__Ãed_m®loc_ªd_ÿÎoc


37 
	#_STDLIB_H
 1

	)

39 #ià(
defed
 
__USE_XOPEN
 || defed 
__USE_XOPEN2K8
è&& !defed 
_SYS_WAIT_H


41 
	~<bs/waæags.h
>

42 
	~<bs/wa¡©us.h
>

44 #ifdeà
__USE_MISC


49 #ià
defed
 
__GNUC__
 && !defed 
__ýlu¥lus


50 
	#__WAIT_INT
(
¡©us
) \

51 (
	`__exnsiÚ__
 (((uniÚ { 
	`__ty³of
(
¡©us
è
__
; 
__i
; }) \

52 { .
__
 = (
¡©us
è}).
__i
))

	)

54 
	#__WAIT_INT
(
¡©us
è(*(*è&(¡©us))

	)

62 #ià!
defed
 
__GNUC__
 || __GNUC__ < 2 || defed 
__ýlu¥lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
wa
 *
	m__u±r
;

70 *
	m__
;

71 } 
	t__WAIT_STATUS
 
	t__©ibu__
 ((
	t__ª¥¬t_uniÚ__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
¡©us
è(¡©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
¡©us
è
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (¡©us))

	)

85 
	#WTERMSIG
(
¡©us
è
	`__WTERMSIG
 (
	`__WAIT_INT
 (¡©us))

	)

86 
	#WSTOPSIG
(
¡©us
è
	`__WSTOPSIG
 (
	`__WAIT_INT
 (¡©us))

	)

87 
	#WIFEXITED
(
¡©us
è
	`__WIFEXITED
 (
	`__WAIT_INT
 (¡©us))

	)

88 
	#WIFSIGNALED
(
¡©us
è
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (¡©us))

	)

89 
	#WIFSTOPPED
(
¡©us
è
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (¡©us))

	)

90 #ifdeà
__WIFCONTINUED


91 
	#WIFCONTINUED
(
¡©us
è
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (¡©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquÙ
;

100 
	m»m
;

101 } 
	tdiv_t
;

104 #iâdeà
__ldiv_t_defed


107 
	mquÙ
;

108 
	m»m
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_defed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #ià
defed
 
__USE_ISOC99
 && !defed 
__Îdiv_t_defed


115 
__BEGIN_NAMESPACE_C99


117 
__exnsiÚ__
 struct

119 
	mquÙ
;

120 
	m»m
;

121 } 
	tÎdiv_t
;

122 
	#__Îdiv_t_defed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__ùy³_g_mb_cur_max
 ())

	)

139 
size_t
 
	$__ùy³_g_mb_cur_max
 (è
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (cÚ¡ *
__Å
)

145 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1)è
__wur
;

147 
	$©oi
 (cÚ¡ *
__Å
)

148 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1)è
__wur
;

150 
	$©Þ
 (cÚ¡ *
__Å
)

151 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1)è
__wur
;

152 
__END_NAMESPACE_STD


154 #ifdeà
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exnsiÚ__
 
	$©Þl
 (cÚ¡ *
__Å
)

158 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1)è
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$¡¹od
 (cÚ¡ *
__»¡riù
 
__Å
,

165 **
__»¡riù
 
__d±r
)

166 
__THROW
 
	`__nÚnuÎ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$¡¹of
 (cÚ¡ *
__»¡riù
 
__Å
,

173 **
__»¡riù
 
__d±r
è
__THROW
 
	`__nÚnuÎ
 ((1));

175 
	$¡¹Þd
 (cÚ¡ *
__»¡riù
 
__Å
,

176 **
__»¡riù
 
__d±r
)

177 
__THROW
 
	`__nÚnuÎ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$¡¹Þ
 (cÚ¡ *
__»¡riù
 
__Å
,

184 **
__»¡riù
 
__d±r
, 
__ba£
)

185 
__THROW
 
	`__nÚnuÎ
 ((1));

187 
	$¡¹oul
 (cÚ¡ *
__»¡riù
 
__Å
,

188 **
__»¡riù
 
__d±r
, 
__ba£
)

189 
__THROW
 
	`__nÚnuÎ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifdeà
__USE_MISC


194 
__exnsiÚ__


195 
	$¡¹oq
 (cÚ¡ *
__»¡riù
 
__Å
,

196 **
__»¡riù
 
__d±r
, 
__ba£
)

197 
__THROW
 
	`__nÚnuÎ
 ((1));

199 
__exnsiÚ__


200 
	$¡¹ouq
 (cÚ¡ *
__»¡riù
 
__Å
,

201 **
__»¡riù
 
__d±r
, 
__ba£
)

202 
__THROW
 
	`__nÚnuÎ
 ((1));

205 #ifdeà
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exnsiÚ__


209 
	$¡¹Þl
 (cÚ¡ *
__»¡riù
 
__Å
,

210 **
__»¡riù
 
__d±r
, 
__ba£
)

211 
__THROW
 
	`__nÚnuÎ
 ((1));

213 
__exnsiÚ__


214 
	$¡¹ouÎ
 (cÚ¡ *
__»¡riù
 
__Å
,

215 **
__»¡riù
 
__d±r
, 
__ba£
)

216 
__THROW
 
	`__nÚnuÎ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifdeà
__USE_GNU


235 
	~<xloÿË.h
>

239 
	$¡¹Þ_l
 (cÚ¡ *
__»¡riù
 
__Å
,

240 **
__»¡riù
 
__d±r
, 
__ba£
,

241 
__loÿË_t
 
__loc
è
__THROW
 
	`__nÚnuÎ
 ((1, 4));

243 
	$¡¹oul_l
 (cÚ¡ *
__»¡riù
 
__Å
,

244 **
__»¡riù
 
__d±r
,

245 
__ba£
, 
__loÿË_t
 
__loc
)

246 
__THROW
 
	`__nÚnuÎ
 ((1, 4));

248 
__exnsiÚ__


249 
	$¡¹Þl_l
 (cÚ¡ *
__»¡riù
 
__Å
,

250 **
__»¡riù
 
__d±r
, 
__ba£
,

251 
__loÿË_t
 
__loc
)

252 
__THROW
 
	`__nÚnuÎ
 ((1, 4));

254 
__exnsiÚ__


255 
	$¡¹ouÎ_l
 (cÚ¡ *
__»¡riù
 
__Å
,

256 **
__»¡riù
 
__d±r
,

257 
__ba£
, 
__loÿË_t
 
__loc
)

258 
__THROW
 
	`__nÚnuÎ
 ((1, 4));

260 
	$¡¹od_l
 (cÚ¡ *
__»¡riù
 
__Å
,

261 **
__»¡riù
 
__d±r
, 
__loÿË_t
 
__loc
)

262 
__THROW
 
	`__nÚnuÎ
 ((1, 3));

264 
	$¡¹of_l
 (cÚ¡ *
__»¡riù
 
__Å
,

265 **
__»¡riù
 
__d±r
, 
__loÿË_t
 
__loc
)

266 
__THROW
 
	`__nÚnuÎ
 ((1, 3));

268 
	$¡¹Þd_l
 (cÚ¡ *
__»¡riù
 
__Å
,

269 **
__»¡riù
 
__d±r
,

270 
__loÿË_t
 
__loc
)

271 
__THROW
 
	`__nÚnuÎ
 ((1, 3));

275 #ifdeà
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exº_le
 

278 
	`__NTH
 (
	$©oi
 (cÚ¡ *
__Å
))

280  (è
	`¡¹Þ
 (
__Å
, (**è
NULL
, 10);

281 
	}
}

282 
__exº_le
 

283 
__NTH
 (
	$©Þ
 (cÚ¡ *
__Å
))

285  
	`¡¹Þ
 (
__Å
, (**è
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifdeà
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exnsiÚ__
 
__exº_le
 

292 
__NTH
 (
	$©Þl
 (cÚ¡ *
__Å
))

294  
	`¡¹Þl
 (
__Å
, (**è
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
è
__THROW
 
__wur
;

308 
	$a64l
 (cÚ¡ *
__s
)

309 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1)è
__wur
;

313 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty³s.h
>

321 
	$¿ndom
 (è
__THROW
;

324 
	$¤ªdom
 (
__£ed
è
__THROW
;

330 *
	$¡©e
 (
__£ed
, *
__¡©ebuf
,

331 
size_t
 
__¡©
è
__THROW
 
	`__nÚnuÎ
 ((2));

335 *
	$£t¡©e
 (*
__¡©ebuf
è
__THROW
 
	`__nÚnuÎ
 ((1));

338 #ifdeà
__USE_MISC


343 
	s¿ndom_d©a


345 
t32_t
 *
å
;

346 
t32_t
 *
½
;

347 
t32_t
 *
¡©e
;

348 
¿nd_ty³
;

349 
¿nd_deg
;

350 
¿nd_£p
;

351 
t32_t
 *
d_±r
;

354 
	$¿ndom_r
 (
¿ndom_d©a
 *
__»¡riù
 
__buf
,

355 
t32_t
 *
__»¡riù
 
__»suÉ
è
__THROW
 
	`__nÚnuÎ
 ((1, 2));

357 
	$¤ªdom_r
 (
__£ed
, 
¿ndom_d©a
 *
__buf
)

358 
__THROW
 
	`__nÚnuÎ
 ((2));

360 
	$¡©e_r
 (
__£ed
, *
__»¡riù
 
__¡©ebuf
,

361 
size_t
 
__¡©
,

362 
¿ndom_d©a
 *
__»¡riù
 
__buf
)

363 
__THROW
 
	`__nÚnuÎ
 ((2, 4));

365 
	$£t¡©e_r
 (*
__»¡riù
 
__¡©ebuf
,

366 
¿ndom_d©a
 *
__»¡riù
 
__buf
)

367 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$¿nd
 (è
__THROW
;

376 
	$¤ªd
 (
__£ed
è
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifdeà
__USE_POSIX


381 
	$¿nd_r
 (*
__£ed
è
__THROW
;

385 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN


389 
	$d¿nd48
 (è
__THROW
;

390 
	$ªd48
 (
__xsubi
[3]è
__THROW
 
	`__nÚnuÎ
 ((1));

393 
	$Ìªd48
 (è
__THROW
;

394 
	$Äªd48
 (
__xsubi
[3])

395 
__THROW
 
	`__nÚnuÎ
 ((1));

398 
	$m¿nd48
 (è
__THROW
;

399 
	$j¿nd48
 (
__xsubi
[3])

400 
__THROW
 
	`__nÚnuÎ
 ((1));

403 
	$¤ªd48
 (
__£edv®
è
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__nÚnuÎ
 ((1));

406 
	$lcÚg48
 (
__·¿m
[7]è
__THROW
 
	`__nÚnuÎ
 ((1));

408 #ifdeà
__USE_MISC


412 
	sd¿nd48_d©a


414 
__x
[3];

415 
__Þd_x
[3];

416 
__c
;

417 
__
;

418 
__exnsiÚ__
 
__a
;

423 
	$d¿nd48_r
 (
d¿nd48_d©a
 *
__»¡riù
 
__bufãr
,

424 *
__»¡riù
 
__»suÉ
è
__THROW
 
	`__nÚnuÎ
 ((1, 2));

425 
	$ªd48_r
 (
__xsubi
[3],

426 
d¿nd48_d©a
 *
__»¡riù
 
__bufãr
,

427 *
__»¡riù
 
__»suÉ
è
__THROW
 
	`__nÚnuÎ
 ((1, 2));

430 
	$Ìªd48_r
 (
d¿nd48_d©a
 *
__»¡riù
 
__bufãr
,

431 *
__»¡riù
 
__»suÉ
)

432 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

433 
	$Äªd48_r
 (
__xsubi
[3],

434 
d¿nd48_d©a
 *
__»¡riù
 
__bufãr
,

435 *
__»¡riù
 
__»suÉ
)

436 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

439 
	$m¿nd48_r
 (
d¿nd48_d©a
 *
__»¡riù
 
__bufãr
,

440 *
__»¡riù
 
__»suÉ
)

441 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

442 
	$j¿nd48_r
 (
__xsubi
[3],

443 
d¿nd48_d©a
 *
__»¡riù
 
__bufãr
,

444 *
__»¡riù
 
__»suÉ
)

445 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

448 
	$¤ªd48_r
 (
__£edv®
, 
d¿nd48_d©a
 *
__bufãr
)

449 
__THROW
 
	`__nÚnuÎ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
d¿nd48_d©a
 *
__bufãr
è
__THROW
 
	`__nÚnuÎ
 ((1, 2));

454 
	$lcÚg48_r
 (
__·¿m
[7],

455 
d¿nd48_d©a
 *
__bufãr
)

456 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

462 #iâdeà
__m®loc_ªd_ÿÎoc_defed


463 
	#__m®loc_ªd_ÿÎoc_defed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$m®loc
 (
size_t
 
__size
è
__THROW
 
__©ibu_m®loc__
 
__wur
;

468 *
	$ÿÎoc
 (
size_t
 
__nmemb
, size_
__size
)

469 
__THROW
 
__©ibu_m®loc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #iâdeà
__Ãed_m®loc_ªd_ÿÎoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$»®loc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©ibu_w¬n_unu£d_»suÉ__
;

483 
	$ä
 (*
__±r
è
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$cä
 (*
__±r
è
__THROW
;

491 #ifdeà
__USE_MISC


492 
	~<®loÿ.h
>

495 #ià(
defed
 
__USE_XOPEN_EXTENDED
 && !defed 
__USE_XOPEN2K
) \

496 || 
defed
 
__USE_MISC


498 *
	$v®loc
 (
size_t
 
__size
è
__THROW
 
__©ibu_m®loc__
 
__wur
;

501 #ifdeà
__USE_XOPEN2K


503 
	$posix_mem®ign
 (**
__mem±r
, 
size_t
 
__®ignmt
, size_
__size
)

504 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

507 #ifdeà
__USE_ISOC11


509 *
	$®igÃd_®loc
 (
size_t
 
__®ignmt
, size_
__size
)

510 
__THROW
 
__©ibu_m®loc__
 
	`__©ibu_®loc_size__
 ((2)è
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$abÜt
 (è
__THROW
 
	`__©ibu__
 ((
__nÜuº__
));

519 
	$©ex
 ((*
__func
è()è
__THROW
 
	`__nÚnuÎ
 ((1));

521 #ià
defed
 
__USE_ISOC11
 || defed 
__USE_ISOCXX11


523 #ifdeà
__ýlu¥lus


524 "C++" 
	$©_quick_ex
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_ex"è
	`__nÚnuÎ
 ((1));

527 
	$©_quick_ex
 ((*
__func
è()è
__THROW
 
	`__nÚnuÎ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$Ú_ex
 ((*
__func
è(
__¡©us
, *
__¬g
), *__arg)

536 
__THROW
 
	`__nÚnuÎ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$ex
 (
__¡©us
è
__THROW
 
	`__©ibu__
 ((
__nÜuº__
));

545 #ià
defed
 
__USE_ISOC11
 || defed 
__USE_ISOCXX11


549 
	$quick_ex
 (
__¡©us
è
__THROW
 
	`__©ibu__
 ((
__nÜuº__
));

551 
__END_NAMESPACE_STD


553 #ifdeà
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Ex
 (
__¡©us
è
__THROW
 
	`__©ibu__
 ((
__nÜuº__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gv
 (cÚ¡ *
__Çme
è
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

565 
__END_NAMESPACE_STD


567 #ifdeà
__USE_GNU


570 *
	$£cu»_gv
 (cÚ¡ *
__Çme
)

571 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

574 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN


578 
	$punv
 (*
__¡rg
è
__THROW
 
	`__nÚnuÎ
 ((1));

581 #ifdeà
__USE_XOPEN2K


584 
	$£nv
 (cÚ¡ *
__Çme
, cÚ¡ *
__v®ue
, 
__»¶aû
)

585 
__THROW
 
	`__nÚnuÎ
 ((2));

588 
	$un£nv
 (cÚ¡ *
__Çme
è
__THROW
 
	`__nÚnuÎ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$þ»nv
 (è
__THROW
;

599 #ià
defed
 
__USE_MISC
 \

600 || (
defed
 
__USE_XOPEN_EXTENDED
 && !defed 
__USE_XOPEN2K8
)

606 *
	$mkmp
 (*
__m¶©e
è
__THROW
 
	`__nÚnuÎ
 ((1));

609 #ià
defed
 
__USE_XOPEN_EXTENDED
 || defed 
__USE_XOPEN2K8


618 #iâdeà
__USE_FILE_OFFSET64


619 
	$mk¡emp
 (*
__m¶©e
è
	`__nÚnuÎ
 ((1)è
__wur
;

621 #ifdeà
__REDIRECT


622 
	`__REDIRECT
 (
mk¡emp
, (*
__m¶©e
), 
mk¡emp64
)

623 
	`__nÚnuÎ
 ((1)è
__wur
;

625 
	#mk¡emp
 
mk¡emp64


	)

628 #ifdeà
__USE_LARGEFILE64


629 
	$mk¡emp64
 (*
__m¶©e
è
	`__nÚnuÎ
 ((1)è
__wur
;

633 #ifdeà
__USE_MISC


640 #iâdeà
__USE_FILE_OFFSET64


641 
	$mk¡emps
 (*
__m¶©e
, 
__suffixËn
è
	`__nÚnuÎ
 ((1)è
__wur
;

643 #ifdeà
__REDIRECT


644 
	`__REDIRECT
 (
mk¡emps
, (*
__m¶©e
, 
__suffixËn
),

645 
mk¡emps64
è
	`__nÚnuÎ
 ((1)è
__wur
;

647 
	#mk¡emps
 
mk¡emps64


	)

650 #ifdeà
__USE_LARGEFILE64


651 
	$mk¡emps64
 (*
__m¶©e
, 
__suffixËn
)

652 
	`__nÚnuÎ
 ((1)è
__wur
;

656 #ifdeà
__USE_XOPEN2K8


662 *
	$mkdmp
 (*
__m¶©e
è
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

665 #ifdeà
__USE_GNU


672 #iâdeà
__USE_FILE_OFFSET64


673 
	$mko¡emp
 (*
__m¶©e
, 
__æags
è
	`__nÚnuÎ
 ((1)è
__wur
;

675 #ifdeà
__REDIRECT


676 
	`__REDIRECT
 (
mko¡emp
, (*
__m¶©e
, 
__æags
), 
mko¡emp64
)

677 
	`__nÚnuÎ
 ((1)è
__wur
;

679 
	#mko¡emp
 
mko¡emp64


	)

682 #ifdeà
__USE_LARGEFILE64


683 
	$mko¡emp64
 (*
__m¶©e
, 
__æags
è
	`__nÚnuÎ
 ((1)è
__wur
;

692 #iâdeà
__USE_FILE_OFFSET64


693 
	$mko¡emps
 (*
__m¶©e
, 
__suffixËn
, 
__æags
)

694 
	`__nÚnuÎ
 ((1)è
__wur
;

696 #ifdeà
__REDIRECT


697 
	`__REDIRECT
 (
mko¡emps
, (*
__m¶©e
, 
__suffixËn
,

698 
__æags
), 
mko¡emps64
)

699 
	`__nÚnuÎ
 ((1)è
__wur
;

701 
	#mko¡emps
 
mko¡emps64


	)

704 #ifdeà
__USE_LARGEFILE64


705 
	$mko¡emps64
 (*
__m¶©e
, 
__suffixËn
, 
__æags
)

706 
	`__nÚnuÎ
 ((1)è
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy¡em
 (cÚ¡ *
__commªd
è
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ÿnÚiÿlize_fe_Çme
 (cÚ¡ *
__Çme
)

724 
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

727 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN_EXTENDED


733 *
	$»®·th
 (cÚ¡ *
__»¡riù
 
__Çme
,

734 *
__»¡riù
 
__»sÞved
è
__THROW
 
__wur
;

739 #iâdeà
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com·r_â_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com·r_â_t
 
	tcom·risÚ_â_t
;

747 #ifdeà
__USE_GNU


748 (*
	t__com·r_d_â_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¬ch
 (cÚ¡ *
__key
, cÚ¡ *
__ba£
,

755 
size_t
 
__nmemb
, size_
__size
, 
__com·r_â_t
 
__com·r
)

756 
	`__nÚnuÎ
 ((1, 2, 5)è
__wur
;

758 #ifdeà
__USE_EXTERN_INLINES


759 
	~<bs/¡dlib-b£¬ch.h
>

764 
	$qsÜt
 (*
__ba£
, 
size_t
 
__nmemb
, size_
__size
,

765 
__com·r_â_t
 
__com·r
è
	`__nÚnuÎ
 ((1, 4));

766 #ifdeà
__USE_GNU


767 
	$qsÜt_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_
__size
,

768 
__com·r_d_â_t
 
__com·r
, *
__¬g
)

769 
	`__nÚnuÎ
 ((1, 4));

774 
	$abs
 (
__x
è
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
)è
__wur
;

775 
	$Ïbs
 (
__x
è
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
)è
__wur
;

776 
__END_NAMESPACE_STD


778 #ifdeà
__USE_ISOC99


779 
__exnsiÚ__
 
	$Îabs
 (
__x
)

780 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
)è
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__num
, 
__dom
)

789 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
)è
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__num
, 
__dom
)

791 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
)è
__wur
;

792 
__END_NAMESPACE_STD


794 #ifdeà
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exnsiÚ__
 
Îdiv_t
 
	$Îdiv
 (
__num
,

797 
__dom
)

798 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
)è
__wur
;

799 
__END_NAMESPACE_C99


803 #ià(
defed
 
__USE_XOPEN_EXTENDED
 && !defed 
__USE_XOPEN2K8
) \

804 || 
defed
 
__USE_MISC


811 *
	$ecvt
 (
__v®ue
, 
__ndig
, *
__»¡riù
 
__deýt
,

812 *
__»¡riù
 
__sign
è
__THROW
 
	`__nÚnuÎ
 ((3, 4)è
__wur
;

817 *
	$fcvt
 (
__v®ue
, 
__ndig
, *
__»¡riù
 
__deýt
,

818 *
__»¡riù
 
__sign
è
__THROW
 
	`__nÚnuÎ
 ((3, 4)è
__wur
;

823 *
	$gcvt
 (
__v®ue
, 
__ndig
, *
__buf
)

824 
__THROW
 
	`__nÚnuÎ
 ((3)è
__wur
;

827 #ifdeà
__USE_MISC


829 *
	$qecvt
 (
__v®ue
, 
__ndig
,

830 *
__»¡riù
 
__deýt
, *__»¡riù 
__sign
)

831 
__THROW
 
	`__nÚnuÎ
 ((3, 4)è
__wur
;

832 *
	$qfcvt
 (
__v®ue
, 
__ndig
,

833 *
__»¡riù
 
__deýt
, *__»¡riù 
__sign
)

834 
__THROW
 
	`__nÚnuÎ
 ((3, 4)è
__wur
;

835 *
	$qgcvt
 (
__v®ue
, 
__ndig
, *
__buf
)

836 
__THROW
 
	`__nÚnuÎ
 ((3)è
__wur
;

841 
	$ecvt_r
 (
__v®ue
, 
__ndig
, *
__»¡riù
 
__deýt
,

842 *
__»¡riù
 
__sign
, *__»¡riù 
__buf
,

843 
size_t
 
__Ën
è
__THROW
 
	`__nÚnuÎ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__v®ue
, 
__ndig
, *
__»¡riù
 
__deýt
,

845 *
__»¡riù
 
__sign
, *__»¡riù 
__buf
,

846 
size_t
 
__Ën
è
__THROW
 
	`__nÚnuÎ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__v®ue
, 
__ndig
,

849 *
__»¡riù
 
__deýt
, *__»¡riù 
__sign
,

850 *
__»¡riù
 
__buf
, 
size_t
 
__Ën
)

851 
__THROW
 
	`__nÚnuÎ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__v®ue
, 
__ndig
,

853 *
__»¡riù
 
__deýt
, *__»¡riù 
__sign
,

854 *
__»¡riù
 
__buf
, 
size_t
 
__Ën
)

855 
__THROW
 
	`__nÚnuÎ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbËn
 (cÚ¡ *
__s
, 
size_t
 
__n
è
__THROW
;

865 
	$mbtowc
 (
wch¬_t
 *
__»¡riù
 
__pwc
,

866 cÚ¡ *
__»¡riù
 
__s
, 
size_t
 
__n
è
__THROW
;

869 
	$wùomb
 (*
__s
, 
wch¬_t
 
__wch¬
è
__THROW
;

873 
size_t
 
	$mb¡owcs
 (
wch¬_t
 *
__»¡riù
 
__pwcs
,

874 cÚ¡ *
__»¡riù
 
__s
, 
size_t
 
__n
è
__THROW
;

876 
size_t
 
	$wc¡ombs
 (*
__»¡riù
 
__s
,

877 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifdeà
__USE_MISC


887 
	$½m©ch
 (cÚ¡ *
__»¥Ú£
è
__THROW
 
	`__nÚnuÎ
 ((1)è
__wur
;

891 #ià
defed
 
__USE_XOPEN_EXTENDED
 || defed 
__USE_XOPEN2K8


898 
	$gsubÝt
 (**
__»¡riù
 
__ÝtiÚp
,

899 *cÚ¡ *
__»¡riù
 
__toks
,

900 **
__»¡riù
 
__v®u
)

901 
__THROW
 
	`__nÚnuÎ
 ((1, 2, 3)è
__wur
;

905 #ifdeà
__USE_XOPEN


907 
	$£tkey
 (cÚ¡ *
__key
è
__THROW
 
	`__nÚnuÎ
 ((1));

913 #ifdeà
__USE_XOPEN2KXSI


915 
	$posix_Ý±
 (
__oæag
è
__wur
;

918 #ifdeà
__USE_XOPEN


923 
	$g¿Á±
 (
__fd
è
__THROW
;

927 
	$uÆock±
 (
__fd
è
__THROW
;

932 *
	$±¢ame
 (
__fd
è
__THROW
 
__wur
;

935 #ifdeà
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buæ
)

940 
__THROW
 
	`__nÚnuÎ
 ((2));

943 
	`g±
 ();

946 #ifdeà
__USE_MISC


950 
	$glßdavg
 (
__lßdavg
[], 
__ÃËm
)

951 
__THROW
 
	`__nÚnuÎ
 ((1));

954 
	~<bs/¡dlib-æßt.h
>

957 #ià
__USE_FORTIFY_LEVEL
 > 0 && 
defed
 
__fÜtify_funùiÚ


958 
	~<bs/¡dlib.h
>

960 #ifdeà
__LDBL_COMPAT


961 
	~<bs/¡dlib-ldbl.h
>

965 #undeà
__Ãed_m®loc_ªd_ÿÎoc


967 
__END_DECLS


	@/usr/include/string.h

22 #iâdef 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<ã©u»s.h
>

27 
	g__BEGIN_DECLS


30 
	#__Ãed_size_t


	)

31 
	#__Ãed_NULL


	)

32 
	~<¡ddef.h
>

35 #ià
defed
 
__ýlu¥lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$memýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
,

43 
size_t
 
__n
è
__THROW
 
	`__nÚnuÎ
 ((1, 2));

46 *
	$memmove
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
)

47 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN


54 *
	$memcýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
è
__THROW
 
	`__nÚnuÎ
 ((1));

65 
	$memcmp
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

69 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

74 cÚ¡ *
	`memchr
 (cÚ¡ *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

77 #ifdeà
__OPTIMIZE__


78 
__exº_®ways_le
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
è
__THROW


81  
	`__but_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exº_®ways_le
 const *

85 
	`memchr
 (cÚ¡ *
__s
, 
__c
, 
size_t
 
__n
è
__THROW


87  
	`__but_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (cÚ¡ *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifdeà
__USE_GNU


100 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$¿wmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("¿wmemchr"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

103 "C++" cÚ¡ *
	$¿wmemchr
 (cÚ¡ *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("¿wmemchr"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

106 *
	$¿wmemchr
 (cÚ¡ *
__s
, 
__c
)

107 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

111 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

114 "C++" cÚ¡ *
	$memrchr
 (cÚ¡ *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

117 *
	$memrchr
 (cÚ¡ *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$¡rýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
)

126 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

128 *
	$¡ºýy
 (*
__»¡riù
 
__de¡
,

129 cÚ¡ *
__»¡riù
 
__¤c
, 
size_t
 
__n
)

130 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

133 *
	$¡rÿt
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
)

134 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

136 *
	$¡ºÿt
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
,

137 
size_t
 
__n
è
__THROW
 
	`__nÚnuÎ
 ((1, 2));

140 
	$¡rcmp
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
)

141 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

143 
	$¡ºcmp
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

147 
	$¡rcÞl
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
)

148 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

150 
size_t
 
	$¡rxäm
 (*
__»¡riù
 
__de¡
,

151 cÚ¡ *
__»¡riù
 
__¤c
, 
size_t
 
__n
)

152 
__THROW
 
	`__nÚnuÎ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifdeà
__USE_XOPEN2K8


159 
	~<xloÿË.h
>

162 
	$¡rcÞl_l
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
, 
__loÿË_t
 
__l
)

163 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2, 3));

165 
size_t
 
	$¡rxäm_l
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
,

166 
__loÿË_t
 
__l
è
__THROW
 
	`__nÚnuÎ
 ((2, 4));

169 #ià
defed
 
__USE_XOPEN_EXTENDED
 || defed 
__USE_XOPEN2K8


171 *
	$¡rdup
 (cÚ¡ *
__s
)

172 
__THROW
 
__©ibu_m®loc__
 
	`__nÚnuÎ
 ((1));

178 #ià
defed
 
__USE_XOPEN2K8


179 *
	$¡ºdup
 (cÚ¡ *
__¡rg
, 
size_t
 
__n
)

180 
__THROW
 
__©ibu_m®loc__
 
	`__nÚnuÎ
 ((1));

183 #ià
defed
 
__USE_GNU
 && defed 
__GNUC__


185 
	#¡rdu·
(
s
) \

186 (
__exnsiÚ__
 \

188 cÚ¡ *
__Þd
 = (
s
); \

189 
size_t
 
__Ën
 = 
	`¡¾
 (
__Þd
) + 1; \

190 *
__Ãw
 = (*è
	`__but_®loÿ
 (
__Ën
); \

191 (*è
	`memýy
 (
__Ãw
, 
__Þd
, 
__Ën
); \

192 
	}
}))

	)

195 
	#¡ºdu·
(
s
, 
n
) \

196 (
__exnsiÚ__
 \

198 cÚ¡ *
__Þd
 = (
s
); \

199 
size_t
 
__Ën
 = 
	`¡ºËn
 (
__Þd
, (
n
)); \

200 *
__Ãw
 = (*è
	`__but_®loÿ
 (
__Ën
 + 1); \

201 
__Ãw
[
__Ën
] = '\0'; \

202 (*è
	`memýy
 (
__Ãw
, 
__Þd
, 
__Ën
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
¡rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("¡rchr"è
__©ibu_pu»__
 
__nÚnuÎ
 ((1));

213 cÚ¡ *
¡rchr
 (cÚ¡ *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("¡rchr"è
__©ibu_pu»__
 
__nÚnuÎ
 ((1));

216 #ifdeà
__OPTIMIZE__


217 
__exº_®ways_le
 *

218 
¡rchr
 (*
__s
, 
__c
è
	g__THROW


220  
__but_¡rchr
 (
__s
, 
__c
);

223 
__exº_®ways_le
 const *

224 
¡rchr
 (cÚ¡ *
__s
, 
__c
è
	g__THROW


226  
__but_¡rchr
 (
__s
, 
__c
);

231 *
	$¡rchr
 (cÚ¡ *
__s
, 
__c
)

232 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

235 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`¡¼chr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("¡¼chr"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

240 cÚ¡ *
	`¡¼chr
 (cÚ¡ *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("¡¼chr"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

243 #ifdeà
__OPTIMIZE__


244 
__exº_®ways_le
 *

245 
	`¡¼chr
 (*
__s
, 
__c
è
__THROW


247  
	`__but_¡¼chr
 (
__s
, 
__c
);

250 
__exº_®ways_le
 const *

251 
	`¡¼chr
 (cÚ¡ *
__s
, 
__c
è
__THROW


253  
	`__but_¡¼chr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$¡¼chr
 (cÚ¡ *
__s
, 
__c
)

259 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifdeà
__USE_GNU


266 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$¡rchºul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("¡rchºul"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

269 "C++" cÚ¡ *
	$¡rchºul
 (cÚ¡ *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("¡rchºul"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

272 *
	$¡rchºul
 (cÚ¡ *
__s
, 
__c
)

273 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$¡rc¥n
 (cÚ¡ *
__s
, cÚ¡ *
__»jeù
)

281 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

284 
size_t
 
	$¡r¥n
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
)

285 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

287 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`¡½brk
 (*
__s
, cÚ¡ *
__acû±
)

291 
__THROW
 
	`__asm
 ("¡½brk"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

292 cÚ¡ *
	`¡½brk
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
)

293 
__THROW
 
	`__asm
 ("¡½brk"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

295 #ifdeà
__OPTIMIZE__


296 
__exº_®ways_le
 *

297 
	`¡½brk
 (*
__s
, cÚ¡ *
__acû±
è
__THROW


299  
	`__but_¡½brk
 (
__s
, 
__acû±
);

302 
__exº_®ways_le
 const *

303 
	`¡½brk
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
è
__THROW


305  
	`__but_¡½brk
 (
__s
, 
__acû±
);

308 
	}
}

310 *
	$¡½brk
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
)

311 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

314 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`¡r¡r
 (*
__hay¡ack
, cÚ¡ *
__ÃedË
)

318 
__THROW
 
	`__asm
 ("¡r¡r"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

319 cÚ¡ *
	`¡r¡r
 (cÚ¡ *
__hay¡ack
, cÚ¡ *
__ÃedË
)

320 
__THROW
 
	`__asm
 ("¡r¡r"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

322 #ifdeà
__OPTIMIZE__


323 
__exº_®ways_le
 *

324 
	`¡r¡r
 (*
__hay¡ack
, cÚ¡ *
__ÃedË
è
__THROW


326  
	`__but_¡r¡r
 (
__hay¡ack
, 
__ÃedË
);

329 
__exº_®ways_le
 const *

330 
	`¡r¡r
 (cÚ¡ *
__hay¡ack
, cÚ¡ *
__ÃedË
è
__THROW


332  
	`__but_¡r¡r
 (
__hay¡ack
, 
__ÃedË
);

335 
	}
}

337 *
	$¡r¡r
 (cÚ¡ *
__hay¡ack
, cÚ¡ *
__ÃedË
)

338 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

343 *
	$¡¹ok
 (*
__»¡riù
 
__s
, cÚ¡ *__»¡riù 
__dim
)

344 
__THROW
 
	`__nÚnuÎ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__¡¹ok_r
 (*
__»¡riù
 
__s
,

350 cÚ¡ *
__»¡riù
 
__dim
,

351 **
__»¡riù
 
__§ve_±r
)

352 
__THROW
 
	`__nÚnuÎ
 ((2, 3));

353 #ifdeà
__USE_POSIX


354 *
	$¡¹ok_r
 (*
__»¡riù
 
__s
, cÚ¡ *__»¡riù 
__dim
,

355 **
__»¡riù
 
__§ve_±r
)

356 
__THROW
 
	`__nÚnuÎ
 ((2, 3));

359 #ifdeà
__USE_GNU


361 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$¡rÿ£¡r
 (*
__hay¡ack
, cÚ¡ *
__ÃedË
)

363 
__THROW
 
	`__asm
 ("¡rÿ£¡r"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

364 "C++" cÚ¡ *
	$¡rÿ£¡r
 (cÚ¡ *
__hay¡ack
,

365 cÚ¡ *
__ÃedË
)

366 
__THROW
 
	`__asm
 ("¡rÿ£¡r"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

368 *
	$¡rÿ£¡r
 (cÚ¡ *
__hay¡ack
, cÚ¡ *
__ÃedË
)

369 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

373 #ifdeà
__USE_GNU


377 *
	$memmem
 (cÚ¡ *
__hay¡ack
, 
size_t
 
__hay¡ackËn
,

378 cÚ¡ *
__ÃedË
, 
size_t
 
__ÃedËËn
)

379 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 3));

383 *
	$__mempýy
 (*
__»¡riù
 
__de¡
,

384 cÚ¡ *
__»¡riù
 
__¤c
, 
size_t
 
__n
)

385 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

386 *
	$mempýy
 (*
__»¡riù
 
__de¡
,

387 cÚ¡ *
__»¡riù
 
__¤c
, 
size_t
 
__n
)

388 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$¡¾
 (cÚ¡ *
__s
)

395 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$¡ºËn
 (cÚ¡ *
__¡rg
, 
size_t
 
__maxËn
)

402 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$¡»¼Ü
 (
__ºum
è
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifdeà
__USE_XOPEN2K


418 #ià
defed
 
__USE_XOPEN2K
 && !defed 
__USE_GNU


421 #ifdeà
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
¡»¼Ü_r
,

423 (
__ºum
, *
__buf
, 
size_t
 
__buæ
),

424 
__xpg_¡»¼Ü_r
è
	`__nÚnuÎ
 ((2));

426 
	$__xpg_¡»¼Ü_r
 (
__ºum
, *
__buf
, 
size_t
 
__buæ
)

427 
__THROW
 
	`__nÚnuÎ
 ((2));

428 
	#¡»¼Ü_r
 
__xpg_¡»¼Ü_r


	)

433 *
	$¡»¼Ü_r
 (
__ºum
, *
__buf
, 
size_t
 
__buæ
)

434 
__THROW
 
	`__nÚnuÎ
 ((2)è
__wur
;

438 #ifdeà
__USE_XOPEN2K8


440 *
	$¡»¼Ü_l
 (
__ºum
, 
__loÿË_t
 
__l
è
__THROW
;

446 
	$__bzo
 (*
__s
, 
size_t
 
__n
è
__THROW
 
	`__nÚnuÎ
 ((1));

448 #ifdeà
__USE_MISC


450 
	$bcÝy
 (cÚ¡ *
__¤c
, *
__de¡
, 
size_t
 
__n
)

451 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

454 
	$bzo
 (*
__s
, 
size_t
 
__n
è
__THROW
 
	`__nÚnuÎ
 ((1));

457 
	$bcmp
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

461 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`dex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("dex"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

466 cÚ¡ *
	`dex
 (cÚ¡ *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("dex"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

469 #ià
defed
 
__OPTIMIZE__
 && !defed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exº_®ways_le
 *

471 
	`dex
 (*
__s
, 
__c
è
__THROW


473  
	`__but_dex
 (
__s
, 
__c
);

476 
__exº_®ways_le
 const *

477 
	`dex
 (cÚ¡ *
__s
, 
__c
è
__THROW


479  
	`__but_dex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$dex
 (cÚ¡ *
__s
, 
__c
)

485 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

489 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rdex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rdex"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

494 cÚ¡ *
	`rdex
 (cÚ¡ *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rdex"è
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

497 #ià
defed
 
__OPTIMIZE__
 && !defed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exº_®ways_le
 *

499 
	`rdex
 (*
__s
, 
__c
è
__THROW


501  
	`__but_rdex
 (
__s
, 
__c
);

504 
__exº_®ways_le
 const *

505 
	`rdex
 (cÚ¡ *
__s
, 
__c
è
__THROW


507  
	`__but_rdex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rdex
 (cÚ¡ *
__s
, 
__c
)

513 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1));

518 
	$ffs
 (
__i
è
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

522 #ifdef 
__USE_GNU


523 
	$ff¦
 (
__l
è
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

524 
__exnsiÚ__
 
	$ff¦l
 (
__Î
)

525 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

529 
	$¡rÿ£cmp
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
)

530 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

533 
	$¡ºÿ£cmp
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$¡rÿ£cmp_l
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
,

541 
__loÿË_t
 
__loc
)

542 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2, 3));

544 
	$¡ºÿ£cmp_l
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
,

545 
size_t
 
__n
, 
__loÿË_t
 
__loc
)

546 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$¡r£p
 (**
__»¡riù
 
__¡rgp
,

553 cÚ¡ *
__»¡riù
 
__dim
)

554 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$¡rsigÇl
 (
__sig
è
__THROW
;

562 *
	$__¡pýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
)

563 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

564 *
	$¡pýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
)

565 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

569 *
	$__¡²ýy
 (*
__»¡riù
 
__de¡
,

570 cÚ¡ *
__»¡riù
 
__¤c
, 
size_t
 
__n
)

571 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

572 *
	$¡²ýy
 (*
__»¡riù
 
__de¡
,

573 cÚ¡ *
__»¡riù
 
__¤c
, 
size_t
 
__n
)

574 
__THROW
 
	`__nÚnuÎ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$¡rvscmp
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
)

580 
__THROW
 
__©ibu_pu»__
 
	`__nÚnuÎ
 ((1, 2));

583 *
	$¡räy
 (*
__¡rg
è
__THROW
 
	`__nÚnuÎ
 ((1));

586 *
	$memäob
 (*
__s
, 
size_t
 
__n
è
__THROW
 
	`__nÚnuÎ
 ((1));

588 #iâdeà
ba£Çme


593 #ifdeà
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£Çme
 (*
__fame
)

595 
__THROW
 
	`__asm
 ("ba£Çme"è
	`__nÚnuÎ
 ((1));

596 "C++" cÚ¡ *
	$ba£Çme
 (cÚ¡ *
__fame
)

597 
__THROW
 
	`__asm
 ("ba£Çme"è
	`__nÚnuÎ
 ((1));

599 *
	$ba£Çme
 (cÚ¡ *
__fame
è
__THROW
 
	`__nÚnuÎ
 ((1));

605 #ià
defed
 
__GNUC__
 && __GNUC__ >= 2

606 #ià
defed
 
__OPTIMIZE__
 && !defed 
__OPTIMIZE_SIZE__
 \

607 && !
defed
 
__NO_INLINE__
 && !defed 
__ýlu¥lus


627 
	~<bs/¡rg.h
>

630 
	~<bs/¡rg2.h
>

633 #ià
__USE_FORTIFY_LEVEL
 > 0 && 
defed
 
__fÜtify_funùiÚ


635 
	~<bs/¡rg3.h
>

639 #ià
defed
 
__USE_GNU
 && defed 
__OPTIMIZE__
 \

640 && 
defed
 
__exº_®ways_le
 && 
	$__GNUC_PREREQ
 (3,2)

641 #ià!
defed
 
_FORCE_INLINES
 && !defed 
_HAVE_STRING_ARCH_mempýy


643 #undeà
mempýy


644 #undeà
__mempýy


645 
	#mempýy
(
de¡
, 
¤c
, 
n
è
	`__mempýy_le
 (de¡, src,)

	)

646 
	#__mempýy
(
de¡
, 
¤c
, 
n
è
	`__mempýy_le
 (de¡, src,)

	)

648 
__exº_®ways_le
 *

649 
	$__mempýy_le
 (*
__»¡riù
 
__de¡
,

650 cÚ¡ *
__»¡riù
 
__¤c
, 
size_t
 
__n
)

652  (*è
	`memýy
 (
__de¡
, 
__¤c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@gs_flash.h

1 #iâdeà
__GS_FLASH_H__


2 
	#__GS_FLASH_H__


	)

4 
	sgs_æash
 {

5 
ut32_t
 
	mæash_¡¬t
;

6 
ut32_t
 
	mæash_¡Ý
;

7 *
	mæash_addr
;

11 
gs_æash_
(
gs_æash
 *
æash
);

12 
wa_fÜ_æash_»ady
();

13 
f¡Üage_a£
(
ut32_t
 
addr
, ut32_
·ges_út
);

14 
f¡Üage_wre
Ð
ut32_t
 
addr
, cÚ¡ * 
p_d©a
,ut32_
Ën
);

15 
f¡Üage_»ad
(
ut32_t
 
addr
, * 
d©a
, ut32_
Ën
);

	@gs_gpio.h

7 #iâdeà
__GS_EVENT_H__


8 
	#__GS_EVENT_H__


	)

10 
	#GS_GPIO_HIGH
 1

	)

11 
	#GS_GPIO_LOW
 0

	)

12 
	#GS_SPIS_READY_PIN
 6

	)

13 
	sgs_gpios
 {

14 
	m»ady_le
;

15 
	m
;

18 
gs_£t_»ady_le
();

19 
gs_þr_»ady_le
();

20 
gs_gpio_
(
gs_gpios
 *);

	@gs_nrf_esb.c

1 
	~"Äf_esb.h
"

2 
	~<¡dboÞ.h
>

3 
	~<¡dt.h
>

4 
	~"sdk_commÚ.h
"

5 
	~"Äf.h
"

6 
	~"Äf_esb_rÜ_codes.h
"

7 
	~"Äf_day.h
"

8 
	~"Äf_gpio.h
"

9 
	~"Äf_rÜ.h
"

10 
	~"bßrds.h
"

13 
	~"Äf_log.h
"

14 
	~"Äf_log_ù¾.h
"

15 
	~"Äf_log_deçuÉ_backds.h
"

17 
	~"gs_tim.h
"

18 
	~"gs_rgbuf.h
"

20 
	#ESB_DEVICE_PIPE
 0

	)

21 
	#ESB_RX_PAYLOAD_LENGTH
 224

	)

23 
Äf_esb_·ylßd_t
 
	grx_·ylßd
;

24 
boÞ
 
	gg_esb_¡¬t
 = 
çl£
;

25 
	$Äf_esb_evt_hªdËr
(
Äf_esb_evt_t
 cÚ¡ * 
p_evt
)

27 
gs_rgbuf
 *
rgbuf
 = 
	`gs_rgbuf_g_by_devid
(
ESB_DEVICE_PIPE
);

28 
ut8_t
 *
rx_·ylßd_addr
 = 
	`rf_»que¡_·ylßd_addr
(
rgbuf
,
ESB_RX_PAYLOAD_LENGTH
);

29 
p_evt
->
evt_id
)

31 
NRF_ESB_EVENT_TX_SUCCESS
:

34 
NRF_ESB_EVENT_TX_FAILED
:

37 
NRF_ESB_EVENT_RX_RECEIVED
:

39 ià(
	`Äf_esb_»ad_rx_·ylßd
(&
rx_·ylßd
è=ð
NRF_SUCCESS
)

41 
pe_»cived_bys_³r_£c
[
rx_·ylßd
.
pe
] +ðrx_·ylßd.
Ëngth
;

43 ià(
rx_·ylßd_addr
 !ð
NULL
) {

44 
	`memýy
(
rx_·ylßd_addr
,
rx_·ylßd
.
d©a
,rx_·ylßd.
Ëngth
);

48 
gs_rf_drÝ_·cks_tÙ®
++;

50 
rf_»cived_bys_³r_£c
 +ð
rx_·ylßd
.
Ëngth
;

56 
	}
}

58 
ut32_t
 
	$gs_esb_
( )

60 
ut32_t
 
r_code
;

61 
ut8_t
 
ba£_addr_0
[4] = {0xE7, 0xE7, 0xE7, 0xE7};

62 
ut8_t
 
ba£_addr_1
[4] = {0xC2, 0xC2, 0xC2, 0xC2};

63 
ut8_t
 
addr_´efix
[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8 };

64 
Äf_esb_cÚfig_t
 
Äf_esb_cÚfig
 = 
NRF_ESB_DEFAULT_CONFIG
;

65 
Äf_esb_cÚfig
.
·ylßd_Ëngth
 = 252;

66 
Äf_esb_cÚfig
.
´ÙocÞ
 = 
NRF_ESB_PROTOCOL_ESB_DPL
;

67 
Äf_esb_cÚfig
.
b¿
 = 
NRF_ESB_BITRATE_2MBPS
;

68 
Äf_esb_cÚfig
.
mode
 = 
NRF_ESB_MODE_PRX
;

69 
Äf_esb_cÚfig
.
evt_hªdËr
 = 
Äf_esb_evt_hªdËr
;

70 
Äf_esb_cÚfig
.
£Ëùive_auto_ack
 = 
çl£
;

73 
r_code
 = 
	`Äf_esb_
(&
Äf_esb_cÚfig
);

74 
	`VERIFY_SUCCESS
(
r_code
);

76 
r_code
 = 
	`Äf_esb_£t_ba£_add»ss_0
(
ba£_addr_0
);

77 
	`VERIFY_SUCCESS
(
r_code
);

79 
r_code
 = 
	`Äf_esb_£t_ba£_add»ss_1
(
ba£_addr_1
);

80 
	`VERIFY_SUCCESS
(
r_code
);

82 
r_code
 = 
	`Äf_esb_£t_´efixes
(
addr_´efix
, 8);

83 
	`VERIFY_SUCCESS
(
r_code
);

86 
	`NRF_LOG_INFO
("esb in codð%d\n",
r_code
);

87  
r_code
;

88 
	}
}

90 
ut32_t
 
	$gs_esb_abË
()

92 
ut32_t
 
r_code
 = 0;

93 
g_esb_¡¬t
 = 
ue
;

94 
r_code
 = 
	`Äf_esb_¡¬t_rx
();

95 
	`NRF_LOG_INFO
("esbÇbË codð%d\n",
r_code
);

96  
r_code
;

97 
	}
}

99 
ut32_t
 
	$gs_esb_di§bË
()

101 
g_esb_¡¬t
 = 
çl£
;

102  
	`Äf_esb_¡Ý_rx
();

103 
	}
}

105 
boÞ
 
	$gs_esb_abËd
()

107  
g_esb_¡¬t
;

108 
	}
}

	@gs_nrf_gzll.c

7 
	~<¡rg.h
>

8 
	~"Äf_gzÎ.h
"

9 
	~"Äf_log.h
"

10 
	~"Äf_log_ù¾.h
"

11 
	~"Äf_gzÎ_rÜ.h
"

12 
	~"gs_tim.h
"

13 
	~"gs_´x.h
"

15 
ut8_t
 
	gm_d©a_·ylßd
[
NRF_GZLL_CONST_MAX_PAYLOAD_LENGTH
];

16 
ut8_t
 
	gm_ack_·ylßd
[6] = {0xef,0x01,0x00,0x00,0x55,0xaa};

19 
gs_´x
 *
	$g_gs_´x
()

21  &
g_´x
;

22 
	}
}

24 
	$gs_rf_þn_txfifo
(
ut32_t
 
pe
)

26 
	`Äf_gzÎ_æush_tx_fifo
 (
pe
);

27 
	}
}

29 
	$gs_rf_þn_rxfifo
(
ut32_t
 
pe
)

31 
	`Äf_gzÎ_æush_rx_fifo
 (
pe
);

32 
	}
}

34 
	$Äf_gzÎ_ho¡_rx_d©a_»ady
(
ut32_t
 
pe
, 
Äf_gzÎ_ho¡_rx_fo_t
 
rx_fo
)

36 
boÞ
 
»suÉ_v®ue
 = 
çl£
;

37 
ut32_t
 
rx_·ylßd_Ëngth
 = 
NRF_GZLL_CONST_MAX_PAYLOAD_LENGTH
;

38 
gs_rgbuf
 *
rgbuf
 = 
	`gs_rgbuf_g_by_devid
(
pe
);

39 
ut8_t
 *
rx_·ylßd_addr
 = 
	`rf_»que¡_·ylßd_addr
(
rgbuf
,
rx_·ylßd_Ëngth
);

40 
gs_´x
 *
´x
 = 
	`g_gs_´x
();

42 ià(!
rx_·ylßd_addr
) {

43 
rx_·ylßd_addr
 = 
m_d©a_·ylßd
;

44 
gs_rf_drÝ_·cks_tÙ®
++;

51 
»suÉ_v®ue
 = 
	`Äf_gzÎ_ãtch_·ck_äom_rx_fifo
(
pe
,

52 
rx_·ylßd_addr
,&
rx_·ylßd_Ëngth
);

53 ià(!
»suÉ_v®ue
) {

54 
	`NRF_LOG_ERROR
("RX fiforror ");

57 ià(
rx_·ylßd_Ëngth
 !ð
NRF_GZLL_CONST_MAX_PAYLOAD_LENGTH
) {

64 iàÐ
rx_·ylßd_Ëngth
 > 0 ) {

65 
pe_»cived_bys_³r_£c
[
pe
] +ð
rx_·ylßd_Ëngth
;

66 
rf_»cived_bys_³r_£c
 +ð
rx_·ylßd_Ëngth
;

71 ià(!
´x
->
h¹bt
) {

72 
deviû_fo
 *
devfo
 = 
´x
->
devli¡
 + 
pe
;

73 ià(
´x
->
tim
.
ticks
 > 2 *rx->tim.
ticks_couÁ
 / 3) {

74 ià(!
devfo
->
sync
) {

76 
devfo
->
ch¬ge
 = *(
rx_·ylßd_addr
 + 0);

77 
devfo
->
b©ry_h
 = *(
rx_·ylßd_addr
 + 1);

78 
devfo
->
b©ry_l
 = *(
rx_·ylßd_addr
 + 2);

79 
devfo
->
h¹bt
 = 0xff;

81 
devfo
->
sync
 = 
ue
;

86 ià(
´x
->
cmd¬g
 =ð
NRFCMD_DISCONNECT
) {

87 ià(
´x
->
cmdv®
 & (1 << 
pe
)) {

88 
m_ack_·ylßd
[2] = 
pe
;

89 
m_ack_·ylßd
[3] = 
NRFCMD_DISCONNECT
;

90 
»suÉ_v®ue
 =

91 
	`Äf_gzÎ_add_·ck_to_tx_fifo
(
pe
,
m_ack_·ylßd
,(m_ack_payload));

92 ià(! 
»suÉ_v®ue
) {

93 
	`NRF_LOG_ERROR
("£ndckØdeviû %d¼Ü!",
pe
);

103 ià(
´x
->
cmdv®
 == 0x00) {

104 
´x
->
cmd¬g
 = 
NRFCMD_UNKNOWN
;

109 
	}
}

111 
	$Äf_gzÎ_deviû_tx_sucûss
(
ut32_t
 
pe
, 
Äf_gzÎ_deviû_tx_fo_t
 
tx_fo
)

113 
	}
}

115 
	$Äf_gzÎ_deviû_tx_çed
(
ut32_t
 
pe
, 
Äf_gzÎ_deviû_tx_fo_t
 
tx_fo
)

117 
	}
}

120 
ut32_t
 
	$gs_gzÎ_£t_ba£_add»ss0
(
gs_Äf_deviû
 *
dev
)

122 
ut8_t
 
ba£_add»ss0
[] = 
GS_DEFAULT_BASE_ADDRESS_0
;

123 
gs_´x
 *
´x
 = 
	`g_gs_´x
();

124 
gs_twis_»g
 *
»g
 = 
´x
->
twis
.
»gba£
;

125 ià(
»g
) {

127 ià(
»g
->
ho¡_ba£_addr0
[0]) {

128 
	`memýy
(
ba£_add»ss0
,
»g
->
ho¡_ba£_addr0
,(base_address0));

132  
	`Äf_gzÎ_£t_ba£_add»ss_0
(
ba£_add»ss0
);

133 
	}
}

135 
ut32_t
 
	$gs_gzÎ_£t_ba£_add»ss1
(
gs_Äf_deviû
 *
d
)

137 
gs_´x
 *
´x
 = 
	`g_gs_´x
();

138 
gs_twis_»g
 *
»g
 = 
´x
->
twis
.
»gba£
;

139 
ut8_t
 
ba£_add»ss1
[] = 
GS_DEFAULT_BASE_ADDRESS_1
;

141 iàÐ
»g
 ) {

143 ià(
»g
->
ho¡_ba£_addr0
[0]) {

144 
	`memýy
(
ba£_add»ss1
,
»g
->
ho¡_ba£_addr1
,(base_address1));

148  
	`Äf_gzÎ_£t_ba£_add»ss_1
(
ba£_add»ss1
);

149 
	}
}

152 
ut32_t
 
	$gs_gzÎ_£t_chªÃl_bË
()

154 
ut8_t
 
chªÃl_bË
[] = 
GS_DEFAULT_CHANNEL_TABLE
;

155 
ut8_t
 
chÂum
 = 
GS_DEFAULT_CHNNUM
;

156 
gs_´x
 *
´x
 = 
	`g_gs_´x
();

157 
gs_twis_»g
 *
»g
 = 
´x
->
twis
.
»gba£
;

159 iàÐ
»g
 ) {

161 ià(
»g
->
ho¡_chn_bË
[0] &&eg->host_chn_table[0] != 0xff) {

162 
	`memýy
(
chªÃl_bË
,
»g
->
ho¡_chn_bË
,(channel_table));

165 ià(
»g
->
ho¡_chn_£t
 &&eg->host_chn_set != 0xff) {

166 
tmp
 = 0;

167 
chÂum
 = 
»g
->
ho¡_chn_£t
;

168 
tmp
 = 0 ;m°< 
chÂum
;mp++) {

169 
	`NRF_LOG_ERROR
("Nrf set host channel %d = %d",\

170 
tmp
,
chªÃl_bË
[tmp]);

175  
	`Äf_gzÎ_£t_chªÃl_bË
(
chªÃl_bË
,
chÂum
);

176 
	}
}

178 
	$Äf_gzÎ_di§bËd
()

180 
	}
}

182 
	$gs_gzÎ_di§bË
()

184 if(
	`Äf_gzÎ_is_abËd
())

186 
	`Äf_gzÎ_di§bË
();

188 
	}
}

190 
ut32_t
 
	$gs_gzÎ_abËd
()

192  
	`Äf_gzÎ_is_abËd
();

193 
	}
}

195 
ut32_t
 
	$gs_gzÎ_abË
()

197 
ut32_t
 
r_code
 = 0;

198 if(!
	`Äf_gzÎ_is_abËd
())

200 
r_code
 = 
	`Äf_gzÎ_abË
();

202  
r_code
;

203 
	}
}

205 
ut32_t
 
	$gs_gzÎ_
()

208 
boÞ
 
»suÉ_v®ue
 = 
	`Äf_gzÎ_
(
NRF_GZLL_MODE_HOST
);

209 
	`GAZELLE_ERROR_CODE_CHECK
(
»suÉ_v®ue
);

220 
	`gs_gzÎ_£t_chªÃl_bË
();

223 
»suÉ_v®ue
 = 
	`Äf_gzÎ_abË
();

224 
	`GAZELLE_ERROR_CODE_CHECK
(
»suÉ_v®ue
);

226 
	`NRF_LOG_INFO
("gsrf gzll start!.");

228 
	}
}

	@gs_prx.h

7 #iâdeà
__GS_PRX_H__


8 
	#__GS_PRX_H__


	)

10 
	~"gs_twis.h
"

11 
	~"gs_¥is.h
"

12 
	~"gs_gpio.h
"

13 
	~"gs_rf.h
"

14 
	~"gs_tim.h
"

15 
	~"gs_rgbuf.h
"

16 
	~"gs_æash.h
"

17 
	e´x_cmd
 {

18 
	mNRFCMD_UNKNOWN
 = 0,

19 
	mNRFCMD_DISCONNECT
 = 1,

22 
	sdeviû_fo
 {

23 
boÞ
 
	msync
;

24 
ut8_t
 
	mpe
;

25 
ut8_t
 
	mch¬ge
;

26 
ut8_t
 
	mb©ry_h
;

27 
ut8_t
 
	mb©ry_l
;

28 
ut8_t
 
	mcÚÃù
;

29 
ut8_t
 
	mh¹bt
;

33 
	sgs_´x
 {

34 
ut8_t
 
	mcmd¬g
;

35 
ut8_t
 
	mcmdv®
;

36 vÞ©
ut8_t
 
	mh¹bt
;

37 
gs_¥is
 
	m¥is
;

38 
gs_twis
 
	mtwis
;

39 
gs_gpios
 
	mgpio
;

40 
gs_Äf_deviû
 
	mÄf
;

41 
gs_æash
 
	mæash
;

42 
gs_tim
 
	mtim
;

43 
ut8_t
 
	mdevút
;

45 *
	mvsiÚ
;

46 
deviû_fo
 *
	mdevli¡
;

47 (*
	m¥is_xãr
è(*
	mcÚx
);

48 }
	tgs_´x_t
;

50 
gs_´x
 
g_´x
;

	@gs_rf.h

8 #iâdeà
__GS_RF_H__


9 
	#__GS_RF_H__


	)

11 
	#GS_DEFAULT_BASE_ADDRESS_0
 {'G','S','R','F'}

	)

12 
	#GS_DEFAULT_BASE_ADDRESS_1
 {'A','B','C','D'}

	)

13 
	#GS_DEFAULT_ADDR_PREFIX
 {0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8}

	)

14 
	#GS_DEFAULT_CHANNEL_TABLE
 {79,2,77,4}

	)

15 
	#GS_DEFAULT_CHNNUM
 4

	)

17 
	sgs_Äf_deviû
 {

18 
ut8_t
 
	mba£addr0
[8];

19 
ut8_t
 
	mba£addr1
[8];

20 
ut8_t
 
	m´efix
[8];

21 
ut8_t
 
	mchªÃl_bË
[10];

22 
ut8_t
 
	mchªÃl_£t
;

26 
gs_rf_di§bË
();

27 
ut32_t
 
gs_rf_
();

28 
ut32_t
 
gs_rf_abË
();

29 
ut32_t
 
gs_rf_abËd
();

30 
gs_rf_þn_txfifo
(
ut32_t
 
pe
);

31 
gs_rf_þn_rxfifo
(
ut32_t
 
pe
);

32 
ut32_t
 
gs_£t_ba£_add»ss0
(
gs_Äf_deviû
 *
´x
);

33 
ut32_t
 
gs_£t_ba£_add»ss1
(
gs_Äf_deviû
 *
´x
);

34 
ut32_t
 
gs_rf_£t_chªÃl_bË
(
gs_Äf_deviû
 *
´x
);

35 
ut32_t
 
gs_rf_£t_´efix_bË
(
gs_Äf_deviû
 *
´x
);

36 
boÞ
 
gs_rf_£t_rx_pe_abËd
(
ut32_t
 
pes
);

	@gs_ringbuf.h

7 #iâdeà
__gs_rgbuf_H__


8 
	#__gs_rgbuf_H__


	)

10 
	#RF_GZLL_PAYLOAD_SIZE
 32

	)

11 
	#PAYLOAD_COUNT_PERPACKET
 7

	)

12 
	#GS_DEFAULT_RXRINGBUF_COUNT
 3

	)

13 
	#GS_DEFAULT_TXRINGBUF_COUNT
 10

	)

14 
	#GS_DEFAULT_DEVICE_NUMBER
 8

	)

16 
	#GS_SPI_HEAD_START
 0xab

	)

17 
	#GS_SPI_HEAD_LENGTH
 3

19 
	#GS_DEFAULT_SAMPLE_UNIT
 32

	)

20 
	#GS_DEFAULT_SAMPLE_COUNT
 7

	)

23 
	ergbuf_¡©us
 {

24 
	mBUF_FREE
 = 0,

25 
	mBUF_IN_RF
 = 1,

26 
	mBUF_OUT_RF
 = 2,

27 
	mBUF_IN_SPI
 = 4,

30 
	s¥is_·ck
{

31 
ut8_t
 *
	maddr
;

32 
ut8_t
 *
	m¡¬t
;

33 
ut8_t
 *
	mty³
;

34 
ut8_t
 *
	mdevid
;

35 
ut8_t
 
	mdex
;

36 
ut8_t
 
	m¡©us
;

37 
ut8_t
 
	mavaed
;

38 
ut8_t
 
	m»md
;

41 
	sgs_rgbuf
{

42 
ut8_t
 *
	mbuff
;

43 
ut8_t
 
	mtx_dex
;

44 
ut8_t
 
	mrx_dex
;

45 
ut8_t
 
	m¥is_·ck_couÁ
;

46 
ut8_t
 
	m¥is_·ck_size
;

47 
¥is_·ck
 *
	mcu¼t
;

48 
¥is_·ck
 *
	m·ckli¡
;

51 
	sgs_¿mbuf
 {

52 
ut8_t
 
	mcouÁ
;

55 
gs_rgbuf
 *
gs_rgbuf_li¡
;

58 
¥is_·ck
 *
gs_rgbuf_g_rx·ck
(
gs_rgbuf
 *
rgbuf
);

59 
¥is_·ck
 *
gs_rgbuf_g_tx·ck
(
gs_rgbuf
 *
rgbuf
);

60 
ut8_t
 *
rf_»que¡_·ylßd_addr
(
gs_rgbuf
 *
rgbuf
,ut8_
size
);

61 
¥is_·ck_£t_¡©us
(
¥is_·ck
 *
·ck
,
rgbuf_¡©us
 
¡©us
);

62 
¥is_·ck_£t_hd
(
¥is_·ck
 *
·ck
,
ut8_t
 
ty³
,ut8_
devid
);

63 
t8_t
 
gs_rgbuf_g_txdex
(
gs_rgbuf
 *
rgbuf
);

64 
t8_t
 
gs_rgbuf_g_rxdex
(
gs_rgbuf
 *
rgbuf
);

65 
ut8_t
 
gs_rgbuf_g_·ck_size
(
gs_rgbuf
 *
rgbuf
);

66 
ut8_t
 
gs_rgbuf_g_·ck_avaed
(
gs_rgbuf
 *
rgbuf
);

67 
ut8_t
 
gs_rgbuf_g_·ck_couÁ
(
gs_rgbuf
 *
rgbuf
);

68 
ut8_t
 
gs_rgbuf_g_avaabe_couÁ
();

69 
ut8_t
 
gs_rgbuf_li¡_
(ut8_
couÁ
,ut8_
size
,ut8_
deviû
);

70 
gs_rgbuf
 *
gs_rgbuf_g_by_devid
(
ut8_t
 
devid
);

71 
gs_rgbuf_li¡_un
();

	@gs_spis.h

7 #iâdeà
__GS_SPIS_H__


8 
	#__GS_SPIS_H__


	)

9 
	~"Äf_drv_¥is.h
"

11 
	eÄf_ty³
 {

12 
	mNRF_GZLL
 = 1,

13 
	mNRF_ESB


16 
	eGS_DEVICE_CMD_STATE
 {

17 
	mDEVICE_CMD_UNKNOWN
 = -1,

18 
	mDEVICE_CMD_START_RF
 = 0,

19 
	mDEVICE_CMD_STOP_RF
 = 1,

20 
	mDEVICE_CMD_START_I2S
 = 2,

21 
	mDEVICE_CMD_STOP_I2S
 = 3,

22 
	mDEVICE_CMD_RF_DATA
 = 4,

23 
	mDEVICE_CMD_I2S_DATA
 = 5,

26 
	eGS_SPIS_STATE
 {

27 
	mGS_SPIS_STATE_IDEL
 = -1,

28 
	mGS_SPIS_STATE_SETUP
 = (1 << 0),

29 
	mGS_SPIS_STATE_RXCMD
 = (1 << 1),

30 
	mGS_SPIS_STATE_AUDIO
 = (1 << 2),

33 
	#GS_SPIS_INSTANCE
 1

	)

34 
	#GS_SPIS_MAX_LENGTH
 256

	)

35 
	#GS_SPIS_SCK_PIN
 15

	)

36 
	#GS_SPIS_MOSI_PIN
 17

	)

37 
	#GS_SPIS_MISO_PIN
 16

	)

38 
	#GS_SPIS_CSN_PIN
 19

	)

39 
	#GS_SPIS_DEFAULT_DEF_CHARACTER
 0x55

	)

40 
	#GS_SPIS_DEFAULT_ORC_CHARACTER
 0xAA

	)

41 
	#GS_SPIS_IRQ_PRIORITY_LEVEL
 2

	)

43 
	sgs_¥is_cmdle
 {

44 
ut8_t
 
	mhd
[2];

45 
ut8_t
 
	mcmd
;

46 
ut8_t
 
	mday
;

47 
ut8_t
 
	m·ylßd_Ën
;

48 
ut8_t
 
	m·ylßd_d©a
[128];

51 
	s¥is_cÚfig
 {

52 
ut8_t
 
	mmiso
;

53 
ut8_t
 
	mmosi
;

54 
ut8_t
 
	msck
;

55 
ut8_t
 
	mc¢
;

56 
ut8_t
 
	mmode
;

57 
ut8_t
 
	mdef
;

58 
ut8_t
 
	mÜc
;

59 
ut8_t
 
	m´iÜy
;

62 
	sgs_¥is
 {

63 
ut8_t
 
	m¡©e
;

64 
ut8_t
 
	mcmd
;

66 
boÞ
 
	mxãr_dÚe
;

67 
boÞ
 
	m¥is_lock
;

69 
ut8_t
 *
	mrx_±r
;

70 
ut8_t
 *
	mtx_±r
;

71 
ut8_t
 
	mËngth
;

72 
ut8_t
 
	mtx_buf
[
GS_SPIS_MAX_LENGTH
];

73 
ut8_t
 
	mrx_buf
[
GS_SPIS_MAX_LENGTH
];

75 
Äf_drv_¥is_t
 
	m¥is
;

76 
¥is_cÚfig
 
	mcÚfig
;

77 
¥is_·ck
 *
	mtx·ck
;

79 (*
	mxãr_ÿÎback
)(*
	mcÚx
);

82 
ut32_t
 
gs_¥is_
(
gs_¥is
 *
sdev
);

83 
gs_¥is_£nd_·ck
();

84 
gs_¥is_¡¬t_audio
();

85 
gs_¥is_¡Ý_audio
(
ut8_t
 
¦p
);

	@gs_timer.h

8 #iâdeà
__GS_TIMER_H__


9 
	#__GS_TIMER_H__


	)

11 
	~"Äf.h
"

12 
	~"sdk_commÚ.h
"

13 
	~"Äf_tim.h
"

14 
	~"Äf_drv_tim.h
"

16 
	#SPIS_TX_PERIOD
 1

	)

17 
	#RF_STATISTICS_PERIOD
 1000

	)

19 
	#GS_RF_TIMER_INSTANCE
 1

	)

20 
	#GS_SPIS_TIMER_INSTANCE
 2

	)

22 vÞ©
ut32_t
 
gs_rf_drÝ_·cks_tÙ®
;

23 vÞ©
ut32_t
 
rf_»cived_bys_³r_£c
;

24 vÞ©
ut32_t
 
pe_»cived_bys_³r_£c
[8];

25 (*
	tsk_ÿÎback
)(*
	tcÚx
);

27 
	sgs_tim
 {

28 
boÞ
 
abË
;

29 
ut32_t
 
³riod
;

30 
ut32_t
 
ticks
;

31 
ut32_t
 
ticks_couÁ
;

32 
ut32_t
 
sk_day
;

33 
Äf_drv_tim_t
 
dev
;

34 *
cÚx
;

35 (*
ÿÎback
)(*
cÚx
);

38 
	`gs_tim_di§bË
();

39 
	`gs_tim_abË
();

40 
	`gs_£t_day_sk
(
sk_ÿÎback
 
ÿÎback
,*
cÚx
,
ut32_t
 
day
);

41 
	`gs_­p_tim_
(
gs_tim
 *
tim
);

42 
	`gs_­p_tim_un
(
gs_tim
 *
tim
);

	@gs_twis.h

8 #iâdeà
__GS_TWIS_H__


9 
	#__GS_TWIS_H__


	)

11 
	~"Äf_drv_twis.h
"

14 
	#GS_TWIS_INSTANCE
 0

	)

15 
	#GS_DEFAULT_TWIS_ADDR
 0x30

	)

16 
	#GS_DEFAULT_TWIS_SCL
 13

	)

17 
	#GS_DEFAULT_TWIS_SDA
 14

	)

18 
	#GS_DEFAULT_TWIS_PRIORITY
 6

	)

19 
	#TWIS_MAX_PAYLOAD_LENGTH
 128

	)

23 
	sgs_twis_»g
{

25 
	#NRF_DEVICE_PID
 0x00

	)

26 
	mdeviû_pid
;

27 
	#NRF_DEVICE_VID
 0x01

	)

28 
	mdeviû_vid
;

29 
	#NRF_DEVICE_SID
 0x02

	)

30 
	mdeviû_sid
;

31 
	#NRF_FLASH_INIT
 0x03

	)

32 
	mæash_
;

33 
	#NRF_DEVICE_CNNT
 0x04

	)

34 
	mcÚÃù
;

35 
	#NRF_DEVICE_DISC
 0x05

	)

36 
	mdiscÚÃù
;

37 
	#NRF_DEVICE_VER
 0x06

	)

38 
	mvsiÚ
[6];

39 
	m»sved
[4];

42 
	#NRF_SYSTEM_CTRL
 0x10

	)

43 
	#NRF_SYSTEM_START
 (1 << 0)

	)

44 
	#NRF_SYSTEM_UPDATE
 (1 << 1)

	)

45 
	#NRF_SYSTEM_ERASE
 (1 << 7)

	)

46 
	msy¡em_ù¾
;

47 
	#NRF_SYSTEM_STATE
 0x11

	)

48 
	msy¡em_¡©e
;

49 
	#NRF_SYSTEM_TYPE
 0x12

	)

50 
	msy¡em_§mty³
;

51 
	msy¡em_»sv
[13];

54 
	#NRF_DEVICE_BATINFO
 0x20

	)

55 
	mb©fo
[8];

56 
	#NRF_DEVICE_BATSTATE
 0x30

	)

57 
	mb©¡©e
[8];

58 
	mb©_rsv
[8];

61 
	#NRF_USER_DEFINE1
 0x40

	)

62 
	mm³d_rsv
[32];

64 
	#NRF_SAVED_REG_OFFSET
 0x60

	)

66 
	#NRF_HOST_RBCNT
 0x60

	)

67 
	mrgbuf_couÁ
;

68 
	#NRF_HOST_SPUNIT
 0x61

	)

69 
	m§m¶e_un
;

70 
	#NRF_HOST_SPCNT
 0x62

	)

71 
	m§m¶e_couÁ
;

72 
	#NRF_HOST_DEVCNT
 0x63

	)

73 
	mdeviû_couÁ
;

74 
	#NRF_HOST_ADDR0
 0x64

	)

75 
	mho¡_ba£_addr0
[4];

76 
	#NRF_HOST_ADDR1
 0x68

	)

77 
	mho¡_ba£_addr1
[4];

78 
	#NRF_HOST_PREFIX
 0x6c

	)

79 
	mho¡_addr_´efix
[8];

80 
	#NRF_HOST_RESV
 0x74

	)

81 
	mho¡_»sv
[12];

84 
	#NRF_HOST_CHNTAB
 0x80

	)

85 
	mho¡_chn_bË
[10];

86 
	#NRF_HOST_CHNSET
 0x8a

	)

87 
	mho¡_chn_£t
;

88 
	mho¡_chn_rsv
[5];

90 
	#NRF_HOST_PARINFO
 0x90

	)

91 
	m·rfo
[32];

93 
	#NRF_USER_DEFINE2
 0xb0

	)

94 
	m»sv
[80];

97 
	stwis_cÚfig
 {

98 
ut8_t
 
	maddr
;

99 
ut8_t
 
	msþ
;

100 
ut8_t
 
	msda
;

101 
ut8_t
 
	m´iÜy
;

104 
	esy¡em_¡©us
 {

105 
	mNRF_SYSTEM_STATUS_OFF
,

106 
	mNRF_SYSTEM_STATUS_ON
,

107 
	mNRF_SYSTEM_STATUS_UPDATE
,

110 
	sgs_twis
 {

111 
	mr
;

112 
	mrw
;

113 
	m»g
;

114 
	m¡©us
;

115 
Äf_drv_twis_t
 
	mtwis
;

116 
gs_twis_»g
 *
	m»gli¡
;

117 
twis_cÚfig
 
	mcÚfig
;

118 
gs_twis_»g
 *
	m»gba£
;

119 
	mrwbuf
[
TWIS_MAX_PAYLOAD_LENGTH
];

122 
ut32_t
 
gs_twis_
(
gs_twis
 *);

	@/usr/include/alloca.h

18 #iâdef 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<ã©u»s.h
>

23 
	#__Ãed_size_t


	)

24 
	~<¡ddef.h
>

26 
	g__BEGIN_DECLS


29 #undeà
®loÿ


32 *
	$®loÿ
 (
size_t
 
__size
è
__THROW
;

34 #ifdef 
__GNUC__


35 
	#®loÿ
(
size
è
	`__but_®loÿ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/stdlib-bsearch.h

19 
__exº_le
 *

20 
	$b£¬ch
 (cÚ¡ *
__key
, cÚ¡ *
__ba£
, 
size_t
 
__nmemb
, size_
__size
,

21 
__com·r_â_t
 
__com·r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 cÚ¡ *
__p
;

25 
__com·risÚ
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*è(((cÚ¡ *è
__ba£
è+ (
__idx
 * 
__size
));

33 
__com·risÚ
 = (*
__com·r
è(
__key
, 
__p
);

34 ià(
__com·risÚ
 < 0)

35 
__u
 = 
__idx
;

36 ià(
__com·risÚ
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*è
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #iâdeà
_STDLIB_H


23 #ifdeà
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exº_le
 

26 
__NTH
 (
	$©of
 (cÚ¡ *
__Å
))

28  
	`¡¹od
 (
__Å
, (**è
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #iâdeà
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
¡¹Þd
, 
¡¹od
)

26 
__END_NAMESPACE_C99


29 #ifdeà
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
¡¹Þd_l
, 
¡¹od_l
)

33 #ifdeà
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #iâdeà
_STDLIB_H


23 *
	$__»®·th_chk
 (cÚ¡ *
__»¡riù
 
__Çme
,

24 *
__»¡riù
 
__»sÞved
,

25 
size_t
 
__»sÞvedËn
è
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__»®·th_®s
,

27 (cÚ¡ *
__»¡riù
 
__Çme
,

28 *
__»¡riù
 
__»sÞved
), 
»®·th
è
__wur
;

29 *
	`__REDIRECT_NTH
 (
__»®·th_chk_w¬n
,

30 (cÚ¡ *
__»¡riù
 
__Çme
,

31 *
__»¡riù
 
__»sÞved
,

32 
size_t
 
__»sÞvedËn
), 
__»®·th_chk
è
__wur


33 
	`__w¬Çr
 ("secondrgument ofealpath must beither NULL ort "

36 
__fÜtify_funùiÚ
 
__wur
 *

37 
	`__NTH
 (
	$»®·th
 (cÚ¡ *
__»¡riù
 
__Çme
, *__»¡riù 
__»sÞved
))

39 ià(
	`__bos
 (
__»sÞved
è!ð(
size_t
) -1)

41 #ià
defed
 
_LIBC_LIMITS_H_
 && defed 
PATH_MAX


42 ià(
	`__bos
 (
__»sÞved
è< 
PATH_MAX
)

43  
	`__»®·th_chk_w¬n
 (
__Çme
, 
__»sÞved
, 
	`__bos
 (__resolved));

45  
	`__»®·th_chk
 (
__Çme
, 
__»sÞved
, 
	`__bos
 (__resolved));

48  
	`__»®·th_®s
 (
__Çme
, 
__»sÞved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buæ
,

53 
size_t
 
__Äl
è
__THROW
 
	`__nÚnuÎ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_®s
, (
__fd
, *
__buf
,

55 
size_t
 
__buæ
), 
±¢ame_r
)

56 
	`__nÚnuÎ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¬n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buæ
,

59 
size_t
 
__Äl
), 
__±¢ame_r_chk
)

60 
	`__nÚnuÎ
 ((2)è
	`__w¬Çr
 ("ptsname_r called with buflen biggerhan "

63 
__fÜtify_funùiÚ
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buæ
))

66 ià(
	`__bos
 (
__buf
è!ð(
size_t
) -1)

68 ià(!
	`__but_cÚ¡ªt_p
 (
__buæ
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buæ
, 
	`__bos
 (__buf));

70 ià(
__buæ
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¬n
 (
__fd
, 
__buf
, 
__buæ
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_®s
 (
__fd
, 
__buf
, 
__buæ
);

74 
	}
}

77 
	$__wùomb_chk
 (*
__s
, 
wch¬_t
 
__wch¬
, 
size_t
 
__buæ
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__wùomb_®s
, (*
__s
, 
wch¬_t
 
__wch¬
),

80 
wùomb
è
__wur
;

82 
__fÜtify_funùiÚ
 
__wur
 

83 
	`__NTH
 (
	$wùomb
 (*
__s
, 
wch¬_t
 
__wch¬
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #ià
defed
 
MB_LEN_MAX
 && MB_LEN_MAX !ð
__STDLIB_MB_LEN_MAX


92 ià(
	`__bos
 (
__s
è!ð(
size_t
è-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__wùomb_chk
 (
__s
, 
__wch¬
, 
	`__bos
 (__s));

94  
	`__wùomb_®s
 (
__s
, 
__wch¬
);

95 
	}
}

98 
size_t
 
	$__mb¡owcs_chk
 (
wch¬_t
 *
__»¡riù
 
__d¡
,

99 cÚ¡ *
__»¡riù
 
__¤c
,

100 
size_t
 
__Ën
, size_
__d¡Ën
è
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb¡owcs_®s
,

102 (
wch¬_t
 *
__»¡riù
 
__d¡
,

103 cÚ¡ *
__»¡riù
 
__¤c
,

104 
size_t
 
__Ën
), 
mb¡owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb¡owcs_chk_w¬n
,

106 (
wch¬_t
 *
__»¡riù
 
__d¡
,

107 cÚ¡ *
__»¡riù
 
__¤c
,

108 
size_t
 
__Ën
, size_
__d¡Ën
), 
__mb¡owcs_chk
)

109 
	`__w¬Çr
 ("mbstowcs called with dst buffer smallerhanen "

112 
__fÜtify_funùiÚ
 
size_t


113 
	`__NTH
 (
	$mb¡owcs
 (
wch¬_t
 *
__»¡riù
 
__d¡
, cÚ¡ *__»¡riù 
__¤c
,

114 
size_t
 
__Ën
))

116 ià(
	`__bos
 (
__d¡
è!ð(
size_t
) -1)

118 ià(!
	`__but_cÚ¡ªt_p
 (
__Ën
))

119  
	`__mb¡owcs_chk
 (
__d¡
, 
__¤c
, 
__Ën
,

120 
	`__bos
 (
__d¡
è/  (
wch¬_t
));

122 ià(
__Ën
 > 
	`__bos
 (
__d¡
è/  (
wch¬_t
))

123  
	`__mb¡owcs_chk_w¬n
 (
__d¡
, 
__¤c
, 
__Ën
,

124 
	`__bos
 (
__d¡
è/  (
wch¬_t
));

126  
	`__mb¡owcs_®s
 (
__d¡
, 
__¤c
, 
__Ën
);

127 
	}
}

130 
size_t
 
	$__wc¡ombs_chk
 (*
__»¡riù
 
__d¡
,

131 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
,

132 
size_t
 
__Ën
, size_
__d¡Ën
è
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc¡ombs_®s
,

134 (*
__»¡riù
 
__d¡
,

135 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
,

136 
size_t
 
__Ën
), 
wc¡ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc¡ombs_chk_w¬n
,

138 (*
__»¡riù
 
__d¡
,

139 cÚ¡ 
wch¬_t
 *
__»¡riù
 
__¤c
,

140 
size_t
 
__Ën
, size_
__d¡Ën
), 
__wc¡ombs_chk
)

141 
	`__w¬Çr
 ("wcstombs called with dst buffer smallerhanen");

143 
__fÜtify_funùiÚ
 
size_t


144 
	`__NTH
 (
	$wc¡ombs
 (*
__»¡riù
 
__d¡
, cÚ¡ 
wch¬_t
 *__»¡riù 
__¤c
,

145 
size_t
 
__Ën
))

147 ià(
	`__bos
 (
__d¡
è!ð(
size_t
) -1)

149 ià(!
	`__but_cÚ¡ªt_p
 (
__Ën
))

150  
	`__wc¡ombs_chk
 (
__d¡
, 
__¤c
, 
__Ën
, 
	`__bos
 (__dst));

151 ià(
__Ën
 > 
	`__bos
 (
__d¡
))

152  
	`__wc¡ombs_chk_w¬n
 (
__d¡
, 
__¤c
, 
__Ën
, 
	`__bos
 (__dst));

154  
	`__wc¡ombs_®s
 (
__d¡
, 
__¤c
, 
__Ën
);

155 
	}
}

	@/usr/include/bits/string.h

19 #iâdeà
_STRING_H


24 
	#_STRING_INLINE_uÇligÃd
 1

	)

27 
	#_HAVE_STRING_ARCH_mempýy
 1

	)

31 #ià!
defed
 
__x86_64__
 && (defed 
__i486__
 || defed 
__³Áium__
 \

32 || 
defed
 
	g__³Áium´o__
 || defed 
	g__³Áium4__
 \

33 || 
defed
 
	g__nocÚa__
 || defed 
	g__©om__
 \

34 || 
defed
 
	g__cÜe2__
 || defed 
	g__cÜei7__
 \

35 || 
defed
 
	g__§ndybridge__
 || defed 
	g__haswl__
 \

36 || 
defed
 
	g__bÚÃÎ__
 || defed 
	g__svmÚt__
 \

37 || 
defed
 
	g__k6__
 || defed 
	g__geode__
 \

38 || 
defed
 
	g__k8__
 || defed 
	g__©hlÚ__
 \

39 || 
defed
 
	g__amdçm10__
 || defed 
	g__bdv1__
 \

40 || 
defed
 
	g__bdv2__
 || defed 
	g__bdv3__
 \

41 || 
defed
 
	g__bdv4__
 || defed 
	g__btv1__
 \

42 || 
defed
 
	g__btv2__
)

46 #ià!
defed
 
__NO_STRING_INLINES
 && defed 
__USE_STRING_INLINES
 \

47 && 
defed
 
	g__GNUC__
 && __GNUC__ >= 2

49 #iâdeà
__STRING_INLINE


50 #iâdeà
__exº_le


51 
	#__STRING_INLINE
 
le


	)

53 
	#__STRING_INLINE
 
__exº_le


	)

58 
	#__STRING_SMALL_GET16
(
¤c
, 
idx
) \

59 ((((cÚ¡ *è(
¤c
))[
idx
 + 1] << 8) \

60 | ((cÚ¡ *è(
¤c
))[
idx
])

	)

61 
	#__STRING_SMALL_GET32
(
¤c
, 
idx
) \

62 (((((cÚ¡ *è(
¤c
))[
idx
 + 3] << 8 \

63 | ((cÚ¡ *è(
¤c
))[
idx
 + 2]) << 8 \

64 | ((cÚ¡ *è(
¤c
))[
idx
 + 1]) << 8 \

65 | ((cÚ¡ *è(
¤c
))[
idx
])

	)

69 
	#_HAVE_STRING_ARCH_memýy
 1

	)

70 
	#memýy
(
de¡
, 
¤c
, 
n
) \

71 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
n
) \

72 ? 
	`__memýy_c
 ((
de¡
), (
¤c
), (
n
)) \

73 : 
	`__memýy_g
 ((
de¡
), (
¤c
), (
n
))))

	)

74 
	#__memýy_c
(
de¡
, 
¤c
, 
n
) \

75 ((
n
) == 0 \

76 ? (
de¡
) \

77 : (((
n
) % 4 == 0) \

78 ? 
	`__memýy_by4
 (
de¡
, 
¤c
, 
n
) \

79 : (((
n
) % 2 == 0) \

80 ? 
	`__memýy_by2
 (
de¡
, 
¤c
, 
n
) \

81 : 
	`__memýy_g
 (
de¡
, 
¤c
, 
n
))))

	)

83 
__STRING_INLINE
 *
__memýy_by4
 (*
__de¡
, cÚ¡ *
__¤c
,

84 
size_t
 
__n
);

86 
__STRING_INLINE
 *

87 
	$__memýy_by4
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
)

89 
__d0
, 
__d1
;

90 *
__tmp
 = 
__de¡
;

91 
__asm__
 
__vÞ©e__


99 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__¤c
), "=&r" (
__d1
)

100 : "1" (
__tmp
), "2" (
__¤c
), "3" (
__n
 / 4)

102  
__de¡
;

103 
	}
}

105 
__STRING_INLINE
 *
__memýy_by2
 (*
__de¡
, cÚ¡ *
__¤c
,

106 
size_t
 
__n
);

108 
__STRING_INLINE
 *

109 
	$__memýy_by2
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
)

111 
__d0
, 
__d1
;

112 *
__tmp
 = 
__de¡
;

113 
__asm__
 
__vÞ©e__


126 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__¤c
), "=&r" (
__d1
)

127 : "1" (
__tmp
), "2" (
__¤c
), "3" (
__n
 / 2)

129  
__de¡
;

130 
	}
}

132 
__STRING_INLINE
 *
__memýy_g
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
);

134 
__STRING_INLINE
 *

135 
	$__memýy_g
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
)

137 
__d0
, 
__d1
, 
__d2
;

138 *
__tmp
 = 
__de¡
;

139 
__asm__
 
__vÞ©e__


150 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

151 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__de¡
)

152 : "0" (
__n
), "1" (
__tmp
), "2" (
__¤c
),

153 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__¤c
)

155  
__de¡
;

156 
	}
}

158 
	#_HAVE_STRING_ARCH_memmove
 1

	)

159 #iâdeà
_FORCE_INLINES


162 
	#memmove
(
de¡
, 
¤c
, 
n
è
	`__memmove_g
 (de¡, src,)

	)

164 
__STRING_INLINE
 *
	$__memmove_g
 (*, cÚ¡ *, 
size_t
)

165 
	`__asm__
 ("memmove");

167 
__STRING_INLINE
 *

168 
	$__memmove_g
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
)

170 
__d0
, 
__d1
, 
__d2
;

171 *
__tmp
 = 
__de¡
;

172 ià(
__de¡
 < 
__¤c
)

173 
__asm__
 
__vÞ©e__


176 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

177 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__de¡
)

178 : "0" (
__n
), "1" (
__¤c
), "2" (
__tmp
),

179 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__¤c
));

181 
__asm__
 
__vÞ©e__


187 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

188 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__de¡
)

189 : "0" (
__n
), "1" (__À+ (cÚ¡ *è
__¤c
),

190 "2" (
__n
 + (*è
__tmp
),

191 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__¤c
));

192  
__de¡
;

193 
	}
}

197 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

198 #iâdeà
_FORCE_INLINES


199 #iâdeà
__PIC__


201 
__STRING_INLINE
 

202 
	$memcmp
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
, 
size_t
 
__n
)

204 
__d0
, 
__d1
, 
__d2
;

205 
__»s
;

206 
__asm__
 
__vÞ©e__


214 : "=&a" (
__»s
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

215 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

216 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s1
),

217 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s2
)

219  
__»s
;

220 
	}
}

225 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

226 
	#_USE_STRING_ARCH_mem£t
 1

	)

227 
	#mem£t
(
s
, 
c
, 
n
) \

228 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
n
) && (n) <= 16 \

229 ? ((
n
) == 1 \

230 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

231 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

232 : (
	`__but_cÚ¡ªt_p
 (
c
) \

233 ? (
	`__but_cÚ¡ªt_p
 (
n
) \

234 ? 
	`__mem£t_cú
 ((
s
), (
c
), (
n
)) \

235 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

236 : (
	`__but_cÚ¡ªt_p
 (
n
) \

237 ? 
	`__mem£t_gú
 ((
s
), (
c
), (
n
)) \

238 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

240 
	#__mem£t_c1
(
s
, 
c
è({ *
__s
 = (s); \

241 *((*è
__s
èð(è(
c
); \

242 
__s
; })

	)

244 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

245 ({ *
__s
 = (
s
); \

247 
__ui
; \

248 
__usi
; \

249 
__uc
; \

250 } *
__u
 = 
__s
; \

251 
__c
 = ((è((è(
c
))) * 0x01010101; \

257 ià((
n
) == 3 || (n) >= 5) \

258 
__asm__
 
	`__vÞ©e__
 ("" : "ô" (
__c
) : "0" (__c)); \

261 
n
) \

264 
__u
->
__ui
 = 
__c
; \

265 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

267 
__u
->
__ui
 = 
__c
; \

268 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

270 
__u
->
__ui
 = 
__c
; \

271 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

273 
__u
->
__usi
 = (è
__c
; \

274 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2); \

275 
__u
->
__uc
 = (è
__c
; \

279 
__u
->
__ui
 = 
__c
; \

280 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

288 
__u
->
__usi
 = (è
__c
; \

292 
__u
->
__ui
 = 
__c
; \

293 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

301 
__u
->
__uc
 = (è
__c
; \

305 
__u
->
__ui
 = 
__c
; \

306 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

308 
__u
->
__ui
 = 
__c
; \

309 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

311 
__u
->
__ui
 = 
__c
; \

312 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

314 
__u
->
__ui
 = 
__c
; \

319 
__s
; })

	)

321 
	#__mem£t_cú
(
s
, 
c
, 
n
) \

322 (((
n
) % 4 == 0) \

323 ? 
	`__mem£t_cú_by4
 (
s
, ((è((è(
c
))) * 0x01010101,\

324 
n
) \

325 : (((
n
) % 2 == 0) \

326 ? 
	`__mem£t_cú_by2
 (
s
, \

327 ((è((è(
c
))) * 0x01010101,\

328 
n
) \

329 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

331 
__STRING_INLINE
 *
__mem£t_cú_by4
 (*
__s
, 
__c
,

332 
size_t
 
__n
);

334 
__STRING_INLINE
 *

335 
	$__mem£t_cú_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

337 *
__tmp
 = 
__s
;

338 
__d0
;

339 #ifdeà
__i686__


340 
__asm__
 
__vÞ©e__


343 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

344 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

345 : "0" ((è
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

348 
__asm__
 
__vÞ©e__


354 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

355 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

356 : "0" ((è
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

359  
__s
;

360 
	}
}

362 
__STRING_INLINE
 *
__mem£t_cú_by2
 (*
__s
, 
__c
,

363 
size_t
 
__n
);

365 
__STRING_INLINE
 *

366 
	$__mem£t_cú_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

368 
__d0
, 
__d1
;

369 *
__tmp
 = 
__s
;

370 #ifdeà
__i686__


371 
__asm__
 
__vÞ©e__


375 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

376 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

377 : "0" ((è
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

380 
__asm__
 
__vÞ©e__


386 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

387 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

388 : "0" ((è
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

391  
__s
;

392 
	}
}

394 
	#__mem£t_gú
(
s
, 
c
, 
n
) \

395 (((
n
) % 4 == 0) \

396 ? 
	`__mem£t_gú_by4
 (
s
, 
c
, 
n
) \

397 : (((
n
) % 2 == 0) \

398 ? 
	`__mem£t_gú_by2
 (
s
, 
c
, 
n
) \

399 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

401 
__STRING_INLINE
 *
__mem£t_gú_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

403 
__STRING_INLINE
 *

404 
	$__mem£t_gú_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

406 *
__tmp
 = 
__s
;

407 
__d0
;

408 
__asm__
 
__vÞ©e__


418 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

419 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

420 : "0" ((è
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

422  
__s
;

423 
	}
}

425 
__STRING_INLINE
 *
__mem£t_gú_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

427 
__STRING_INLINE
 *

428 
	$__mem£t_gú_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

430 
__d0
, 
__d1
;

431 *
__tmp
 = 
__s
;

432 
__asm__
 
__vÞ©e__


443 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

444 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

445 : "0" ((è
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

447  
__s
;

448 
	}
}

452 
	#_HAVE_STRING_ARCH_memchr
 1

	)

453 #iâdeà
_FORCE_INLINES


454 
__STRING_INLINE
 *

455 
	$memchr
 (cÚ¡ *
__s
, 
__c
, 
size_t
 
__n
)

457 
__d0
;

458 #ifdeà
__i686__


459 
__d1
;

461 *
__»s
;

462 ià(
__n
 == 0)

463  
NULL
;

464 #ifdeà
__i686__


465 
__asm__
 
__vÞ©e__


469 : "=D" (
__»s
), "=&c" (
__d0
), "=&r" (
__d1
)

470 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

471 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

474 
__asm__
 
__vÞ©e__


480 : "=D" (
__»s
), "=&c" (
__d0
)

481 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

482 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

485  
__»s
 - 1;

486 
	}
}

489 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

490 #iâdeà
_FORCE_INLINES


491 
__STRING_INLINE
 *
__memrchr
 (cÚ¡ *
__s
, 
__c
, 
size_t
 
__n
);

493 
__STRING_INLINE
 *

494 
	$__memrchr
 (cÚ¡ *
__s
, 
__c
, 
size_t
 
__n
)

496 
__d0
;

497 #ifdeà
__i686__


498 
__d1
;

500 *
__»s
;

501 ià(
__n
 == 0)

502  
NULL
;

503 #ifdeà
__i686__


504 
__asm__
 
__vÞ©e__


510 : "=D" (
__»s
), "=&c" (
__d0
), "=&r" (
__d1
)

511 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

512 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

515 
__asm__
 
__vÞ©e__


522 : "=D" (
__»s
), "=&c" (
__d0
)

523 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

524 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s
)

527  
__»s
;

528 
	}
}

529 #ifdeà
__USE_GNU


530 
	#memrchr
(
s
, 
c
, 
n
è
	`__memrchr
 ((s), (c), (n))

	)

535 
	#_HAVE_STRING_ARCH_¿wmemchr
 1

	)

536 
__STRING_INLINE
 *
__¿wmemchr
 (cÚ¡ *
__s
, 
__c
);

538 #iâdeà
_FORCE_INLINES


539 
__STRING_INLINE
 *

540 
	$__¿wmemchr
 (cÚ¡ *
__s
, 
__c
)

542 
__d0
;

543 *
__»s
;

544 
__asm__
 
__vÞ©e__


547 : "=D" (
__»s
), "=&c" (
__d0
)

548 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

549 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

551  
__»s
 - 1;

552 
	}
}

553 #ifdeà
__USE_GNU


554 
__STRING_INLINE
 *

555 
	$¿wmemchr
 (cÚ¡ *
__s
, 
__c
)

557  
	`__¿wmemchr
 (
__s
, 
__c
);

558 
	}
}

564 
	#_HAVE_STRING_ARCH_¡¾
 1

	)

565 
	#¡¾
(
¡r
) \

566 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¡r
) \

567 ? 
	`__but_¡¾
 (
¡r
) \

568 : 
	`__¡¾_g
 (
¡r
)))

	)

569 
__STRING_INLINE
 
size_t
 
__¡¾_g
 (cÚ¡ *
__¡r
);

571 
__STRING_INLINE
 
size_t


572 
	$__¡¾_g
 (cÚ¡ *
__¡r
)

574 
__dummy
;

575 cÚ¡ *
__tmp
 = 
__¡r
;

576 
__asm__
 
__vÞ©e__


582 : "ô" (
__tmp
), "=&q" (
__dummy
)

583 : "0" (
__¡r
),

584 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__¡r
)

586  
__tmp
 - 
__¡r
 - 1;

587 
	}
}

591 
	#_HAVE_STRING_ARCH_¡rýy
 1

	)

592 
	#¡rýy
(
de¡
, 
¤c
) \

593 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
) \

594 ? ( ((
¤c
)[0]è=ð1 && 
	`¡¾
 (src) + 1 <= 8 \

595 ? 
	`__¡rýy_a_sm®l
 ((
de¡
), (
¤c
), 
	`¡¾
 (src) + 1) \

596 : (*è
	`memýy
 ((*è(
de¡
), \

597 (cÚ¡ *è(
¤c
), \

598 
	`¡¾
 (
¤c
) + 1)) \

599 : 
	`__¡rýy_g
 ((
de¡
), (
¤c
))))

	)

601 
	#__¡rýy_a_sm®l
(
de¡
, 
¤c
, 
¤þ
) \

602 (
	`__exnsiÚ__
 ({ *
__de¡
 = (
de¡
); \

604 
__ui
; \

605 
__usi
; \

606 
__uc
; \

607 
__c
; \

608 } *
__u
 = (*è
__de¡
; \

609 
¤þ
) \

612 
__u
->
__uc
 = '\0'; \

615 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
¤c
, 0); \

618 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
¤c
, 0); \

619 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2); \

620 
__u
->
__uc
 = '\0'; \

623 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

627 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

628 
__u
->
__uc
 = '\0'; \

631 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

632 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

633 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
¤c
, 4); \

636 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

637 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

638 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
¤c
, 4); \

639 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2); \

640 
__u
->
__uc
 = '\0'; \

643 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

644 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

645 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 4); \

648 (*è
__de¡
; }))

	)

650 
__STRING_INLINE
 *
__¡rýy_g
 (*
__de¡
, cÚ¡ *
__¤c
);

652 
__STRING_INLINE
 *

653 
	$__¡rýy_g
 (*
__de¡
, cÚ¡ *
__¤c
)

655 *
__tmp
 = 
__de¡
;

656 
__dummy
;

657 
__asm__
 
__vÞ©e__


666 : "=&r" (
__¤c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

667 "=m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__de¡
)

668 : "0" (
__¤c
), "1" (
__tmp
),

669 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__¤c
)

671  
__de¡
;

672 
	}
}

675 #ifdeà
__USE_GNU


676 
	#_HAVE_STRING_ARCH_¡pýy
 1

	)

678 
	#__¡pýy
(
de¡
, 
¤c
) \

679 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
) \

680 ? (
	`¡¾
 (
¤c
) + 1 <= 8 \

681 ? 
	`__¡pýy_a_sm®l
 ((
de¡
), (
¤c
), 
	`¡¾
 (src) + 1) \

682 : 
	`__¡pýy_c
 ((
de¡
), (
¤c
), 
	`¡¾
 (src) + 1)) \

683 : 
	`__¡pýy_g
 ((
de¡
), (
¤c
))))

	)

684 
	#__¡pýy_c
(
de¡
, 
¤c
, 
¤þ
) \

685 ((
¤þ
) % 4 == 0 \

686 ? 
	`__mempýy_by4
 (
de¡
, 
¤c
, 
¤þ
) - 1 \

687 : ((
¤þ
) % 2 == 0 \

688 ? 
	`__mempýy_by2
 (
de¡
, 
¤c
, 
¤þ
) - 1 \

689 : 
	`__mempýy_byn
 (
de¡
, 
¤c
, 
¤þ
è- 1))

	)

692 
	#¡pýy
(
de¡
, 
¤c
è
	`__¡pýy
 ((de¡), (¤c))

	)

694 
	#__¡pýy_a_sm®l
(
de¡
, 
¤c
, 
¤þ
) \

695 (
	`__exnsiÚ__
 ({ union { \

696 
__ui
; \

697 
__usi
; \

698 
__uc
; \

699 
__c
; \

700 } *
__u
 = (*è(
de¡
); \

701 
¤þ
) \

704 
__u
->
__uc
 = '\0'; \

707 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
¤c
, 0); \

708 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 1); \

711 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
¤c
, 0); \

712 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2); \

713 
__u
->
__uc
 = '\0'; \

716 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

717 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 3); \

720 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

721 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

722 
__u
->
__uc
 = '\0'; \

725 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

726 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

727 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
¤c
, 4); \

728 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 1); \

731 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

732 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

733 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
¤c
, 4); \

734 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2); \

735 
__u
->
__uc
 = '\0'; \

738 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 0); \

739 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

740 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
¤c
, 4); \

741 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 3); \

744 (*è
__u
; }))

	)

746 
__STRING_INLINE
 *
__mempýy_by4
 (*
__de¡
, cÚ¡ *
__¤c
,

747 
size_t
 
__¤þ
);

749 
__STRING_INLINE
 *

750 
	$__mempýy_by4
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__¤þ
)

752 *
__tmp
 = 
__de¡
;

753 
__d0
, 
__d1
;

754 
__asm__
 
__vÞ©e__


762 : "=&r" (
__d0
), "ô" (
__tmp
), "=&r" (
__¤c
), "=&r" (
__d1
)

763 : "1" (
__tmp
), "2" (
__¤c
), "3" (
__¤þ
 / 4)

765  
__tmp
;

766 
	}
}

768 
__STRING_INLINE
 *
__mempýy_by2
 (*
__de¡
, cÚ¡ *
__¤c
,

769 
size_t
 
__¤þ
);

771 
__STRING_INLINE
 *

772 
	$__mempýy_by2
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__¤þ
)

774 *
__tmp
 = 
__de¡
;

775 
__d0
, 
__d1
;

776 
__asm__
 
__vÞ©e__


789 : "=&q" (
__d0
), "ô" (
__tmp
), "=&r" (
__¤c
), "=&r" (
__d1
),

790 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__de¡
)

791 : "1" (
__tmp
), "2" (
__¤c
), "3" (
__¤þ
 / 2),

792 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__¤c
)

794  
__tmp
 + 2;

795 
	}
}

797 
__STRING_INLINE
 *
__mempýy_byn
 (*
__de¡
, cÚ¡ *
__¤c
,

798 
size_t
 
__¤þ
);

800 
__STRING_INLINE
 *

801 
	$__mempýy_byn
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__¤þ
)

803 
__d0
, 
__d1
;

804 *
__tmp
 = 
__de¡
;

805 
__asm__
 
__vÞ©e__


816 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

817 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__de¡
)

818 : "0" (
__tmp
), "1" (
__¤þ
), "2" (
__¤c
),

819 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__¤c
)

821  
__tmp
;

822 
	}
}

824 
__STRING_INLINE
 *
__¡pýy_g
 (*
__de¡
, cÚ¡ *
__¤c
);

826 
__STRING_INLINE
 *

827 
	$__¡pýy_g
 (*
__de¡
, cÚ¡ *
__¤c
)

829 *
__tmp
 = 
__de¡
;

830 
__dummy
;

831 
__asm__
 
__vÞ©e__


840 : "=&r" (
__¤c
), "ô" (
__tmp
), "=&q" (
__dummy
),

841 "=m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__de¡
)

842 : "0" (
__¤c
), "1" (
__tmp
),

843 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__¤c
)

845  
__tmp
 - 1;

846 
	}
}

851 
	#_HAVE_STRING_ARCH_¡ºýy
 1

	)

852 
	#¡ºýy
(
de¡
, 
¤c
, 
n
) \

853 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
) \

854 ? ((
	`¡¾
 (
¤c
è+ 1 >ð((
size_t
è(
n
)) \

855 ? (*è
	`memýy
 ((*è(
de¡
), \

856 (cÚ¡ *è(
¤c
), 
n
) \

857 : 
	`__¡ºýy_cg
 ((
de¡
), (
¤c
), 
	`¡¾
 (¤cè+ 1, 
n
))) \

858 : 
	`__¡ºýy_gg
 ((
de¡
), (
¤c
), 
n
)))

	)

859 
	#__¡ºýy_cg
(
de¡
, 
¤c
, 
¤þ
, 
n
) \

860 (((
¤þ
) % 4 == 0) \

861 ? 
	`__¡ºýy_by4
 (
de¡
, 
¤c
, 
¤þ
, 
n
) \

862 : (((
¤þ
) % 2 == 0) \

863 ? 
	`__¡ºýy_by2
 (
de¡
, 
¤c
, 
¤þ
, 
n
) \

864 : 
	`__¡ºýy_byn
 (
de¡
, 
¤c
, 
¤þ
, 
n
)))

	)

866 
__STRING_INLINE
 *
__¡ºýy_by4
 (*
__de¡
, cÚ¡ 
__¤c
[],

867 
size_t
 
__¤þ
, size_
__n
);

869 
__STRING_INLINE
 *

870 
	$__¡ºýy_by4
 (*
__de¡
, cÚ¡ 
__¤c
[], 
size_t
 
__¤þ
, size_
__n
)

872 *
__tmp
 = 
__de¡
;

873 
__dummy1
, 
__dummy2
;

874 
__asm__
 
__vÞ©e__


882 : "=&r" (
__dummy1
), "ô" (
__tmp
), "=&r" (
__¤c
), "=&r" (
__dummy2
),

883 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__de¡
)

884 : "1" (
__tmp
), "2" (
__¤c
), "3" (
__¤þ
 / 4),

885 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__¤c
)

887 (è
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__¤þ
);

888  
__de¡
;

889 
	}
}

891 
__STRING_INLINE
 *
__¡ºýy_by2
 (*
__de¡
, cÚ¡ 
__¤c
[],

892 
size_t
 
__¤þ
, size_
__n
);

894 
__STRING_INLINE
 *

895 
	$__¡ºýy_by2
 (*
__de¡
, cÚ¡ 
__¤c
[], 
size_t
 
__¤þ
, size_
__n
)

897 *
__tmp
 = 
__de¡
;

898 
__dummy1
, 
__dummy2
;

899 
__asm__
 
__vÞ©e__


912 : "=&q" (
__dummy1
), "ô" (
__tmp
), "=&r" (
__¤c
), "=&r" (
__dummy2
),

913 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__de¡
)

914 : "1" (
__tmp
), "2" (
__¤c
), "3" (
__¤þ
 / 2),

915 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__¤c
)

917 (è
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__¤þ
);

918  
__de¡
;

919 
	}
}

921 
__STRING_INLINE
 *
__¡ºýy_byn
 (*
__de¡
, cÚ¡ 
__¤c
[],

922 
size_t
 
__¤þ
, size_
__n
);

924 
__STRING_INLINE
 *

925 
	$__¡ºýy_byn
 (*
__de¡
, cÚ¡ 
__¤c
[], 
size_t
 
__¤þ
, size_
__n
)

927 
__d0
, 
__d1
;

928 *
__tmp
 = 
__de¡
;

929 
__asm__
 
__vÞ©e__


940 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

941 "=m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__de¡
)

942 : "1" (
__¤þ
), "0" (
__tmp
),"2" (
__¤c
),

943 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__¤c
)

945 (è
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__¤þ
);

946  
__de¡
;

947 
	}
}

949 
__STRING_INLINE
 *
__¡ºýy_gg
 (*
__de¡
, cÚ¡ *
__¤c
,

950 
size_t
 
__n
);

952 
__STRING_INLINE
 *

953 
	$__¡ºýy_gg
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
)

955 *
__tmp
 = 
__de¡
;

956 
__dummy
;

957 ià(
__n
 > 0)

958 
__asm__
 
__vÞ©e__


974 : "=&r" (
__¤c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

975 : "0" (
__¤c
), "1" (
__tmp
), "3" (
__n
)

978  
__de¡
;

979 
	}
}

983 
	#_HAVE_STRING_ARCH_¡rÿt
 1

	)

984 
	#¡rÿt
(
de¡
, 
¤c
) \

985 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
) \

986 ? 
	`__¡rÿt_c
 ((
de¡
), (
¤c
), 
	`¡¾
 (src) + 1) \

987 : 
	`__¡rÿt_g
 ((
de¡
), (
¤c
))))

	)

989 
__STRING_INLINE
 *
__¡rÿt_c
 (*
__de¡
, cÚ¡ 
__¤c
[],

990 
size_t
 
__¤þ
);

992 
__STRING_INLINE
 *

993 
	$__¡rÿt_c
 (*
__de¡
, cÚ¡ 
__¤c
[], 
size_t
 
__¤þ
)

995 #ifdeà
__i686__


996 
__d0
;

997 *
__tmp
;

998 
__asm__
 
__vÞ©e__


1000 : "=D" (
__tmp
), "=&c" (
__d0
),

1001 "=m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__de¡
)

1002 : "0" (
__de¡
), "1" (0xffffffff), "a" (0),

1003 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__¤c
)

1005 --
__tmp
;

1007 *
__tmp
 = 
__de¡
;

1008 
__asm__
 
__vÞ©e__


1014 : "ô" (
__tmp
),

1015 "=m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__de¡
)

1016 : "0" (
__tmp
),

1017 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__¤þ
]; } *)
__¤c
)

1020 (è
	`memýy
 (
__tmp
, 
__¤c
, 
__¤þ
);

1021  
__de¡
;

1022 
	}
}

1024 
__STRING_INLINE
 *
__¡rÿt_g
 (*
__de¡
, cÚ¡ *
__¤c
);

1026 
__STRING_INLINE
 *

1027 
	$__¡rÿt_g
 (*
__de¡
, cÚ¡ *
__¤c
)

1029 *
__tmp
 = 
__de¡
;

1030 
__dummy
;

1031 
__asm__
 
__vÞ©e__


1044 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__¤c
),

1045 "=m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__de¡
)

1046 : "1" (
__tmp
), "2" (
__¤c
),

1047 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__¤c
)

1049  
__de¡
;

1050 
	}
}

1054 
	#_HAVE_STRING_ARCH_¡ºÿt
 1

	)

1055 
	#¡ºÿt
(
de¡
, 
¤c
, 
n
) \

1056 (
	`__exnsiÚ__
 ({ *
__de¡
 = (
de¡
); \

1057 
	`__but_cÚ¡ªt_p
 (
¤c
è&& __but_cÚ¡ªt_°(
n
) \

1058 ? (
	`¡¾
 (
¤c
è< ((
size_t
è(
n
)) \

1059 ? 
	`¡rÿt
 (
__de¡
, (
¤c
)) \

1060 : (*(*)
	`__mempýy
 (
	`¡rchr
 (
__de¡
, '\0'), \

1061 (cÚ¡ *è(
¤c
), \

1062 (
n
)èð0, 
__de¡
)) \

1063 : 
	`__¡ºÿt_g
 (
__de¡
, (
¤c
), (
n
)); }))

	)

1065 
__STRING_INLINE
 *
__¡ºÿt_g
 (*
__de¡
, cÚ¡ 
__¤c
[],

1066 
size_t
 
__n
);

1068 
__STRING_INLINE
 *

1069 
	$__¡ºÿt_g
 (*
__de¡
, cÚ¡ 
__¤c
[], 
size_t
 
__n
)

1071 *
__tmp
 = 
__de¡
;

1072 
__dummy
;

1073 #ifdeà
__i686__


1074 
__asm__
 
__vÞ©e__


1088 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__¤c
), "=&c" (
__n
)

1089 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__¤c
), "3" (0xffffffff)

1092 --
__tmp
;

1093 
__asm__
 
__vÞ©e__


1110 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__¤c
), "=&r" (
__n
)

1111 : "1" (
__tmp
), "2" (
__¤c
), "3" (
__n
)

1114  
__de¡
;

1115 
	}
}

1119 
	#_HAVE_STRING_ARCH_¡rcmp
 1

	)

1120 
	#¡rcmp
(
s1
, 
s2
) \

1121 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
s1
è&& __but_cÚ¡ªt_°(
s2
) \

1122 && ( ((
s1
)[0]è!ð1 || 
	`¡¾
 (s1) >= 4) \

1123 && ( ((
s2
)[0]è!ð1 || 
	`¡¾
 (s2) >= 4) \

1124 ? 
	`memcmp
 ((cÚ¡ *è(
s1
), (cÚ¡ *è(
s2
), \

1125 (
	`¡¾
 (
s1
è< sËÀ(
s2
) \

1126 ? 
	`¡¾
 (
s1
è: sËÀ(
s2
)) + 1) \

1127 : (
	`__but_cÚ¡ªt_p
 (
s1
) &&  ((s1)[0]) == 1 \

1128 &&  ((
s2
)[0]è=ð1 && 
	`¡¾
 (
s1
) < 4 \

1129 ? (
	`__but_cÚ¡ªt_p
 (
s2
) &&  ((s2)[0]) == 1 \

1130 ? 
	`__¡rcmp_cc
 ((cÚ¡ *è(
s1
), \

1131 (cÚ¡ *è(
s2
), \

1132 
	`¡¾
 (
s1
)) \

1133 : 
	`__¡rcmp_cg
 ((cÚ¡ *è(
s1
), \

1134 (cÚ¡ *è(
s2
), \

1135 
	`¡¾
 (
s1
))) \

1136 : (
	`__but_cÚ¡ªt_p
 (
s2
è&&  ((
s1
)[0]) == 1 \

1137 &&  ((
s2
)[0]è=ð1 && 
	`¡¾
 (s2) < 4 \

1138 ? (
	`__but_cÚ¡ªt_p
 (
s1
) \

1139 ? 
	`__¡rcmp_cc
 ((cÚ¡ *è(
s1
), \

1140 (cÚ¡ *è(
s2
), \

1141 
	`¡¾
 (
s2
)) \

1142 : 
	`__¡rcmp_gc
 ((cÚ¡ *è(
s1
), \

1143 (cÚ¡ *è(
s2
), \

1144 
	`¡¾
 (
s2
))) \

1145 : 
	`__¡rcmp_gg
 ((
s1
), (
s2
))))))

	)

1147 
	#__¡rcmp_cc
(
s1
, 
s2
, 
l
) \

1148 (
	`__exnsiÚ__
 ({ 
__»suÉ
 = (
s1
)[0] - (
s2
)[0]; \

1149 ià(
l
 > 0 && 
__»suÉ
 == 0) \

1151 
__»suÉ
 = (
s1
)[1] - (
s2
)[1]; \

1152 ià(
l
 > 1 && 
__»suÉ
 == 0) \

1154 
__»suÉ
 = (
s1
)[2] - (
s2
)[2]; \

1155 ià(
l
 > 2 && 
__»suÉ
 == 0) \

1156 
__»suÉ
 = (
s1
)[3] - (
s2
)[3]; \

1159 
__»suÉ
; }))

	)

1161 
	#__¡rcmp_cg
(
s1
, 
s2
, 
l1
) \

1162 (
	`__exnsiÚ__
 ({ cÚ¡ *
__s2
 = (
s2
); \

1163 
__»suÉ
 = (
s1
)[0] - 
__s2
[0]; \

1164 ià(
l1
 > 0 && 
__»suÉ
 == 0) \

1166 
__»suÉ
 = (
s1
)[1] - 
__s2
[1]; \

1167 ià(
l1
 > 1 && 
__»suÉ
 == 0) \

1169 
__»suÉ
 = (
s1
)[2] - 
__s2
[2]; \

1170 ià(
l1
 > 2 && 
__»suÉ
 == 0) \

1171 
__»suÉ
 = (
s1
)[3] - 
__s2
[3]; \

1174 
__»suÉ
; }))

	)

1176 
	#__¡rcmp_gc
(
s1
, 
s2
, 
l2
) \

1177 (
	`__exnsiÚ__
 ({ cÚ¡ *
__s1
 = (
s1
); \

1178 
__»suÉ
 = 
__s1
[0] - (
s2
)[0]; \

1179 ià(
l2
 > 0 && 
__»suÉ
 == 0) \

1181 
__»suÉ
 = 
__s1
[1] - (
s2
)[1]; \

1182 ià(
l2
 > 1 && 
__»suÉ
 == 0) \

1184 
__»suÉ
 = 
__s1
[2] - (
s2
)[2]; \

1185 ià(
l2
 > 2 && 
__»suÉ
 == 0) \

1186 
__»suÉ
 = 
__s1
[3] - (
s2
)[3]; \

1189 
__»suÉ
; }))

	)

1191 
__STRING_INLINE
 
__¡rcmp_gg
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
);

1193 
__STRING_INLINE
 

1194 
	$__¡rcmp_gg
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
)

1196 
__»s
;

1197 
__asm__
 
__vÞ©e__


1213 : "=q" (
__»s
), "=&r" (
__s1
), "=&r" (
__s2
)

1214 : "1" (
__s1
), "2" (
__s2
),

1215 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s1
),

1216 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s2
)

1218  
__»s
;

1219 
	}
}

1223 
	#_HAVE_STRING_ARCH_¡ºcmp
 1

	)

1224 
	#¡ºcmp
(
s1
, 
s2
, 
n
) \

1225 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
s1
è&& 
	`¡¾
 (s1è< ((
size_t
è(
n
)) \

1226 ? 
	`¡rcmp
 ((
s1
), (
s2
)) \

1227 : (
	`__but_cÚ¡ªt_p
 (
s2
è&& 
	`¡¾
 (s2è< ((
size_t
è(
n
))\

1228 ? 
	`¡rcmp
 ((
s1
), (
s2
)) \

1229 : 
	`__¡ºcmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1231 
__STRING_INLINE
 
__¡ºcmp_g
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
,

1232 
size_t
 
__n
);

1234 
__STRING_INLINE
 

1235 
	$__¡ºcmp_g
 (cÚ¡ *
__s1
, cÚ¡ *
__s2
, 
size_t
 
__n
)

1237 
__»s
;

1238 
__asm__
 
__vÞ©e__


1257 : "=q" (
__»s
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1258 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1259 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s1
),

1260 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__n
]; } *)
__s2
)

1262  
__»s
;

1263 
	}
}

1267 
	#_HAVE_STRING_ARCH_¡rchr
 1

	)

1268 
	#_USE_STRING_ARCH_¡rchr
 1

	)

1269 
	#¡rchr
(
s
, 
c
) \

1270 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
c
) \

1271 ? ((
c
) == '\0' \

1272 ? (*è
	`__¿wmemchr
 ((
s
), (
c
)) \

1273 : 
	`__¡rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1274 : 
	`__¡rchr_g
 ((
s
), (
c
))))

	)

1276 
__STRING_INLINE
 *
__¡rchr_c
 (cÚ¡ *
__s
, 
__c
);

1278 
__STRING_INLINE
 *

1279 
	$__¡rchr_c
 (cÚ¡ *
__s
, 
__c
)

1281 
__d0
;

1282 *
__»s
;

1283 
__asm__
 
__vÞ©e__


1293 : "ô" (
__»s
), "=&a" (
__d0
)

1294 : "0" (
__s
), "1" (
__c
),

1295 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1297  
__»s
;

1298 
	}
}

1300 
__STRING_INLINE
 *
__¡rchr_g
 (cÚ¡ *
__s
, 
__c
);

1302 
__STRING_INLINE
 *

1303 
	$__¡rchr_g
 (cÚ¡ *
__s
, 
__c
)

1305 
__d0
;

1306 *
__»s
;

1307 
__asm__
 
__vÞ©e__


1318 : "ô" (
__»s
), "=&a" (
__d0
)

1319 : "0" (
__s
), "1" (
__c
),

1320 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1322  
__»s
;

1323 
	}
}

1327 
	#_HAVE_STRING_ARCH_¡rchºul
 1

	)

1328 
	#__¡rchºul
(
s
, 
c
) \

1329 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
c
) \

1330 ? ((
c
) == '\0' \

1331 ? (*è
	`__¿wmemchr
 ((
s
), 
c
) \

1332 : 
	`__¡rchºul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1333 : 
	`__¡rchºul_g
 ((
s
), 
c
)))

	)

1335 
__STRING_INLINE
 *
__¡rchºul_c
 (cÚ¡ *
__s
, 
__c
);

1337 
__STRING_INLINE
 *

1338 
	$__¡rchºul_c
 (cÚ¡ *
__s
, 
__c
)

1340 
__d0
;

1341 *
__»s
;

1342 
__asm__
 
__vÞ©e__


1352 : "ô" (
__»s
), "=&a" (
__d0
)

1353 : "0" (
__s
), "1" (
__c
),

1354 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1356  
__»s
;

1357 
	}
}

1359 
__STRING_INLINE
 *
__¡rchºul_g
 (cÚ¡ *
__s
, 
__c
);

1361 
__STRING_INLINE
 *

1362 
	$__¡rchºul_g
 (cÚ¡ *
__s
, 
__c
)

1364 
__d0
;

1365 *
__»s
;

1366 
__asm__
 
__vÞ©e__


1377 : "ô" (
__»s
), "=&a" (
__d0
)

1378 : "0" (
__s
), "1" (
__c
),

1379 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1381  
__»s
;

1382 
	}
}

1383 #ifdeà
__USE_GNU


1384 
	#¡rchºul
(
s
, 
c
è
	`__¡rchºul
 ((s), (c))

	)

1388 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN_EXTENDED


1390 
	#_HAVE_STRING_ARCH_dex
 1

	)

1391 
	#dex
(
s
, 
c
) \

1392 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
c
) \

1393 ? 
	`__¡rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1394 : 
	`__¡rchr_g
 ((
s
), (
c
))))

	)

1399 
	#_HAVE_STRING_ARCH_¡¼chr
 1

	)

1400 
	#¡¼chr
(
s
, 
c
) \

1401 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
c
) \

1402 ? 
	`__¡¼chr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1403 : 
	`__¡¼chr_g
 ((
s
), (
c
))))

	)

1405 #ifdeà
__i686__


1406 
__STRING_INLINE
 *
__¡¼chr_c
 (cÚ¡ *
__s
, 
__c
);

1408 
__STRING_INLINE
 *

1409 
	$__¡¼chr_c
 (cÚ¡ *
__s
, 
__c
)

1411 
__d0
, 
__d1
;

1412 *
__»s
;

1413 
__asm__
 
__vÞ©e__


1421 : "=d" (
__»s
), "=&S" (
__d0
), "=&a" (
__d1
)

1422 : "0" (1), "1" (
__s
), "2" (
__c
),

1423 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1425  
__»s
 - 1;

1426 
	}
}

1428 
__STRING_INLINE
 *
__¡¼chr_g
 (cÚ¡ *
__s
, 
__c
);

1430 
__STRING_INLINE
 *

1431 
	$__¡¼chr_g
 (cÚ¡ *
__s
, 
__c
)

1433 
__d0
, 
__d1
;

1434 *
__»s
;

1435 
__asm__
 
__vÞ©e__


1444 : "=d" (
__»s
), "=&S" (
__d0
), "=&a" (
__d1
)

1445 : "0" (1), "1" (
__s
), "2" (
__c
),

1446 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1448  
__»s
 - 1;

1449 
	}
}

1451 
__STRING_INLINE
 *
__¡¼chr_c
 (cÚ¡ *
__s
, 
__c
);

1453 
__STRING_INLINE
 *

1454 
	$__¡¼chr_c
 (cÚ¡ *
__s
, 
__c
)

1456 
__d0
, 
__d1
;

1457 *
__»s
;

1458 
__asm__
 
__vÞ©e__


1468 : "=d" (
__»s
), "=&S" (
__d0
), "=&a" (
__d1
)

1469 : "0" (0), "1" (
__s
), "2" (
__c
),

1470 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1472  
__»s
;

1473 
	}
}

1475 
__STRING_INLINE
 *
__¡¼chr_g
 (cÚ¡ *
__s
, 
__c
);

1477 
__STRING_INLINE
 *

1478 
	$__¡¼chr_g
 (cÚ¡ *
__s
, 
__c
)

1480 
__d0
, 
__d1
;

1481 *
__»s
;

1482 
__asm__
 
__vÞ©e__


1493 : "ô" (
__»s
), "=&S" (
__d0
), "=&a" (
__d1
)

1494 : "0" (0), "1" (
__s
), "2" (
__c
),

1495 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1497  
__»s
;

1498 
	}
}

1502 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN_EXTENDED


1504 
	#_HAVE_STRING_ARCH_rdex
 1

	)

1505 
	#rdex
(
s
, 
c
) \

1506 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
c
) \

1507 ? 
	`__¡¼chr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1508 : 
	`__¡¼chr_g
 ((
s
), (
c
))))

	)

1514 
	#_HAVE_STRING_ARCH_¡rc¥n
 1

	)

1515 
	#¡rc¥n
(
s
, 
»jeù
) \

1516 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
»jeù
) &&  ((reject)[0]) == 1 \

1517 ? ((
»jeù
)[0] == '\0' \

1518 ? 
	`¡¾
 (
s
) \

1519 : ((
»jeù
)[1] == '\0' \

1520 ? 
	`__¡rc¥n_c1
 ((
s
), (((
»jeù
)[0] << 8) & 0xff00)) \

1521 : 
	`__¡rc¥n_cg
 ((
s
), (
»jeù
), 
	`¡¾
 (reject)))) \

1522 : 
	`__¡rc¥n_g
 ((
s
), (
»jeù
))))

	)

1524 
__STRING_INLINE
 
size_t
 
__¡rc¥n_c1
 (cÚ¡ *
__s
, 
__»jeù
);

1526 #iâdeà
_FORCE_INLINES


1527 
__STRING_INLINE
 
size_t


1528 
	$__¡rc¥n_c1
 (cÚ¡ *
__s
, 
__»jeù
)

1530 
__d0
;

1531 *
__»s
;

1532 
__asm__
 
__vÞ©e__


1541 : "ô" (
__»s
), "=&a" (
__d0
)

1542 : "0" (
__s
), "1" (
__»jeù
),

1543 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1545  (
__»s
 - 1è- 
__s
;

1546 
	}
}

1549 
__STRING_INLINE
 
size_t
 
__¡rc¥n_cg
 (cÚ¡ *
__s
, cÚ¡ 
__»jeù
[],

1550 
size_t
 
__»jeù_Ën
);

1552 
__STRING_INLINE
 
size_t


1553 
	$__¡rc¥n_cg
 (cÚ¡ *
__s
, cÚ¡ 
__»jeù
[], 
size_t
 
__»jeù_Ën
)

1555 
__d0
, 
__d1
, 
__d2
;

1556 cÚ¡ *
__»s
;

1557 
__asm__
 
__vÞ©e__


1568 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1569 : "0" (
__s
), "d" (
__»jeù
), "g" (
__»jeù_Ën
)

1571  (
__»s
 - 1è- 
__s
;

1572 
	}
}

1574 
__STRING_INLINE
 
size_t
 
__¡rc¥n_g
 (cÚ¡ *
__s
, cÚ¡ *
__»jeù
);

1575 #ifdeà
__PIC__


1577 
__STRING_INLINE
 
size_t


1578 
	$__¡rc¥n_g
 (cÚ¡ *
__s
, cÚ¡ *
__»jeù
)

1580 
__d0
, 
__d1
, 
__d2
;

1581 cÚ¡ *
__»s
;

1582 
__asm__
 
__vÞ©e__


1599 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1600 : "r" (
__»jeù
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1602  (
__»s
 - 1è- 
__s
;

1603 
	}
}

1605 
__STRING_INLINE
 
size_t


1606 
	$__¡rc¥n_g
 (cÚ¡ *
__s
, cÚ¡ *
__»jeù
)

1608 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1609 cÚ¡ *
__»s
;

1610 
__asm__
 
__vÞ©e__


1624 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1625 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__»jeù
), "b" (__reject)

1628  (
__»s
 - 1è- 
__s
;

1629 
	}
}

1635 
	#_HAVE_STRING_ARCH_¡r¥n
 1

	)

1636 
	#¡r¥n
(
s
, 
acû±
) \

1637 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
acû±
) &&  ((accept)[0]) == 1 \

1638 ? ((
acû±
)[0] == '\0' \

1639 ? ((è(
s
), 0) \

1640 : ((
acû±
)[1] == '\0' \

1641 ? 
	`__¡r¥n_c1
 ((
s
), (((
acû±
)[0] << 8 ) & 0xff00)) \

1642 : 
	`__¡r¥n_cg
 ((
s
), (
acû±
), 
	`¡¾
 (accept)))) \

1643 : 
	`__¡r¥n_g
 ((
s
), (
acû±
))))

	)

1645 #iâdeà
_FORCE_INLINES


1646 
__STRING_INLINE
 
size_t
 
__¡r¥n_c1
 (cÚ¡ *
__s
, 
__acû±
);

1648 
__STRING_INLINE
 
size_t


1649 
	$__¡r¥n_c1
 (cÚ¡ *
__s
, 
__acû±
)

1651 
__d0
;

1652 *
__»s
;

1654 
__asm__
 
__vÞ©e__


1660 : "ô" (
__»s
), "=&q" (
__d0
)

1661 : "0" (
__s
), "1" (
__acû±
),

1662 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
)

1664  (
__»s
 - 1è- 
__s
;

1665 
	}
}

1668 
__STRING_INLINE
 
size_t
 
__¡r¥n_cg
 (cÚ¡ *
__s
, cÚ¡ 
__acû±
[],

1669 
size_t
 
__acû±_Ën
);

1671 
__STRING_INLINE
 
size_t


1672 
	$__¡r¥n_cg
 (cÚ¡ *
__s
, cÚ¡ 
__acû±
[], 
size_t
 
__acû±_Ën
)

1674 
__d0
, 
__d1
, 
__d2
;

1675 cÚ¡ *
__»s
;

1676 
__asm__
 
__vÞ©e__


1687 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1688 : "0" (
__s
), "g" (
__acû±
), "g" (
__acû±_Ën
),

1691 "m" ( *(¡ruù { 
__x
[0xfffffff]; } *)
__s
),

1692 "m" ( *(¡ruù { 
__exnsiÚ__
 
__x
[
__acû±_Ën
]; } *)
__acû±
)

1694  (
__»s
 - 1è- 
__s
;

1695 
	}
}

1697 
__STRING_INLINE
 
size_t
 
__¡r¥n_g
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
);

1698 #ifdeà
__PIC__


1700 
__STRING_INLINE
 
size_t


1701 
	$__¡r¥n_g
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
)

1703 
__d0
, 
__d1
, 
__d2
;

1704 cÚ¡ *
__»s
;

1705 
__asm__
 
__vÞ©e__


1721 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1722 : "d" (
__acû±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1724  (
__»s
 - 1è- 
__s
;

1725 
	}
}

1727 
__STRING_INLINE
 
size_t


1728 
	$__¡r¥n_g
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
)

1730 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1731 cÚ¡ *
__»s
;

1732 
__asm__
 
__vÞ©e__


1746 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1747 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__acû±
), "b" (__accept)

1749  (
__»s
 - 1è- 
__s
;

1750 
	}
}

1755 
	#_HAVE_STRING_ARCH_¡½brk
 1

	)

1756 
	#¡½brk
(
s
, 
acû±
) \

1757 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
acû±
) &&  ((accept)[0]) == 1 \

1758 ? ((
acû±
)[0] == '\0' \

1759 ? ((è(
s
), (*) 0) \

1760 : ((
acû±
)[1] == '\0' \

1761 ? 
	`¡rchr
 ((
s
), (
acû±
)[0]) \

1762 : 
	`__¡½brk_cg
 ((
s
), (
acû±
), 
	`¡¾
 (accept)))) \

1763 : 
	`__¡½brk_g
 ((
s
), (
acû±
))))

	)

1765 
__STRING_INLINE
 *
__¡½brk_cg
 (cÚ¡ *
__s
, cÚ¡ 
__acû±
[],

1766 
size_t
 
__acû±_Ën
);

1768 
__STRING_INLINE
 *

1769 
	$__¡½brk_cg
 (cÚ¡ *
__s
, cÚ¡ 
__acû±
[], 
size_t
 
__acû±_Ën
)

1771 
__d0
, 
__d1
, 
__d2
;

1772 *
__»s
;

1773 
__asm__
 
__vÞ©e__


1788 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1789 : "0" (
__s
), "d" (
__acû±
), "g" (
__acû±_Ën
)

1791  
__»s
;

1792 
	}
}

1794 
__STRING_INLINE
 *
__¡½brk_g
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
);

1795 #ifdeà
__PIC__


1797 
__STRING_INLINE
 *

1798 
	$__¡½brk_g
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
)

1800 
__d0
, 
__d1
, 
__d2
;

1801 *
__»s
;

1802 
__asm__
 
__vÞ©e__


1823 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1824 : "d" (
__acû±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1826  
__»s
;

1827 
	}
}

1829 
__STRING_INLINE
 *

1830 
	$__¡½brk_g
 (cÚ¡ *
__s
, cÚ¡ *
__acû±
)

1832 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1833 *
__»s
;

1834 
__asm__
 
__vÞ©e__


1853 : "=S" (
__»s
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1854 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__acû±
)

1856  
__»s
;

1857 
	}
}

1862 
	#_HAVE_STRING_ARCH_¡r¡r
 1

	)

1863 
	#¡r¡r
(
hay¡ack
, 
ÃedË
) \

1864 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
ÃedË
) &&  ((needle)[0]) == 1 \

1865 ? ((
ÃedË
)[0] == '\0' \

1866 ? (
hay¡ack
) \

1867 : ((
ÃedË
)[1] == '\0' \

1868 ? 
	`¡rchr
 ((
hay¡ack
), (
ÃedË
)[0]) \

1869 : 
	`__¡r¡r_cg
 ((
hay¡ack
), (
ÃedË
), \

1870 
	`¡¾
 (
ÃedË
)))) \

1871 : 
	`__¡r¡r_g
 ((
hay¡ack
), (
ÃedË
))))

	)

1875 
__STRING_INLINE
 *
__¡r¡r_cg
 (cÚ¡ *
__hay¡ack
,

1876 cÚ¡ 
__ÃedË
[],

1877 
size_t
 
__ÃedË_Ën
);

1879 
__STRING_INLINE
 *

1880 
	$__¡r¡r_cg
 (cÚ¡ *
__hay¡ack
, cÚ¡ 
__ÃedË
[],

1881 
size_t
 
__ÃedË_Ën
)

1883 
__d0
, 
__d1
, 
__d2
;

1884 *
__»s
;

1885 
__asm__
 
__vÞ©e__


1898 : "=&a" (
__»s
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1899 : "g" (
__ÃedË_Ën
), "1" (
__hay¡ack
), "d" (
__ÃedË
)

1901  
__»s
;

1902 
	}
}

1904 
__STRING_INLINE
 *
__¡r¡r_g
 (cÚ¡ *
__hay¡ack
,

1905 cÚ¡ *
__ÃedË
);

1906 #ifdeà
__PIC__


1908 
__STRING_INLINE
 *

1909 
	$__¡r¡r_g
 (cÚ¡ *
__hay¡ack
, cÚ¡ *
__ÃedË
)

1911 
__d0
, 
__d1
, 
__d2
;

1912 *
__»s
;

1913 
__asm__
 
__vÞ©e__


1932 : "=&a" (
__»s
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1933 : "0" (0), "1" (0xffffffff), "2" (
__hay¡ack
), "3" (
__ÃedË
),

1934 "d" (
__ÃedË
)

1936  
__»s
;

1937 
	}
}

1939 
__STRING_INLINE
 *

1940 
	$__¡r¡r_g
 (cÚ¡ *
__hay¡ack
, cÚ¡ *
__ÃedË
)

1942 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1943 *
__»s
;

1944 
__asm__
 
__vÞ©e__


1961 : "=&a" (
__»s
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1962 : "0" (0), "1" (0xffffffff), "2" (
__hay¡ack
), "3" (
__ÃedË
),

1963 "b" (
__ÃedË
)

1965  
__»s
;

1966 
	}
}

1972 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN_EXTENDED


1973 #ifdeà
__i686__


1974 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1975 
	#ffs
(
wÜd
è(
	`__but_cÚ¡ªt_p
 (word) \

1976 ? 
	`__but_ffs
 (
wÜd
) \

1977 : ({ 
__út
, 
__tmp
; \

1978 
__asm__
 
__vÞ©e__
 \

1981 : "=&r" (
__út
), "ô" (
__tmp
) \

1982 : "rm" (
wÜd
), "1" (-1)); \

1983 
__út
 + 1; }))

	)

1985 #iâdeà
ff¦


1986 
	#ff¦
(
wÜd
è
	`ffs
(wÜd)

	)

1991 #iâdeà
_FORCE_INLINES


1992 #undeà
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #iâdeà
_STRING_H


24 #iâdeà
__NO_STRING_INLINES


41 #iâdeà
__STRING_INLINE


42 #ifdeà
__ýlu¥lus


43 
	#__STRING_INLINE
 
le


	)

45 
	#__STRING_INLINE
 
__exº_le


	)

49 #ià
_STRING_INLINE_uÇligÃd


51 
	~<dn.h
>

52 
	~<bs/ty³s.h
>

54 #ià
__BYTE_ORDER
 =ð
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
¤c
, 
idx
) \

56 (((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
 + 1] << 8 \

57 | ((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
¤c
, 
idx
) \

59 (((((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
 + 3] << 8 \

60 | ((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
 + 2]) << 8 \

61 | ((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
 + 1]) << 8 \

62 | ((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
¤c
, 
idx
) \

65 (((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
] << 8 \

66 | ((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
¤c
, 
idx
) \

68 (((((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
] << 8 \

69 | ((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
 + 1]) << 8 \

70 | ((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
 + 2]) << 8 \

71 | ((cÚ¡ *è(cÚ¡ *è(
¤c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 ¡ruù { 
__¬r
[
N
]; } \

78 
	t__©ibu__
 ((
	t__·cked__
)è
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #undeà
__STRING2_COPY_TYPE


92 
	#__¡rg2_1b±r_p
(
__x
) \

93 ((
size_t
)(cÚ¡ *)((
__x
è+ 1è- (size_t)(cÚ¡ *)(__xè=ð1)

	)

96 #ià!
defed
 
_HAVE_STRING_ARCH_mem£t


97 #ià!
__GNUC_PREREQ
 (3, 0)

98 #ià
_STRING_INLINE_uÇligÃd


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__but_cÚ¡ªt_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
è({ *
__s
 = (s); \

109 *((
__ut8_t
 *è
__s
èð(__ut8_tè
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__ut8_t
 
__c
 = (__ut8_tè(
c
); \

121 (è(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (è
__c
 * 0x0101; \

134 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (è
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (è
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (è
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #ià
__GNUC_PREREQ
 (2, 91)

194 
	#__bzo
(
s
, 
n
è
	`__but_mem£t
 (s, '\0',)

	)

202 #ifdeà
__USE_GNU


203 #ià!
defed
 
_HAVE_STRING_ARCH_mempýy
 || defed 
_FORCE_INLINES


204 #iâdeà
_HAVE_STRING_ARCH_mempýy


205 #ià
__GNUC_PREREQ
 (3, 4)

206 
	#__mempýy
(
de¡
, 
¤c
, 
n
è
	`__but_mempýy
 (de¡, src,)

	)

207 #ià
__GNUC_PREREQ
 (3, 0)

208 
	#__mempýy
(
de¡
, 
¤c
, 
n
) \

209 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
è&& __but_cÚ¡ªt_°(
n
) \

210 && 
	`__¡rg2_1b±r_p
 (
¤c
è&& 
n
 <= 8 \

211 ? 
	`__but_memýy
 (
de¡
, 
¤c
, 
n
) + (n) \

212 : 
	`__mempýy
 (
de¡
, 
¤c
, 
n
)))

	)

214 
	#__mempýy
(
de¡
, 
¤c
, 
n
) \

215 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
è&& __but_cÚ¡ªt_°(
n
) \

216 && 
	`__¡rg2_1b±r_p
 (
¤c
è&& 
n
 <= 8 \

217 ? 
	`__mempýy_sm®l
 (
de¡
, 
	`__mempýy_¬gs
 (
¤c
), 
n
) \

218 : 
	`__mempýy
 (
de¡
, 
¤c
, 
n
)))

	)

222 
	#mempýy
(
de¡
, 
¤c
, 
n
è
	`__mempýy
 (de¡, src,)

	)

225 #ià!
__GNUC_PREREQ
 (3, 0è|| 
defed
 
_FORCE_INLINES


226 #ià
_STRING_INLINE_uÇligÃd


227 #iâdeà
_FORCE_INLINES


228 
	#__mempýy_¬gs
(
¤c
) \

229 ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[2], \

230 ((cÚ¡ *è(
¤c
))[4], ((const *) (src))[6], \

231 
__exnsiÚ__
 
	`__STRING2_SMALL_GET16
 (
¤c
, 0), \

232 
__exnsiÚ__
 
	`__STRING2_SMALL_GET16
 (
¤c
, 4), \

233 
__exnsiÚ__
 
	`__STRING2_SMALL_GET32
 (
¤c
, 0), \

234 
__exnsiÚ__
 
	`__STRING2_SMALL_GET32
 (
¤c
, 4)

	)

236 
__STRING_INLINE
 *
__mempýy_sm®l
 (*, , , , ,

237 
__ut16_t
, __ut16_t, 
__ut32_t
,

238 
__ut32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__mempýy_sm®l
 (*
__de¡1
,

241 
__¤c0_1
, 
__¤c2_1
, 
__¤c4_1
, 
__¤c6_1
,

242 
__ut16_t
 
__¤c0_2
, __ut16_
__¤c4_2
,

243 
__ut32_t
 
__¤c0_4
, __ut32_
__¤c4_4
,

244 
size_t
 
__¤þ
)

247 
__ut32_t
 
__ui
;

248 
__ut16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de¡1
;

252 (è
__¤þ
)

255 
__u
->
__c
 = 
__¤c0_1
;

256 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__¤c0_2
;

260 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__¤c0_2
;

264 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__¤c2_1
;

266 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__¤c0_4
;

270 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__¤c0_4
;

274 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__¤c4_1
;

276 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__¤c0_4
;

280 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__¤c4_2
;

282 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__¤c0_4
;

286 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__¤c4_2
;

288 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__¤c6_1
;

290 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__¤c0_4
;

294 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__¤c4_4
;

296 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

299  (*è
__u
;

300 
	}
}

302 #iâdeà
_FORCE_INLINES


303 
	#__mempýy_¬gs
(
¤c
) \

304 ((cÚ¡ *è(
¤c
))[0], \

305 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1] } }), \

307 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

309 ((cÚ¡ *è(
¤c
))[2] } }), \

310 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

312 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3] } }), \

313 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

315 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

316 ((cÚ¡ *è(
¤c
))[4] } }), \

317 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

319 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

320 ((cÚ¡ *è(
¤c
))[4], ((const *) (src))[5] } }), \

321 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

323 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

324 ((cÚ¡ *è(
¤c
))[4], ((const *) (src))[5], \

325 ((cÚ¡ *è(
¤c
))[6] } }), \

326 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

328 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

329 ((cÚ¡ *è(
¤c
))[4], ((const *) (src))[5], \

330 ((cÚ¡ *è(
¤c
))[6], ((cÚ¡ *è(¤c))[7] } })

	)

332 
__STRING_INLINE
 *
__mempýy_sm®l
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__mempýy_sm®l
 (*
__de¡
, 
__¤c1
,

341 
__STRING2_COPY_ARR2
 
__¤c2
, 
__STRING2_COPY_ARR3
 
__¤c3
,

342 
__STRING2_COPY_ARR4
 
__¤c4
, 
__STRING2_COPY_ARR5
 
__¤c5
,

343 
__STRING2_COPY_ARR6
 
__¤c6
, 
__STRING2_COPY_ARR7
 
__¤c7
,

344 
__STRING2_COPY_ARR8
 
__¤c8
, 
size_t
 
__¤þ
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sÿ2
;

349 
__STRING2_COPY_ARR3
 
__sÿ3
;

350 
__STRING2_COPY_ARR4
 
__sÿ4
;

351 
__STRING2_COPY_ARR5
 
__sÿ5
;

352 
__STRING2_COPY_ARR6
 
__sÿ6
;

353 
__STRING2_COPY_ARR7
 
__sÿ7
;

354 
__STRING2_COPY_ARR8
 
__sÿ8
;

355 } *
__u
 = 
__de¡
;

356 (è
__¤þ
)

359 
__u
->
__c
 = 
__¤c1
;

362 
__exnsiÚ__
 
__u
->
__sÿ2
 = 
__¤c2
;

365 
__exnsiÚ__
 
__u
->
__sÿ3
 = 
__¤c3
;

368 
__exnsiÚ__
 
__u
->
__sÿ4
 = 
__¤c4
;

371 
__exnsiÚ__
 
__u
->
__sÿ5
 = 
__¤c5
;

374 
__exnsiÚ__
 
__u
->
__sÿ6
 = 
__¤c6
;

377 
__exnsiÚ__
 
__u
->
__sÿ7
 = 
__¤c7
;

380 
__exnsiÚ__
 
__u
->
__sÿ8
 = 
__¤c8
;

383  
	`__exnsiÚ__
 ((*è
__u
 + 
__¤þ
);

384 
	}
}

392 #iâdeà
_HAVE_STRING_ARCH_¡rchr


393 *
__¿wmemchr
 (cÚ¡ *
__s
, 
__c
);

394 #ià
__GNUC_PREREQ
 (3, 2)

395 
	#¡rchr
(
s
, 
c
) \

396 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
c
è&& !__but_cÚ¡ªt_°(
s
) \

397 && (
c
) == '\0' \

398 ? (*è
	`__¿wmemchr
 (
s
, 
c
) \

399 : 
	`__but_¡rchr
 (
s
, 
c
)))

	)

401 
	#¡rchr
(
s
, 
c
) \

402 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
c
) && (c) == '\0' \

403 ? (*è
	`__¿wmemchr
 (
s
, 
c
) \

404 : 
	`¡rchr
 (
s
, 
c
)))

	)

410 #ià(!
defed
 
_HAVE_STRING_ARCH_¡rýy
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
defed
 
	g_FORCE_INLINES


412 #ià!
defed
 
_HAVE_STRING_ARCH_¡rýy
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#¡rýy
(
de¡
, 
¤c
) \

414 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
) \

415 ? (
	`__¡rg2_1b±r_p
 (
¤c
è&& 
	`¡¾
 (src) + 1 <= 8 \

416 ? 
	`__¡rýy_sm®l
 (
de¡
, 
	`__¡rýy_¬gs
 (
¤c
), \

417 
	`¡¾
 (
¤c
) + 1) \

418 : (*è
	`memýy
 (
de¡
, 
¤c
, 
	`¡¾
 (src) + 1)) \

419 : 
	`¡rýy
 (
de¡
, 
¤c
)))

	)

422 #ià
_STRING_INLINE_uÇligÃd


423 #iâdeà
_FORCE_INLINES


424 
	#__¡rýy_¬gs
(
¤c
) \

425 
__exnsiÚ__
 
	`__STRING2_SMALL_GET16
 (
¤c
, 0), \

426 
__exnsiÚ__
 
	`__STRING2_SMALL_GET16
 (
¤c
, 4), \

427 
__exnsiÚ__
 
	`__STRING2_SMALL_GET32
 (
¤c
, 0), \

428 
__exnsiÚ__
 
	`__STRING2_SMALL_GET32
 (
¤c
, 4)

	)

430 
__STRING_INLINE
 *
__¡rýy_sm®l
 (*, 
__ut16_t
, __uint16_t,

431 
__ut32_t
, __ut32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__¡rýy_sm®l
 (*
__de¡
,

434 
__ut16_t
 
__¤c0_2
, __ut16_
__¤c4_2
,

435 
__ut32_t
 
__¤c0_4
, __ut32_
__¤c4_4
,

436 
size_t
 
__¤þ
)

439 
__ut32_t
 
__ui
;

440 
__ut16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*è
__de¡
;

443 (è
__¤þ
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__¤c0_2
;

452 
__u
->
__usi
 = 
__¤c0_2
;

453 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__¤c0_4
;

460 
__u
->
__ui
 = 
__¤c0_4
;

461 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__¤c0_4
;

466 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__¤c4_2
;

470 
__u
->
__ui
 = 
__¤c0_4
;

471 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__¤c4_2
;

473 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__¤c0_4
;

478 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__¤c4_4
;

482  
__de¡
;

483 
	}
}

485 #iâdeà
_FORCE_INLINES


486 
	#__¡rýy_¬gs
(
¤c
) \

487 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((cÚ¡ *è(
¤c
))[0], '\0' } }), \

489 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

492 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

494 ((cÚ¡ *è(
¤c
))[2], '\0' } }), \

495 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

497 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

499 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

501 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

502 ((cÚ¡ *è(
¤c
))[4], '\0' } }), \

503 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

505 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

506 ((cÚ¡ *è(
¤c
))[4], ((const *) (src))[5], \

508 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

510 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

511 ((cÚ¡ *è(
¤c
))[4], ((const *) (src))[5], \

512 ((cÚ¡ *è(
¤c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__¡rýy_sm®l
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__¡rýy_sm®l
 (*
__de¡
,

523 
__STRING2_COPY_ARR2
 
__¤c2
, 
__STRING2_COPY_ARR3
 
__¤c3
,

524 
__STRING2_COPY_ARR4
 
__¤c4
, 
__STRING2_COPY_ARR5
 
__¤c5
,

525 
__STRING2_COPY_ARR6
 
__¤c6
, 
__STRING2_COPY_ARR7
 
__¤c7
,

526 
__STRING2_COPY_ARR8
 
__¤c8
, 
size_t
 
__¤þ
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sÿ2
;

531 
__STRING2_COPY_ARR3
 
__sÿ3
;

532 
__STRING2_COPY_ARR4
 
__sÿ4
;

533 
__STRING2_COPY_ARR5
 
__sÿ5
;

534 
__STRING2_COPY_ARR6
 
__sÿ6
;

535 
__STRING2_COPY_ARR7
 
__sÿ7
;

536 
__STRING2_COPY_ARR8
 
__sÿ8
;

537 } *
__u
 = (*è
__de¡
;

538 (è
__¤þ
)

541 
__u
->
__c
 = '\0';

544 
__exnsiÚ__
 
__u
->
__sÿ2
 = 
__¤c2
;

547 
__exnsiÚ__
 
__u
->
__sÿ3
 = 
__¤c3
;

550 
__exnsiÚ__
 
__u
->
__sÿ4
 = 
__¤c4
;

553 
__exnsiÚ__
 
__u
->
__sÿ5
 = 
__¤c5
;

556 
__exnsiÚ__
 
__u
->
__sÿ6
 = 
__¤c6
;

559 
__exnsiÚ__
 
__u
->
__sÿ7
 = 
__¤c7
;

562 
__exnsiÚ__
 
__u
->
__sÿ8
 = 
__¤c8
;

565  
__de¡
;

566 
	}
}

572 #ifdeà
__USE_GNU


573 #ià!
defed
 
_HAVE_STRING_ARCH_¡pýy
 || defed 
_FORCE_INLINES


574 #iâdeà
_HAVE_STRING_ARCH_¡pýy


575 #ià
__GNUC_PREREQ
 (3, 4)

576 
	#__¡pýy
(
de¡
, 
¤c
è
	`__but_¡pýy
 (de¡, src)

	)

577 #ià
__GNUC_PREREQ
 (3, 0)

578 
	#__¡pýy
(
de¡
, 
¤c
) \

579 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
) \

580 ? (
	`__¡rg2_1b±r_p
 (
¤c
è&& 
	`¡¾
 (src) + 1 <= 8 \

581 ? 
	`__but_¡rýy
 (
de¡
, 
¤c
è+ 
	`¡¾
 (src) \

582 : ((*è(
__mempýy
è(
de¡
, 
¤c
, 
	`¡¾
 (src) + 1) \

584 : 
	`__¡pýy
 (
de¡
, 
¤c
)))

	)

586 
	#__¡pýy
(
de¡
, 
¤c
) \

587 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
) \

588 ? (
	`__¡rg2_1b±r_p
 (
¤c
è&& 
	`¡¾
 (src) + 1 <= 8 \

589 ? 
	`__¡pýy_sm®l
 (
de¡
, 
	`__¡pýy_¬gs
 (
¤c
), \

590 
	`¡¾
 (
¤c
) + 1) \

591 : ((*è(
__mempýy
è(
de¡
, 
¤c
, 
	`¡¾
 (src) + 1) \

593 : 
	`__¡pýy
 (
de¡
, 
¤c
)))

	)

597 
	#¡pýy
(
de¡
, 
¤c
è
	`__¡pýy
 (de¡, src)

	)

600 #ià!
__GNUC_PREREQ
 (3, 0è|| 
defed
 
_FORCE_INLINES


601 #ià
_STRING_INLINE_uÇligÃd


602 #iâdeà
_FORCE_INLINES


603 
	#__¡pýy_¬gs
(
¤c
) \

604 
__exnsiÚ__
 
	`__STRING2_SMALL_GET16
 (
¤c
, 0), \

605 
__exnsiÚ__
 
	`__STRING2_SMALL_GET16
 (
¤c
, 4), \

606 
__exnsiÚ__
 
	`__STRING2_SMALL_GET32
 (
¤c
, 0), \

607 
__exnsiÚ__
 
	`__STRING2_SMALL_GET32
 (
¤c
, 4)

	)

609 
__STRING_INLINE
 *
__¡pýy_sm®l
 (*, 
__ut16_t
, __uint16_t,

610 
__ut32_t
, __ut32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__¡pýy_sm®l
 (*
__de¡
,

613 
__ut16_t
 
__¤c0_2
, __ut16_
__¤c4_2
,

614 
__ut32_t
 
__¤c0_4
, __ut32_
__¤c4_4
,

615 
size_t
 
__¤þ
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*è
__de¡
;

623 (è
__¤þ
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__¤c0_2
;

630 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__¤c0_2
;

634 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__¤c0_4
;

639 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__¤c0_4
;

643 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__¤c0_4
;

648 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__¤c4_2
;

650 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__¤c0_4
;

654 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__¤c4_2
;

656 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__¤c0_4
;

661 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__¤c4_4
;

663 
__u
 = 
	`__exnsiÚ__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #iâdeà
_FORCE_INLINES


670 
	#__¡pýy_¬gs
(
¤c
) \

671 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((cÚ¡ *è(
¤c
))[0], '\0' } }), \

673 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

676 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

678 ((cÚ¡ *è(
¤c
))[2], '\0' } }), \

679 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

681 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

683 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

685 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

686 ((cÚ¡ *è(
¤c
))[4], '\0' } }), \

687 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

689 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

690 ((cÚ¡ *è(
¤c
))[4], ((const *) (src))[5], \

692 
	`__exnsiÚ__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((cÚ¡ *è(
¤c
))[0], ((const *) (src))[1], \

694 ((cÚ¡ *è(
¤c
))[2], ((const *) (src))[3], \

695 ((cÚ¡ *è(
¤c
))[4], ((const *) (src))[5], \

696 ((cÚ¡ *è(
¤c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__¡pýy_sm®l
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__¡pýy_sm®l
 (*
__de¡
,

707 
__STRING2_COPY_ARR2
 
__¤c2
, 
__STRING2_COPY_ARR3
 
__¤c3
,

708 
__STRING2_COPY_ARR4
 
__¤c4
, 
__STRING2_COPY_ARR5
 
__¤c5
,

709 
__STRING2_COPY_ARR6
 
__¤c6
, 
__STRING2_COPY_ARR7
 
__¤c7
,

710 
__STRING2_COPY_ARR8
 
__¤c8
, 
size_t
 
__¤þ
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sÿ2
;

715 
__STRING2_COPY_ARR3
 
__sÿ3
;

716 
__STRING2_COPY_ARR4
 
__sÿ4
;

717 
__STRING2_COPY_ARR5
 
__sÿ5
;

718 
__STRING2_COPY_ARR6
 
__sÿ6
;

719 
__STRING2_COPY_ARR7
 
__sÿ7
;

720 
__STRING2_COPY_ARR8
 
__sÿ8
;

721 } *
__u
 = (*è
__de¡
;

722 (è
__¤þ
)

725 
__u
->
__c
 = '\0';

728 
__exnsiÚ__
 
__u
->
__sÿ2
 = 
__¤c2
;

731 
__exnsiÚ__
 
__u
->
__sÿ3
 = 
__¤c3
;

734 
__exnsiÚ__
 
__u
->
__sÿ4
 = 
__¤c4
;

737 
__exnsiÚ__
 
__u
->
__sÿ5
 = 
__¤c5
;

740 
__exnsiÚ__
 
__u
->
__sÿ6
 = 
__¤c6
;

743 
__exnsiÚ__
 
__u
->
__sÿ7
 = 
__¤c7
;

746 
__exnsiÚ__
 
__u
->
__sÿ8
 = 
__¤c8
;

749  
__de¡
 + 
__¤þ
 - 1;

750 
	}
}

758 #iâdeà
_HAVE_STRING_ARCH_¡ºýy


759 #ià
__GNUC_PREREQ
 (3, 2)

760 
	#¡ºýy
(
de¡
, 
¤c
, 
n
è
	`__but_¡ºýy
 (de¡, src,)

	)

762 
	#¡ºýy
(
de¡
, 
¤c
, 
n
) \

763 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
è&& __but_cÚ¡ªt_°(
n
) \

764 ? (
	`¡¾
 (
¤c
è+ 1 >ð((
size_t
è(
n
)) \

765 ? (*è
	`memýy
 (
de¡
, 
¤c
, 
n
) \

766 : 
	`¡ºýy
 (
de¡
, 
¤c
, 
n
)) \

767 : 
	`¡ºýy
 (
de¡
, 
¤c
, 
n
)))

	)

773 #iâdeà
_HAVE_STRING_ARCH_¡ºÿt


774 #ifdeà
_USE_STRING_ARCH_¡rchr


775 
	#¡ºÿt
(
de¡
, 
¤c
, 
n
) \

776 (
	`__exnsiÚ__
 ({ *
__de¡
 = (
de¡
); \

777 
	`__but_cÚ¡ªt_p
 (
¤c
è&& __but_cÚ¡ªt_°(
n
) \

778 ? (
	`¡¾
 (
¤c
è< ((
size_t
è(
n
)) \

779 ? 
	`¡rÿt
 (
__de¡
, 
¤c
) \

780 : (*((*è
	`__mempýy
 (
	`¡rchr
 (
__de¡
, '\0'), \

781 
¤c
, 
n
)èð'\0', 
__de¡
)) \

782 : 
	`¡ºÿt
 (
de¡
, 
¤c
, 
n
); }))

	)

783 #ià
__GNUC_PREREQ
 (3, 2)

784 
	#¡ºÿt
(
de¡
, 
¤c
, 
n
è
	`__but_¡ºÿt
 (de¡, src,)

	)

786 
	#¡ºÿt
(
de¡
, 
¤c
, 
n
) \

787 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
¤c
è&& __but_cÚ¡ªt_°(
n
) \

788 ? (
	`¡¾
 (
¤c
è< ((
size_t
è(
n
)) \

789 ? 
	`¡rÿt
 (
de¡
, 
¤c
) \

790 : 
	`¡ºÿt
 (
de¡
, 
¤c
, 
n
)) \

791 : 
	`¡ºÿt
 (
de¡
, 
¤c
, 
n
)))

	)

797 #iâdeà
_HAVE_STRING_ARCH_¡rcmp


798 #ià
__GNUC_PREREQ
 (3, 2)

799 
	#¡rcmp
(
s1
, 
s2
) \

800 
__exnsiÚ__
 \

801 ({ 
size_t
 
__s1_Ën
, 
__s2_Ën
; \

802 (
	`__but_cÚ¡ªt_p
 (
s1
è&& __but_cÚ¡ªt_°(
s2
) \

803 && (
__s1_Ën
 = 
	`__but_¡¾
 (
s1
), 
__s2_Ën
 = __but_¡¾ (
s2
), \

804 (!
	`__¡rg2_1b±r_p
 (
s1
è|| 
__s1_Ën
 >= 4) \

805 && (!
	`__¡rg2_1b±r_p
 (
s2
è|| 
__s2_Ën
 >= 4)) \

806 ? 
	`__but_¡rcmp
 (
s1
, 
s2
) \

807 : (
	`__but_cÚ¡ªt_p
 (
s1
è&& 
	`__¡rg2_1b±r_p
 (s1) \

808 && (
__s1_Ën
 = 
	`__but_¡¾
 (
s1
), __s1_len < 4) \

809 ? (
	`__but_cÚ¡ªt_p
 (
s2
è&& 
	`__¡rg2_1b±r_p
 (s2) \

810 ? 
	`__but_¡rcmp
 (
s1
, 
s2
) \

811 : 
	`__¡rcmp_cg
 (
s1
, 
s2
, 
__s1_Ën
)) \

812 : (
	`__but_cÚ¡ªt_p
 (
s2
è&& 
	`__¡rg2_1b±r_p
 (s2) \

813 && (
__s2_Ën
 = 
	`__but_¡¾
 (
s2
), __s2_len < 4) \

814 ? (
	`__but_cÚ¡ªt_p
 (
s1
è&& 
	`__¡rg2_1b±r_p
 (s1) \

815 ? 
	`__but_¡rcmp
 (
s1
, 
s2
) \

816 : 
	`__¡rcmp_gc
 (
s1
, 
s2
, 
__s2_Ën
)) \

817 : 
	`__but_¡rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#¡rcmp
(
s1
, 
s2
) \

820 
__exnsiÚ__
 \

821 ({ 
size_t
 
__s1_Ën
, 
__s2_Ën
; \

822 (
	`__but_cÚ¡ªt_p
 (
s1
è&& __but_cÚ¡ªt_°(
s2
) \

823 && (
__s1_Ën
 = 
	`¡¾
 (
s1
), 
__s2_Ën
 = sËÀ(
s2
), \

824 (!
	`__¡rg2_1b±r_p
 (
s1
è|| 
__s1_Ën
 >= 4) \

825 && (!
	`__¡rg2_1b±r_p
 (
s2
è|| 
__s2_Ën
 >= 4)) \

826 ? 
	`memcmp
 ((cÚ¡ *è(
s1
), (cÚ¡ *è(
s2
), \

827 (
__s1_Ën
 < 
__s2_Ën
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__but_cÚ¡ªt_p
 (
s1
è&& 
	`__¡rg2_1b±r_p
 (s1) \

829 && (
__s1_Ën
 = 
	`¡¾
 (
s1
), __s1_len < 4) \

830 ? (
	`__but_cÚ¡ªt_p
 (
s2
è&& 
	`__¡rg2_1b±r_p
 (s2) \

831 ? 
	`__¡rcmp_cc
 (
s1
, 
s2
, 
__s1_Ën
) \

832 : 
	`__¡rcmp_cg
 (
s1
, 
s2
, 
__s1_Ën
)) \

833 : (
	`__but_cÚ¡ªt_p
 (
s2
è&& 
	`__¡rg2_1b±r_p
 (s2) \

834 && (
__s2_Ën
 = 
	`¡¾
 (
s2
), __s2_len < 4) \

835 ? (
	`__but_cÚ¡ªt_p
 (
s1
è&& 
	`__¡rg2_1b±r_p
 (s1) \

836 ? 
	`__¡rcmp_cc
 (
s1
, 
s2
, 
__s2_Ën
) \

837 : 
	`__¡rcmp_gc
 (
s1
, 
s2
, 
__s2_Ën
)) \

838 : 
	`¡rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__¡rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exnsiÚ__
 ({ 
__»suÉ
 = \

843 (((cÚ¡ *è(cÚ¡ *è(
s1
))[0] \

844 - ((cÚ¡ *è(cÚ¡ *)(
s2
))[0]); \

845 ià(
l
 > 0 && 
__»suÉ
 == 0) \

847 
__»suÉ
 = (((const *) \

848 (cÚ¡ *è(
s1
))[1] \

850 (cÚ¡ *è(
s2
))[1]); \

851 ià(
l
 > 1 && 
__»suÉ
 == 0) \

853 
__»suÉ
 = \

855 (cÚ¡ *è(
s1
))[2] \

857 (cÚ¡ *è(
s2
))[2]); \

858 ià(
l
 > 2 && 
__»suÉ
 == 0) \

859 
__»suÉ
 = \

861 (cÚ¡ *è(
s1
))[3] \

863 (cÚ¡ *è(
s2
))[3]); \

866 
__»suÉ
; }))

	)

868 
	#__¡rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exnsiÚ__
 ({ cÚ¡ *
__s2
 = \

870 (cÚ¡ *è(cÚ¡ *è(
s2
); \

871 
__»suÉ
 = \

872 (((cÚ¡ *è(cÚ¡ *è(
s1
))[0] \

873 - 
__s2
[0]); \

874 ià(
l1
 > 0 && 
__»suÉ
 == 0) \

876 
__»suÉ
 = (((const *) \

877 (cÚ¡ *è(
s1
))[1] - 
__s2
[1]); \

878 ià(
l1
 > 1 && 
__»suÉ
 == 0) \

880 
__»suÉ
 = (((const *) \

881 (cÚ¡ *è(
s1
))[2] - 
__s2
[2]); \

882 ià(
l1
 > 2 && 
__»suÉ
 == 0) \

883 
__»suÉ
 = (((const *) \

884 (cÚ¡ *è(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__»suÉ
; }))

	)

890 
	#__¡rcmp_gc
(
s1
, 
s2
, 
l2
è(- 
	`__¡rcmp_cg
 (s2, s1,2))

	)

895 #iâdeà
_HAVE_STRING_ARCH_¡ºcmp


896 
	#¡ºcmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
n
) \

898 && ((
	`__but_cÚ¡ªt_p
 (
s1
) \

899 && 
	`¡¾
 (
s1
è< ((
size_t
è(
n
))) \

900 || (
	`__but_cÚ¡ªt_p
 (
s2
) \

901 && 
	`¡¾
 (
s2
è< ((
size_t
è(
n
)))) \

902 ? 
	`¡rcmp
 (
s1
, 
s2
è: 
	`¡ºcmp
 (s1, s2, 
n
)))

	)

908 #ià!
defed
 
_HAVE_STRING_ARCH_¡rc¥n
 || defed 
_FORCE_INLINES


909 #iâdeà
_HAVE_STRING_ARCH_¡rc¥n


910 #ià
__GNUC_PREREQ
 (3, 2)

911 
	#¡rc¥n
(
s
, 
»jeù
) \

912 
__exnsiÚ__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__but_cÚ¡ªt_p
 (
»jeù
è&& 
	`__¡rg2_1b±r_p
 (reject) \

915 ? ((
	`__but_cÚ¡ªt_p
 (
s
è&& 
	`__¡rg2_1b±r_p
 (s)) \

916 ? 
	`__but_¡rc¥n
 (
s
, 
»jeù
) \

917 : ((
__r0
 = ((cÚ¡ *è(
»jeù
))[0], __r0 == '\0') \

918 ? 
	`¡¾
 (
s
) \

919 : ((
__r1
 = ((cÚ¡ *è(
»jeù
))[1], __r1 == '\0') \

920 ? 
	`__¡rc¥n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((cÚ¡ *è(
»jeù
))[2], __r2 == '\0') \

922 ? 
	`__¡rc¥n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((cÚ¡ *è(
»jeù
))[3] == '\0' \

924 ? 
	`__¡rc¥n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__but_¡rc¥n
 (
s
, 
»jeù
)))))) \

926 : 
	`__but_¡rc¥n
 (
s
, 
»jeù
)); })

	)

928 
	#¡rc¥n
(
s
, 
»jeù
) \

929 
__exnsiÚ__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__but_cÚ¡ªt_p
 (
»jeù
è&& 
	`__¡rg2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((cÚ¡ *è(
»jeù
))[0], __r0 == '\0') \

933 ? 
	`¡¾
 (
s
) \

934 : ((
__r1
 = ((cÚ¡ *è(
»jeù
))[1], __r1 == '\0') \

935 ? 
	`__¡rc¥n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((cÚ¡ *è(
»jeù
))[2], __r2 == '\0') \

937 ? 
	`__¡rc¥n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((cÚ¡ *è(
»jeù
))[3] == '\0' \

939 ? 
	`__¡rc¥n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`¡rc¥n
 (
s
, 
»jeù
))))) \

941 : 
	`¡rc¥n
 (
s
, 
»jeù
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__¡rc¥n_c1
 (cÚ¡ *
__s
, 
__»jeù
);

946 
__STRING_INLINE
 
size_t


947 
	$__¡rc¥n_c1
 (cÚ¡ *
__s
, 
__»jeù
)

949 
size_t
 
__»suÉ
 = 0;

950 
__s
[
__»suÉ
] !ð'\0' && __s[__»suÉ] !ð
__»jeù
)

951 ++
__»suÉ
;

952  
__»suÉ
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__¡rc¥n_c2
 (cÚ¡ *
__s
, 
__»jeù1
,

956 
__»jeù2
);

957 
__STRING_INLINE
 
size_t


958 
	$__¡rc¥n_c2
 (cÚ¡ *
__s
, 
__»jeù1
, 
__»jeù2
)

960 
size_t
 
__»suÉ
 = 0;

961 
__s
[
__»suÉ
] !ð'\0' && __s[__»suÉ] !ð
__»jeù1


962 && 
__s
[
__»suÉ
] !ð
__»jeù2
)

963 ++
__»suÉ
;

964  
__»suÉ
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__¡rc¥n_c3
 (cÚ¡ *
__s
, 
__»jeù1
,

968 
__»jeù2
, 
__»jeù3
);

969 
__STRING_INLINE
 
size_t


970 
	$__¡rc¥n_c3
 (cÚ¡ *
__s
, 
__»jeù1
, 
__»jeù2
,

971 
__»jeù3
)

973 
size_t
 
__»suÉ
 = 0;

974 
__s
[
__»suÉ
] !ð'\0' && __s[__»suÉ] !ð
__»jeù1


975 && 
__s
[
__»suÉ
] !ð
__»jeù2
 && __s[__»suÉ] !ð
__»jeù3
)

976 ++
__»suÉ
;

977  
__»suÉ
;

978 
	}
}

984 #ià!
defed
 
_HAVE_STRING_ARCH_¡r¥n
 || defed 
_FORCE_INLINES


985 #iâdeà
_HAVE_STRING_ARCH_¡r¥n


986 #ià
__GNUC_PREREQ
 (3, 2)

987 
	#¡r¥n
(
s
, 
acû±
) \

988 
__exnsiÚ__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__but_cÚ¡ªt_p
 (
acû±
è&& 
	`__¡rg2_1b±r_p
 (accept) \

991 ? ((
	`__but_cÚ¡ªt_p
 (
s
è&& 
	`__¡rg2_1b±r_p
 (s)) \

992 ? 
	`__but_¡r¥n
 (
s
, 
acû±
) \

993 : ((
__a0
 = ((cÚ¡ *è(
acû±
))[0], __a0 == '\0') \

994 ? ((è(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((cÚ¡ *è(
acû±
))[1], __a1 == '\0') \

996 ? 
	`__¡r¥n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((cÚ¡ *è(
acû±
))[2], __a2 == '\0') \

998 ? 
	`__¡r¥n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((cÚ¡ *è(
acû±
))[3] == '\0' \

1000 ? 
	`__¡r¥n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__but_¡r¥n
 (
s
, 
acû±
)))))) \

1002 : 
	`__but_¡r¥n
 (
s
, 
acû±
)); })

	)

1004 
	#¡r¥n
(
s
, 
acû±
) \

1005 
__exnsiÚ__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__but_cÚ¡ªt_p
 (
acû±
è&& 
	`__¡rg2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((cÚ¡ *è(
acû±
))[0], __a0 == '\0') \

1009 ? ((è(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((cÚ¡ *è(
acû±
))[1], __a1 == '\0') \

1011 ? 
	`__¡r¥n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((cÚ¡ *è(
acû±
))[2], __a2 == '\0') \

1013 ? 
	`__¡r¥n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((cÚ¡ *è(
acû±
))[3] == '\0' \

1015 ? 
	`__¡r¥n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`¡r¥n
 (
s
, 
acû±
))))) \

1017 : 
	`¡r¥n
 (
s
, 
acû±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__¡r¥n_c1
 (cÚ¡ *
__s
, 
__acû±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__¡r¥n_c1
 (cÚ¡ *
__s
, 
__acû±
)

1025 
size_t
 
__»suÉ
 = 0;

1027 
__s
[
__»suÉ
] =ð
__acû±
)

1028 ++
__»suÉ
;

1029  
__»suÉ
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__¡r¥n_c2
 (cÚ¡ *
__s
, 
__acû±1
,

1033 
__acû±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__¡r¥n_c2
 (cÚ¡ *
__s
, 
__acû±1
, 
__acû±2
)

1037 
size_t
 
__»suÉ
 = 0;

1039 
__s
[
__»suÉ
] =ð
__acû±1
 || __s[__»suÉ] =ð
__acû±2
)

1040 ++
__»suÉ
;

1041  
__»suÉ
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__¡r¥n_c3
 (cÚ¡ *
__s
, 
__acû±1
,

1045 
__acû±2
, 
__acû±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__¡r¥n_c3
 (cÚ¡ *
__s
, 
__acû±1
, 
__acû±2
, 
__acû±3
)

1049 
size_t
 
__»suÉ
 = 0;

1051 
__s
[
__»suÉ
] =ð
__acû±1
 || __s[__»suÉ] =ð
__acû±2


1052 || 
__s
[
__»suÉ
] =ð
__acû±3
)

1053 ++
__»suÉ
;

1054  
__»suÉ
;

1055 
	}
}

1060 #ià!
defed
 
_HAVE_STRING_ARCH_¡½brk
 || defed 
_FORCE_INLINES


1061 #iâdeà
_HAVE_STRING_ARCH_¡½brk


1062 #ià
__GNUC_PREREQ
 (3, 2)

1063 
	#¡½brk
(
s
, 
acû±
) \

1064 
__exnsiÚ__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__but_cÚ¡ªt_p
 (
acû±
è&& 
	`__¡rg2_1b±r_p
 (accept) \

1067 ? ((
	`__but_cÚ¡ªt_p
 (
s
è&& 
	`__¡rg2_1b±r_p
 (s)) \

1068 ? 
	`__but_¡½brk
 (
s
, 
acû±
) \

1069 : ((
__a0
 = ((cÚ¡ *è(
acû±
))[0], __a0 == '\0') \

1070 ? ((è(
s
), (*è
NULL
) \

1071 : ((
__a1
 = ((cÚ¡ *è(
acû±
))[1], __a1 == '\0') \

1072 ? 
	`__but_¡rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((cÚ¡ *è(
acû±
))[2], __a2 == '\0') \

1074 ? 
	`__¡½brk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((cÚ¡ *è(
acû±
))[3] == '\0' \

1076 ? 
	`__¡½brk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__but_¡½brk
 (
s
, 
acû±
)))))) \

1078 : 
	`__but_¡½brk
 (
s
, 
acû±
)); })

	)

1080 
	#¡½brk
(
s
, 
acû±
) \

1081 
__exnsiÚ__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__but_cÚ¡ªt_p
 (
acû±
è&& 
	`__¡rg2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((cÚ¡ *è(
acû±
))[0], __a0 == '\0') \

1085 ? ((è(
s
), (*è
NULL
) \

1086 : ((
__a1
 = ((cÚ¡ *è(
acû±
))[1], __a1 == '\0') \

1087 ? 
	`¡rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((cÚ¡ *è(
acû±
))[2], __a2 == '\0') \

1089 ? 
	`__¡½brk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((cÚ¡ *è(
acû±
))[3] == '\0' \

1091 ? 
	`__¡½brk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`¡½brk
 (
s
, 
acû±
))))) \

1093 : 
	`¡½brk
 (
s
, 
acû±
)); })

	)

1097 
__STRING_INLINE
 *
__¡½brk_c2
 (cÚ¡ *
__s
, 
__acû±1
,

1098 
__acû±2
);

1099 
__STRING_INLINE
 *

1100 
	$__¡½brk_c2
 (cÚ¡ *
__s
, 
__acû±1
, 
__acû±2
)

1103 *
__s
 !ð'\0' && *__ !ð
__acû±1
 && *__ !ð
__acû±2
)

1104 ++
__s
;

1105  *
__s
 =ð'\0' ? 
NULL
 : (*è(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__¡½brk_c3
 (cÚ¡ *
__s
, 
__acû±1
,

1109 
__acû±2
, 
__acû±3
);

1110 
__STRING_INLINE
 *

1111 
	$__¡½brk_c3
 (cÚ¡ *
__s
, 
__acû±1
, 
__acû±2
, 
__acû±3
)

1114 *
__s
 !ð'\0' && *__ !ð
__acû±1
 && *__ !ð
__acû±2


1115 && *
__s
 !ð
__acû±3
)

1116 ++
__s
;

1117  *
__s
 =ð'\0' ? 
NULL
 : (*è(
size_t
) __s;

1118 
	}
}

1124 #ià!
defed
 
_HAVE_STRING_ARCH_¡r¡r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#¡r¡r
(
hay¡ack
, 
ÃedË
) \

1126 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
ÃedË
è&& 
	`__¡rg2_1b±r_p
 (needle) \

1127 ? (((cÚ¡ *è(
ÃedË
))[0] == '\0' \

1128 ? (*è(
size_t
è(
hay¡ack
) \

1129 : (((cÚ¡ *è(
ÃedË
))[1] == '\0' \

1130 ? 
	`¡rchr
 (
hay¡ack
, \

1131 ((cÚ¡ *è(
ÃedË
))[0]) \

1132 : 
	`¡r¡r
 (
hay¡ack
, 
ÃedË
))) \

1133 : 
	`¡r¡r
 (
hay¡ack
, 
ÃedË
)))

	)

1137 #ià!
defed
 
_HAVE_STRING_ARCH_¡¹ok_r
 || defed 
_FORCE_INLINES


1138 #iâdeà
_HAVE_STRING_ARCH_¡¹ok_r


1139 
	#__¡¹ok_r
(
s
, 
£p
, 
Ãx
) \

1140 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
£p
è&& 
	`__¡rg2_1b±r_p
 (sep) \

1141 && ((cÚ¡ *è(
£p
))[0] != '\0' \

1142 && ((cÚ¡ *è(
£p
))[1] == '\0' \

1143 ? 
	`__¡¹ok_r_1c
 (
s
, ((cÚ¡ *è(
£p
))[0], 
Ãx
) \

1144 : 
	`__¡¹ok_r
 (
s
, 
£p
, 
Ãx
)))

	)

1147 
__STRING_INLINE
 *
__¡¹ok_r_1c
 (*
__s
, 
__£p
, **
__Ãx
);

1148 
__STRING_INLINE
 *

1149 
	$__¡¹ok_r_1c
 (*
__s
, 
__£p
, **
__Ãx
)

1151 *
__»suÉ
;

1152 ià(
__s
 =ð
NULL
)

1153 
__s
 = *
__Ãx
;

1154 *
__s
 =ð
__£p
)

1155 ++
__s
;

1156 
__»suÉ
 = 
NULL
;

1157 ià(*
__s
 != '\0')

1159 
__»suÉ
 = 
__s
++;

1160 *
__s
 != '\0')

1161 ià(*
__s
++ =ð
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__Ãx
 = 
__s
;

1168  
__»suÉ
;

1169 
	}
}

1170 #ifdeà
__USE_POSIX


1171 
	#¡¹ok_r
(
s
, 
£p
, 
Ãx
è
	`__¡¹ok_r
 (s, s,ex)

	)

1176 #ià!
defed
 
_HAVE_STRING_ARCH_¡r£p
 || defed 
_FORCE_INLINES


1177 #iâdeà
_HAVE_STRING_ARCH_¡r£p


1179 *
__¡r£p_g
 (**
__¡rgp
, cÚ¡ *
__dim
);

1180 
	#__¡r£p
(
s
, 
»jeù
) \

1181 
__exnsiÚ__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__but_cÚ¡ªt_p
 (
»jeù
è&& 
	`__¡rg2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((cÚ¡ *è(
»jeù
))[0], \

1185 ((cÚ¡ *è(
»jeù
))[0] != '\0') \

1186 ? ((
__r1
 = ((cÚ¡ *è(
»jeù
))[1], \

1187 ((cÚ¡ *è(
»jeù
))[1] == '\0') \

1188 ? 
	`__¡r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((cÚ¡ *è(
»jeù
))[2], __r2 == '\0') \

1190 ? 
	`__¡r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((cÚ¡ *è(
»jeù
))[3] == '\0' \

1192 ? 
	`__¡r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__¡r£p_g
 (
s
, 
»jeù
)))) \

1194 : 
	`__¡r£p_g
 (
s
, 
»jeù
)); })

	)

1197 
__STRING_INLINE
 *
__¡r£p_1c
 (**
__s
, 
__»jeù
);

1198 
__STRING_INLINE
 *

1199 
	$__¡r£p_1c
 (**
__s
, 
__»jeù
)

1201 *
__»tv®
 = *
__s
;

1202 ià(
__»tv®
 !ð
NULL
 && (*
__s
 = 
	`¡rchr
 (__»tv®, 
__»jeù
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__»tv®
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__¡r£p_2c
 (**
__s
, 
__»jeù1
, 
__»jeù2
);

1208 
__STRING_INLINE
 *

1209 
	$__¡r£p_2c
 (**
__s
, 
__»jeù1
, 
__»jeù2
)

1211 *
__»tv®
 = *
__s
;

1212 ià(
__»tv®
 !ð
NULL
)

1214 *
__ý
 = 
__»tv®
;

1217 ià(*
__ý
 == '\0')

1219 
__ý
 = 
NULL
;

1222 ià(*
__ý
 =ð
__»jeù1
 || *__ý =ð
__»jeù2
)

1224 *
__ý
++ = '\0';

1227 ++
__ý
;

1229 *
__s
 = 
__ý
;

1231  
__»tv®
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__¡r£p_3c
 (**
__s
, 
__»jeù1
, 
__»jeù2
,

1235 
__»jeù3
);

1236 
__STRING_INLINE
 *

1237 
	$__¡r£p_3c
 (**
__s
, 
__»jeù1
, 
__»jeù2
, 
__»jeù3
)

1239 *
__»tv®
 = *
__s
;

1240 ià(
__»tv®
 !ð
NULL
)

1242 *
__ý
 = 
__»tv®
;

1245 ià(*
__ý
 == '\0')

1247 
__ý
 = 
NULL
;

1250 ià(*
__ý
 =ð
__»jeù1
 || *__ý =ð
__»jeù2
 || *__ý =ð
__»jeù3
)

1252 *
__ý
++ = '\0';

1255 ++
__ý
;

1257 *
__s
 = 
__ý
;

1259  
__»tv®
;

1260 
	}
}

1261 #ifdeà
__USE_MISC


1262 
	#¡r£p
(
s
, 
»jeù
è
	`__¡r£p
 (s,ejeù)

	)

1269 #ifdeà
__USE_MISC


1271 #ià!
defed
 
_HAVE_STRING_ARCH_¡rdup
 || !defed 
_HAVE_STRING_ARCH_¡ºdup


1272 
	#__Ãed_m®loc_ªd_ÿÎoc


	)

1273 
	~<¡dlib.h
>

1276 #iâdeà
_HAVE_STRING_ARCH_¡rdup


1278 *
	$__¡rdup
 (cÚ¡ *
__¡rg
è
__THROW
 
__©ibu_m®loc__
;

1279 
	#__¡rdup
(
s
) \

1280 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
s
è&& 
	`__¡rg2_1b±r_p
 (s) \

1281 ? (((cÚ¡ *è(
s
))[0] == '\0' \

1282 ? (*è
	`ÿÎoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Ën
 = 
	`¡¾
 (
s
) + 1; \

1284 *
__»tv®
 = (*è
	`m®loc
 (
__Ën
); \

1285 ià(
__»tv®
 !ð
NULL
) \

1286 
__»tv®
 = (*è
	`memýy
 (__»tv®, 
s
, 
__Ën
); \

1287 
__»tv®
; 
	}
})) \

1288 : 
	`__¡rdup
 (
s
)))

	)

1290 #ià
defed
 
__USE_XOPEN_EXTENDED
 || defed 
__USE_XOPEN2K8


1291 
	#¡rdup
(
s
è
	`__¡rdup
 (s)

	)

1295 #iâdeà
_HAVE_STRING_ARCH_¡ºdup


1297 *
	$__¡ºdup
 (cÚ¡ *
__¡rg
, 
size_t
 
__n
)

1298 
__THROW
 
__©ibu_m®loc__
;

1299 
	#__¡ºdup
(
s
, 
n
) \

1300 (
	`__exnsiÚ__
 (
	`__but_cÚ¡ªt_p
 (
s
è&& 
	`__¡rg2_1b±r_p
 (s) \

1301 ? (((cÚ¡ *è(
s
))[0] == '\0' \

1302 ? (*è
	`ÿÎoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Ën
 = 
	`¡¾
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__»tv®
; \

1306 ià(
__n
 < 
__Ën
) \

1307 
__Ën
 = 
__n
 + 1; \

1308 
__»tv®
 = (*è
	`m®loc
 (
__Ën
); \

1309 ià(
__»tv®
 !ð
NULL
) \

1311 
__»tv®
[
__Ën
 - 1] = '\0'; \

1312 
__»tv®
 = (*è
	`memýy
 (__»tv®, 
s
, \

1313 
__Ën
 - 1); \

1315 
__»tv®
; 
	}
})) \

1316 : 
	`__¡ºdup
 (
s
, 
n
)))

	)

1318 #ifdeà
__USE_XOPEN2K8


1319 
	#¡ºdup
(
s
, 
n
è
	`__¡ºdup
 (s,)

	)

1325 #iâdeà
_FORCE_INLINES


1326 #undeà
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #iâdeà
_STRING_H


22 #ià!
__GNUC_PREREQ
 (5,0)

23 
__w¬ndeþ
 (
__w¬n_mem£t_zo_Ën
,

27 #iâdeà
__ýlu¥lus


31 #undeà
memýy


32 #undeà
memmove


33 #undeà
mem£t


34 #undeà
¡rÿt


35 #undeà
¡rýy


36 #undeà
¡ºÿt


37 #undeà
¡ºýy


38 #ifdeà
__USE_GNU


39 #undeà
mempýy


40 #undeà
¡pýy


42 #ifdeà
__USE_MISC


43 #undeà
bcÝy


44 #undeà
bzo


49 
__fÜtify_funùiÚ
 *

50 
__NTH
 (
	$memýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
,

51 
size_t
 
__Ën
))

53  
	`__but___memýy_chk
 (
__de¡
, 
__¤c
, 
__Ën
, 
	`__bos0
 (__dest));

54 
	}
}

56 
__fÜtify_funùiÚ
 *

57 
__NTH
 (
	$memmove
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__Ën
))

59  
	`__but___memmove_chk
 (
__de¡
, 
__¤c
, 
__Ën
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifdeà
__USE_GNU


63 
__fÜtify_funùiÚ
 *

64 
__NTH
 (
	$mempýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
,

65 
size_t
 
__Ën
))

67  
	`__but___mempýy_chk
 (
__de¡
, 
__¤c
, 
__Ën
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__fÜtify_funùiÚ
 *

78 
__NTH
 (
	$mem£t
 (*
__de¡
, 
__ch
, 
size_t
 
__Ën
))

82 #ià!
	`__GNUC_PREREQ
 (5,0)

83 ià(
	`__but_cÚ¡ªt_p
 (
__Ën
) && __len == 0

84 && (!
	`__but_cÚ¡ªt_p
 (
__ch
) || __ch != 0))

86 
	`__w¬n_mem£t_zo_Ën
 ();

87  
__de¡
;

90  
	`__but___mem£t_chk
 (
__de¡
, 
__ch
, 
__Ën
, 
	`__bos0
 (__dest));

91 
	}
}

93 #ifdeà
__USE_MISC


94 
__fÜtify_funùiÚ
 

95 
__NTH
 (
	$bcÝy
 (cÚ¡ *
__¤c
, *
__de¡
, 
size_t
 
__Ën
))

97 (è
	`__but___memmove_chk
 (
__de¡
, 
__¤c
, 
__Ën
, 
	`__bos0
 (__dest));

98 
	}
}

100 
__fÜtify_funùiÚ
 

101 
__NTH
 (
	$bzo
 (*
__de¡
, 
size_t
 
__Ën
))

103 (è
	`__but___mem£t_chk
 (
__de¡
, '\0', 
__Ën
, 
	`__bos0
 (__dest));

104 
	}
}

107 
__fÜtify_funùiÚ
 *

108 
__NTH
 (
	$¡rýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
))

110  
	`__but___¡rýy_chk
 (
__de¡
, 
__¤c
, 
	`__bos
 (__dest));

111 
	}
}

113 #ifdeà
__USE_GNU


114 
__fÜtify_funùiÚ
 *

115 
__NTH
 (
	$¡pýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
))

117  
	`__but___¡pýy_chk
 (
__de¡
, 
__¤c
, 
	`__bos
 (__dest));

118 
	}
}

122 
__fÜtify_funùiÚ
 *

123 
__NTH
 (
	$¡ºýy
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
,

124 
size_t
 
__Ën
))

126  
	`__but___¡ºýy_chk
 (
__de¡
, 
__¤c
, 
__Ën
, 
	`__bos
 (__dest));

127 
	}
}

130 *
	$__¡²ýy_chk
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
,

131 
size_t
 
__de¡Ën
è
__THROW
;

132 *
	`__REDIRECT_NTH
 (
__¡²ýy_®s
, (*
__de¡
, cÚ¡ *
__¤c
,

133 
size_t
 
__n
), 
¡²ýy
);

135 
__fÜtify_funùiÚ
 *

136 
	`__NTH
 (
	$¡²ýy
 (*
__de¡
, cÚ¡ *
__¤c
, 
size_t
 
__n
))

138 ià(
	`__bos
 (
__de¡
è!ð(
size_t
) -1

139 && (!
	`__but_cÚ¡ªt_p
 (
__n
è|| __À> 
	`__bos
 (
__de¡
)))

140  
	`__¡²ýy_chk
 (
__de¡
, 
__¤c
, 
__n
, 
	`__bos
 (__dest));

141  
	`__¡²ýy_®s
 (
__de¡
, 
__¤c
, 
__n
);

142 
	}
}

145 
__fÜtify_funùiÚ
 *

146 
__NTH
 (
	$¡rÿt
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
))

148  
	`__but___¡rÿt_chk
 (
__de¡
, 
__¤c
, 
	`__bos
 (__dest));

149 
	}
}

152 
__fÜtify_funùiÚ
 *

153 
__NTH
 (
	$¡ºÿt
 (*
__»¡riù
 
__de¡
, cÚ¡ *__»¡riù 
__¤c
,

154 
size_t
 
__Ën
))

156  
	`__but___¡ºÿt_chk
 (
__de¡
, 
__¤c
, 
__Ën
, 
	`__bos
 (__dest));

157 
	}
}

	@/usr/include/bits/waitflags.h

19 #ià!
defed
 
_SYS_WAIT_H
 && !defed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #ià
defed
 
__USE_XOPEN
 || defed 
__USE_XOPEN2K8


41 #iâdeà
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #undeà
P_ALL


47 #undeà
P_PID


48 #undeà
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty³_t
;

	@/usr/include/bits/waitstatus.h

19 #ià!
defed
 
_SYS_WAIT_H
 && !defed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
¡©us
è(((¡©usè& 0xff00è>> 8)

	)

31 
	#__WTERMSIG
(
¡©us
è((¡©usè& 0x7f)

	)

34 
	#__WSTOPSIG
(
¡©us
è
	`__WEXITSTATUS
(¡©us)

	)

37 
	#__WIFEXITED
(
¡©us
è(
	`__WTERMSIG
(¡©usè=ð0)

	)

40 
	#__WIFSIGNALED
(
¡©us
) \

41 (((sigÃd è(((
¡©us
è& 0x7fè+ 1è>> 1è> 0)

	)

44 
	#__WIFSTOPPED
(
¡©us
è(((¡©usè& 0xffè=ð0x7f)

	)

48 #ifdeà
WCONTINUED


49 
	#__WIFCONTINUED
(
¡©us
è((¡©usè=ð
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
¡©us
è((¡©usè& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
»t
, 
sig
è(Ôè<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
è((sigè<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_MISC


64 
	~<dn.h
>

66 
	uwa


68 
	mw_¡©us
;

71 #if 
__BYTE_ORDER
 =ð
__LITTLE_ENDIAN


72 
	m__w_rmsig
:7;

73 
	m__w_cÜedump
:1;

74 
	m__w_»tcode
:8;

77 #if 
__BYTE_ORDER
 =ð
__BIG_ENDIAN


79 
	m__w_»tcode
:8;

80 
	m__w_cÜedump
:1;

81 
	m__w_rmsig
:7;

83 } 
	m__wa_rm©ed
;

86 #if 
__BYTE_ORDER
 =ð
__LITTLE_ENDIAN


87 
	m__w_¡Ýv®
:8;

88 
	m__w_¡Ýsig
:8;

91 #if 
__BYTE_ORDER
 =ð
__BIG_ENDIAN


93 
	m__w_¡Ýsig
:8;

94 
	m__w_¡Ýv®
:8;

96 } 
	m__wa_¡Ý³d
;

99 
	#w_rmsig
 
__wa_rm©ed
.
__w_rmsig


	)

100 
	#w_cÜedump
 
__wa_rm©ed
.
__w_cÜedump


	)

101 
	#w_»tcode
 
__wa_rm©ed
.
__w_»tcode


	)

102 
	#w_¡Ýsig
 
__wa_¡Ý³d
.
__w_¡Ýsig


	)

103 
	#w_¡Ýv®
 
__wa_¡Ý³d
.
__w_¡Ýv®


	)

	@/usr/include/bits/wchar.h

19 #iâdeà
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifdeà
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ià
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffffà+ 
L
'\0')

	)

41 #ifdeà
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ià
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #ià
defed
 
__x86_64__
 && !defed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifdeà
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/features.h

18 #iâdef 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #undeà
__USE_ISOC11


98 #undeà
__USE_ISOC99


99 #undeà
__USE_ISOC95


100 #undeà
__USE_ISOCXX11


101 #undeà
__USE_POSIX


102 #undeà
__USE_POSIX2


103 #undeà
__USE_POSIX199309


104 #undeà
__USE_POSIX199506


105 #undeà
__USE_XOPEN


106 #undeà
__USE_XOPEN_EXTENDED


107 #undeà
__USE_UNIX98


108 #undeà
__USE_XOPEN2K


109 #undeà
__USE_XOPEN2KXSI


110 #undeà
__USE_XOPEN2K8


111 #undeà
__USE_XOPEN2K8XSI


112 #undeà
__USE_LARGEFILE


113 #undeà
__USE_LARGEFILE64


114 #undeà
__USE_FILE_OFFSET64


115 #undeà
__USE_MISC


116 #undeà
__USE_ATFILE


117 #undeà
__USE_GNU


118 #undeà
__USE_REENTRANT


119 #undeà
__USE_FORTIFY_LEVEL


120 #undeà
__KERNEL_STRICT_NAMES


124 #iâdeà
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #ià
defed
 
__GNUC__
 && defed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
m
) \

137 ((
__GNUC__
 << 16è+ 
__GNUC_MINOR__
 >ð((
maj
è<< 16è+ (
m
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
m
è0

	)

146 #ià(
defed
 
_BSD_SOURCE
 || defed 
_SVID_SOURCE
) \

147 && !
defed
 
	g_DEFAULT_SOURCE


152 #undeà
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifdeà
_GNU_SOURCE


158 #undeà
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #undeà
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #undeà
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #undeà
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #undeà
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #undeà
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #undeà
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #undeà
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #undeà
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #undeà
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #ià(
defed
 
_DEFAULT_SOURCE
 \

183 || (!
defed
 
	g__STRICT_ANSI__
 \

184 && !
defed
 
	g_ISOC99_SOURCE
 \

185 && !
defed
 
	g_POSIX_SOURCE
 && !defed 
	g_POSIX_C_SOURCE
 \

186 && !
defed
 
	g_XOPEN_SOURCE
))

187 #undeà
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #ià(
defed
 
_ISOC11_SOURCE
 \

193 || (
defed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #ià(
defed
 
_ISOC99_SOURCE
 || defed 
_ISOC11_SOURCE
 \

199 || (
defed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #ià(
defed
 
_ISOC99_SOURCE
 || defed 
_ISOC11_SOURCE
 \

205 || (
defed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #ià((
defed
 
__ýlu¥lus
 && __cplusplus >= 201103L) \

214 || 
defed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifdeà
_DEFAULT_SOURCE


222 #ià!
defed
 
_POSIX_SOURCE
 && !defed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #undeà
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #undeà
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #ià((!
defed
 
__STRICT_ANSI__
 \

231 || (
defed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
defed
 
_POSIX_SOURCE
 && !defed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #ià
defed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ià
defed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ià
defed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #ià(
defed
 
_POSIX_SOURCE
 \

247 || (
defed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
defed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #ià
defed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >ð2 || defed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #ià
defed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #ià
defed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #ià
defed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #undeà
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #undeà
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #ià
defed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #undeà
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #ià(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #undeà
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #ià(
_XOPEN_SOURCE
 - 0) >= 600

286 #ià(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #undeà
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #undeà
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifdeà
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifdeà
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifdeà
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #ià
defed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #ià
defed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #ià
defed
 
_REENTRANT
 || defed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #ià
defed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1è&& 
defed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #ià
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<¡dc-´edef.h
>

353 #undeà
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
m
) \

362 ((
__GLIBC__
 << 16è+ 
__GLIBC_MINOR__
 >ð((
maj
è<< 16è+ (
m
))

	)

365 #iâdeà
__ASSEMBLER__


366 #iâdeà
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #ià
defed
 
__USE_FILE_OFFSET64
 && !defed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #ià
__GNUC_PREREQ
 (2, 7è&& 
defed
 
__OPTIMIZE__
 \

381 && !
defed
 
	g__OPTIMIZE_SIZE__
 && !defed 
	g__NO_INLINE__
 \

382 && 
defed
 
	g__exº_le


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/¡ubs.h
>

	@/usr/include/sys/types.h

22 #iâdef 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<ã©u»s.h
>

27 
	g__BEGIN_DECLS


29 
	~<bs/ty³s.h
>

31 #ifdef 
__USE_MISC


32 #iâdeà
__u_ch¬_defed


33 
__u_ch¬
 
	tu_ch¬
;

34 
__u_shÜt
 
	tu_shÜt
;

35 
__u_t
 
	tu_t
;

36 
__u_lÚg
 
	tu_lÚg
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¬_defed


	)

44 
__loff_t
 
	tloff_t
;

46 #iâdeà
__o_t_defed


47 #iâdeà
__USE_FILE_OFFSET64


48 
__o_t
 
	to_t
;

50 
__o64_t
 
	to_t
;

52 
	#__o_t_defed


	)

54 #ià
defed
 
__USE_LARGEFILE64
 && !defed 
__o64_t_defed


55 
__o64_t
 
	to64_t
;

56 
	#__o64_t_defed


	)

59 #iâdeà
__dev_t_defed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_defed


	)

64 #iâdeà
__gid_t_defed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_defed


	)

69 #iâdeà
__mode_t_defed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_defed


	)

74 #iâdeà
__Æk_t_defed


75 
__Æk_t
 
	tÆk_t
;

76 
	#__Æk_t_defed


	)

79 #iâdeà
__uid_t_defed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_defed


	)

84 #iâdeà
__off_t_defed


85 #iâdeà
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_defed


	)

92 #ià
defed
 
__USE_LARGEFILE64
 && !defed 
__off64_t_defed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_defed


	)

97 #iâdeà
__pid_t_defed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_defed


	)

102 #ià(
defed
 
__USE_XOPEN
 || defed 
__USE_XOPEN2K8
) \

103 && !
defed
 
__id_t_defed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_defed


	)

108 #iâdeà
__ssize_t_defed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_defed


	)

113 #ifdef 
__USE_MISC


114 #iâdeà
__daddr_t_defed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ÿddr_t
 
	tÿddr_t
;

117 
	#__daddr_t_defed


	)

121 #ià(
defed
 
__USE_MISC
 || defed 
__USE_XOPEN
è&& !defed 
__key_t_defed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_defed


	)

126 #ià
defed
 
__USE_XOPEN
 || defed 
__USE_XOPEN2K8


127 
	#__Ãed_þock_t


	)

129 
	#__Ãed_time_t


	)

130 
	#__Ãed_tim_t


	)

131 
	#__Ãed_þockid_t


	)

132 
	~<time.h
>

134 #ifdeà
__USE_XOPEN


135 #iâdeà
__u£cÚds_t_defed


136 
__u£cÚds_t
 
	tu£cÚds_t
;

137 
	#__u£cÚds_t_defed


	)

139 #iâdeà
__su£cÚds_t_defed


140 
__su£cÚds_t
 
	tsu£cÚds_t
;

141 
	#__su£cÚds_t_defed


	)

145 
	#__Ãed_size_t


	)

146 
	~<¡ddef.h
>

148 #ifdeà
__USE_MISC


150 
	tulÚg
;

151 
	tushÜt
;

152 
	tut
;

157 #ià!
__GNUC_PREREQ
 (2, 7)

160 #iâdeà
__t8_t_defed


161 
	#__t8_t_defed


	)

162 
	tt8_t
;

163 
	tt16_t
;

164 
	tt32_t
;

165 #ià
__WORDSIZE
 == 64

166 
	tt64_t
;

168 
__exnsiÚ__
 
	tt64_t
;

173 
	tu_t8_t
;

174 
	tu_t16_t
;

175 
	tu_t32_t
;

176 #ià
__WORDSIZE
 == 64

177 
	tu_t64_t
;

179 
__exnsiÚ__
 
	tu_t64_t
;

182 
	t»gi¡_t
;

187 
	#__tN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©ibu__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_tN_t
(
	tN
, 
	tMODE
) \

190 
	tu_t
##
	tN
##
	t_t
 
	t__©ibu__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #iâdeà
	t__t8_t_defed


193 
	t__t8_t_defed


	)

194 
	t__tN_t
 (8, 
	t__QI__
);

195 
__tN_t
 (16, 
__HI__
);

196 
__tN_t
 (32, 
__SI__
);

197 
__tN_t
 (64, 
__DI__
);

200 
__u_tN_t
 (8, 
__QI__
);

201 
__u_tN_t
 (16, 
__HI__
);

202 
__u_tN_t
 (32, 
__SI__
);

203 
__u_tN_t
 (64, 
__DI__
);

205 
	t»gi¡_t
 
	t__©ibu__
 ((
	t__mode__
 (
	t__wÜd__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<dn.h
>

219 
	~<sys/£Ëù.h
>

222 
	~<sys/sysmaüos.h
>

226 #ià(
defed
 
__USE_UNIX98
 || defed 
__USE_XOPEN2K8
) \

227 && !
defed
 
__blksize_t_defed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_defed


	)

233 #iâdeà
__USE_FILE_OFFSET64


234 #iâdeà
__blkút_t_defed


235 
__blkút_t
 
	tblkút_t
;

236 
	#__blkút_t_defed


	)

238 #iâdeà
__fsblkút_t_defed


239 
__fsblkút_t
 
	tfsblkút_t
;

240 
	#__fsblkút_t_defed


	)

242 #iâdeà
__fsfút_t_defed


243 
__fsfút_t
 
	tfsfút_t
;

244 
	#__fsfút_t_defed


	)

247 #iâdeà
__blkút_t_defed


248 
__blkút64_t
 
	tblkút_t
;

249 
	#__blkút_t_defed


	)

251 #iâdeà
__fsblkút_t_defed


252 
__fsblkút64_t
 
	tfsblkút_t
;

253 
	#__fsblkút_t_defed


	)

255 #iâdeà
__fsfút_t_defed


256 
__fsfút64_t
 
	tfsfút_t
;

257 
	#__fsfút_t_defed


	)

261 #ifdeà
__USE_LARGEFILE64


262 
__blkút64_t
 
	tblkút64_t
;

263 
__fsblkút64_t
 
	tfsblkút64_t
;

264 
__fsfút64_t
 
	tfsfút64_t
;

269 #ià
defed
 
__USE_POSIX199506
 || defed 
__USE_UNIX98


270 
	~<bs/±h»adty³s.h
>

273 
	g__END_DECLS


	@/usr/include/xlocale.h

20 #iâdeà
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loÿË_¡ruù


30 
__loÿË_d©a
 *
	m__loÿËs
[13];

33 cÚ¡ *
	m__ùy³_b
;

34 cÚ¡ *
	m__ùy³_tÞow
;

35 cÚ¡ *
	m__ùy³_touµ
;

38 cÚ¡ *
	m__Çmes
[13];

39 } *
	t__loÿË_t
;

42 
__loÿË_t
 
	tloÿË_t
;

	@/usr/include/bits/pthreadtypes.h

18 #iâdeà
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bs/wÜdsize.h
>

23 #ifdeà
__x86_64__


24 #ià
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±h»ad_t
;

63 
	u±h»ad_©_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__®ign
;

68 #iâdeà
__have_±h»ad_©_t


69 
±h»ad_©_t
 
	t±h»ad_©_t
;

70 
	#__have_±h»ad_©_t
 1

	)

74 #ifdeà
__x86_64__


75 
	s__±h»ad_º®_li¡


77 
__±h»ad_º®_li¡
 *
	m__´ev
;

78 
__±h»ad_º®_li¡
 *
	m__Ãxt
;

79 } 
	t__±h»ad_li¡_t
;

81 
	s__±h»ad_º®_¦i¡


83 
__±h»ad_º®_¦i¡
 *
	m__Ãxt
;

84 } 
	t__±h»ad_¦i¡_t
;

92 
	s__±h»ad_mux_s


94 
	m__lock
;

95 
	m__couÁ
;

96 
	m__owÃr
;

97 #ifdeà
__x86_64__


98 
	m__nu£rs
;

102 
	m__kd
;

103 #ifdeà
__x86_64__


104 
	m__¥s
;

105 
	m__isiÚ
;

106 
__±h»ad_li¡_t
 
	m__li¡
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exnsiÚ__
 union

116 
	m__e¥s
;

117 
	m__isiÚ
;

118 
	#__¥s
 
__isiÚ_d©a
.
__e¥s


	)

119 
	#__isiÚ
 
__isiÚ_d©a
.
__isiÚ


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__isiÚ_d©a
;

122 
__±h»ad_¦i¡_t
 
	m__li¡
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__®ign
;

128 } 
	t±h»ad_mux_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__®ign
;

134 } 
	t±h»ad_mux©_t
;

143 
	m__lock
;

144 
	m__fux
;

145 
__exnsiÚ__
 
	m__tÙ®_£q
;

146 
__exnsiÚ__
 
	m__wakeup_£q
;

147 
__exnsiÚ__
 
	m__wok_£q
;

148 *
	m__mux
;

149 
	m__nwas
;

150 
	m__brßdÿ¡_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exnsiÚ__
 
	m__®ign
;

154 } 
	t±h»ad_cÚd_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__®ign
;

160 } 
	t±h»ad_cÚd©_t
;

164 
	t±h»ad_key_t
;

168 
	t±h»ad_Úû_t
;

171 #ià
defed
 
__USE_UNIX98
 || defed 
__USE_XOPEN2K


176 #ifdeà
__x86_64__


179 
	m__lock
;

180 
	m__Ä_»ads
;

181 
	m__»ads_wakeup
;

182 
	m__wr_wakeup
;

183 
	m__Ä_»ads_queued
;

184 
	m__Ä_wrs_queued
;

185 
	m__wr
;

186 
	m__sh¬ed
;

187 sigÃd 
	m__rwisiÚ
;

188 #ifdeà 
__ILP32__


189 
	m__·d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__·d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__·d2
;

198 
	m__æags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__Ä_»ads
;

206 
	m__»ads_wakeup
;

207 
	m__wr_wakeup
;

208 
	m__Ä_»ads_queued
;

209 
	m__Ä_wrs_queued
;

212 
	m__æags
;

213 
	m__sh¬ed
;

214 sigÃd 
	m__rwisiÚ
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__·d2
;

217 
	m__wr
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__®ign
;

222 } 
	t±h»ad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__®ign
;

228 } 
	t±h»ad_rwlock©_t
;

232 #ifdeà
__USE_XOPEN2K


234 vÞ©
	t±h»ad_¥lock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__®ign
;

243 } 
	t±h»ad_b¬rr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__®ign
;

249 } 
	t±h»ad_b¬r¿r_t
;

253 #iâdeà
__x86_64__


255 
	#__þnup_fù_©ibu
 
	`__©ibu__
 ((
	`__»g·rm__
 (1)))

	)

	@/usr/include/bits/types.h

23 #iâdef 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<ã©u»s.h
>

27 
	~<bs/wÜdsize.h
>

30 
	t__u_ch¬
;

31 
	t__u_shÜt
;

32 
	t__u_t
;

33 
	t__u_lÚg
;

36 sigÃd 
	t__t8_t
;

37 
	t__ut8_t
;

38 sigÃd 
	t__t16_t
;

39 
	t__ut16_t
;

40 sigÃd 
	t__t32_t
;

41 
	t__ut32_t
;

42 #ià
__WORDSIZE
 == 64

43 sigÃd 
	t__t64_t
;

44 
	t__ut64_t
;

46 
__exnsiÚ__
 sigÃd 
	t__t64_t
;

47 
__exnsiÚ__
 
	t__ut64_t
;

51 #ià
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exnsiÚ__
 
	t__quad_t
;

56 
__exnsiÚ__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #ià
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exnsiÚ__
 

	)

107 #ià
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bs/ty³sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__o_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__o64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__Æk_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__þock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__¾im_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__¾im64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£cÚds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£cÚds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__þockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__tim_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blkút_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blkút64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblkút_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblkút64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfút_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfút64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fswÜd_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysÿÎ_¦Úg_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysÿÎ_ulÚg_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ÿddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g___t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockËn_t
;

192 #undeà
__STD_TYPE


	@/usr/include/endian.h

18 #iâdef 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<ã©u»s.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bs/dn.h
>

40 #iâdeà
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #ià
__BYTE_ORDER
 =ð
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
èLO, 
	)
HI

53 #ià
__BYTE_ORDER
 =ð
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
èHI, 
	)
LO

58 #ià
defed
 
__USE_MISC
 && !defed 
__ASSEMBLER__


60 
	~<bs/bysw­.h
>

62 #ià
__BYTE_ORDER
 =ð
__LITTLE_ENDIAN


63 
	#htobe16
(
x
è
	`__bsw­_16
 (x)

	)

64 
	#htÞe16
(
x
è(x)

	)

65 
	#be16toh
(
x
è
	`__bsw­_16
 (x)

	)

66 
	#Ë16toh
(
x
è(x)

	)

68 
	#htobe32
(
x
è
	`__bsw­_32
 (x)

	)

69 
	#htÞe32
(
x
è(x)

	)

70 
	#be32toh
(
x
è
	`__bsw­_32
 (x)

	)

71 
	#Ë32toh
(
x
è(x)

	)

73 
	#htobe64
(
x
è
	`__bsw­_64
 (x)

	)

74 
	#htÞe64
(
x
è(x)

	)

75 
	#be64toh
(
x
è
	`__bsw­_64
 (x)

	)

76 
	#Ë64toh
(
x
è(x)

	)

79 
	#htobe16
(
x
è(x)

	)

80 
	#htÞe16
(
x
è
	`__bsw­_16
 (x)

	)

81 
	#be16toh
(
x
è(x)

	)

82 
	#Ë16toh
(
x
è
	`__bsw­_16
 (x)

	)

84 
	#htobe32
(
x
è(x)

	)

85 
	#htÞe32
(
x
è
	`__bsw­_32
 (x)

	)

86 
	#be32toh
(
x
è(x)

	)

87 
	#Ë32toh
(
x
è
	`__bsw­_32
 (x)

	)

89 
	#htobe64
(
x
è(x)

	)

90 
	#htÞe64
(
x
è
	`__bsw­_64
 (x)

	)

91 
	#be64toh
(
x
è(x)

	)

92 
	#Ë64toh
(
x
è
	`__bsw­_64
 (x)

	)

	@/usr/include/gnu/stubs.h

6 #ià!
defed
 
__x86_64__


7 
	~<gnu/¡ubs-32.h
>

9 #ià
defed
 
__x86_64__
 && defed 
__LP64__


10 
	~<gnu/¡ubs-64.h
>

12 #ià
defed
 
__x86_64__
 && defed 
__ILP32__


13 
	~<gnu/¡ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #iâdef 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifdeà
__GCC_IEC_559


37 #ià
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifdeà
__GCC_IEC_559_COMPLEX


45 #ià
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #iâdef 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #iâdeà
_FEATURES_H


23 
	~<ã©u»s.h
>

29 #ià
defed
 
__GNUC__
 && !defed 
__STDC__


34 #undeà
__P


35 #undeà
__PMT


37 #ifdeà
__GNUC__


41 #ià
__GNUC_PREREQ
 (4, 6è&& !
defed
 
_LIBC


42 
	#__LEAF
 , 
__Ëaf__


	)

43 
	#__LEAF_ATTR
 
	`__©ibu__
 ((
__Ëaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #ià!
defed
 
__ýlu¥lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©ibu__
 ((
__nÙhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©ibu__
 ((
__nÙhrow__
))

	)

57 
	#__NTH
(
fù
è
	`__©ibu__
 ((
__nÙhrow__
 
__LEAF
)è
	)
fct

59 #ià
defed
 
__ýlu¥lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
fù
è
__LEAF_ATTR
 fù 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
fù
è
	)
fct

72 
	#__le


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
fù
è
	)
fct

82 
	#__P
(
¬gs
è
	)
args

83 
	#__PMT
(
¬gs
è
	)
args

88 
	#__CONCAT
(
x
,
y
èx ## 
	)
y

89 
	#__STRING
(
x
è#x

	)

92 
	#__±r_t
 *

	)

93 
	#__lÚg_doubË_t
 

	)

97 #ifdef 
__ýlu¥lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #ià
defed
 
__ýlu¥lus
 && defed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
Çme¥aû
 
¡d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
Çme
è
usg
 
¡d
::Çme;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
Çme¥aû
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
Çme
è
usg
 
__c99
::Çme;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
Çme
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
Çme
)

	)

132 
	#__bos
(
±r
è
	`__but_objeù_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
è
	`__but_objeù_size
 (±r, 0)

	)

135 #ià
__GNUC_PREREQ
 (4,3)

136 
	#__w¬ndeþ
(
Çme
, 
msg
) \

137 
	`Çme
 (è
	`__©ibu__
((
	`__w¬ng__
 (
msg
)))

	)

138 
	#__w¬Çr
(
msg
è
	`__©ibu__
((
	`__w¬ng__
 (msg)))

	)

139 
	#__rÜdeþ
(
Çme
, 
msg
) \

140 
	`Çme
 (è
	`__©ibu__
((
	`__rÜ__
 (
msg
)))

	)

142 
	#__w¬ndeþ
(
Çme
, 
msg
è
	`Çme
 ()

	)

143 
	#__w¬Çr
(
msg
)

	)

144 
	#__rÜdeþ
(
Çme
, 
msg
è
	`Çme
 ()

	)

148 #ià
__GNUC_PREREQ
 (2,97)

150 
	#__æex¬r
 []

	)

152 #ifdeà
__GNUC__


153 
	#__æex¬r
 [0]

	)

155 #ià
defed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__æex¬r
 []

	)

159 
	#__æex¬r
 [1]

	)

175 #ià
defed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
Çme
, 
´Ùo
, 
®s
èÇm´ÙØ
	`__asm__
 (
	`__ASMNAME
 (#®s))

	)

178 #ifdeà
__ýlu¥lus


179 
	#__REDIRECT_NTH
(
Çme
, 
´Ùo
, 
®s
) \

180 
Çme
 
´Ùo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#®s))

	)

181 
	#__REDIRECT_NTHNL
(
Çme
, 
´Ùo
, 
®s
) \

182 
Çme
 
´Ùo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#®s))

	)

184 
	#__REDIRECT_NTH
(
Çme
, 
´Ùo
, 
®s
) \

185 
Çme
 
´Ùo
 
	`__asm__
 (
	`__ASMNAME
 (#®s)è
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
Çme
, 
´Ùo
, 
®s
) \

187 
Çme
 
´Ùo
 
	`__asm__
 (
	`__ASMNAME
 (#®s)è
__THROWNL


	)

189 
	#__ASMNAME
(
úame
è
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, cÇme)

	)

190 
	#__ASMNAME2
(
´efix
, 
úame
è
	`__STRING
 (´efixè
	)
cname

203 #ià!
defed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©ibu__
(
xyz
è

	)

210 #ià
__GNUC_PREREQ
 (2,96)

211 
	#__©ibu_m®loc__
 
	`__©ibu__
 ((
__m®loc__
))

	)

213 
	#__©ibu_m®loc__


	)

218 #ià
__GNUC_PREREQ
 (4, 3)

219 
	#__©ibu_®loc_size__
(
·¿ms
) \

220 
	`__©ibu__
 ((
__®loc_size__
 
·¿ms
))

	)

222 
	#__©ibu_®loc_size__
(
·¿ms
è

	)

228 #ià
__GNUC_PREREQ
 (2,96)

229 
	#__©ibu_pu»__
 
	`__©ibu__
 ((
__pu»__
))

	)

231 
	#__©ibu_pu»__


	)

235 #ià
__GNUC_PREREQ
 (2,5)

236 
	#__©ibu_cÚ¡__
 
	`__©ibu__
 ((
__cÚ¡__
))

	)

238 
	#__©ibu_cÚ¡__


	)

244 #ià
__GNUC_PREREQ
 (3,1)

245 
	#__©ibu_u£d__
 
	`__©ibu__
 ((
__u£d__
))

	)

246 
	#__©ibu_nole__
 
	`__©ibu__
 ((
__nole__
))

	)

248 
	#__©ibu_u£d__
 
	`__©ibu__
 ((
__unu£d__
))

	)

249 
	#__©ibu_nole__


	)

253 #ià
__GNUC_PREREQ
 (3,2)

254 
	#__©ibu_d»ÿd__
 
	`__©ibu__
 ((
__d»ÿd__
))

	)

256 
	#__©ibu_d»ÿd__


	)

265 #ià
__GNUC_PREREQ
 (2,8)

266 
	#__©ibu_fÜm©_¬g__
(
x
è
	`__©ibu__
 ((
	`__fÜm©_¬g__
 (x)))

	)

268 
	#__©ibu_fÜm©_¬g__
(
x
è

	)

275 #ià
__GNUC_PREREQ
 (2,97)

276 
	#__©ibu_fÜm©_¡rfmÚ__
(
a
,
b
) \

277 
	`__©ibu__
 ((
	`__fÜm©__
 (
__¡rfmÚ__
, 
a
, 
b
)))

	)

279 
	#__©ibu_fÜm©_¡rfmÚ__
(
a
,
b
è

	)

284 #ià
__GNUC_PREREQ
 (3,3)

285 
	#__nÚnuÎ
(
·¿ms
è
	`__©ibu__
 ((
__nÚnuÎ__
¬ams))

	)

287 
	#__nÚnuÎ
(
·¿ms
)

	)

292 #ià
__GNUC_PREREQ
 (3,4)

293 
	#__©ibu_w¬n_unu£d_»suÉ__
 \

294 
	`__©ibu__
 ((
__w¬n_unu£d_»suÉ__
))

	)

295 #ià
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©ibu_w¬n_unu£d_»suÉ__


	)

299 
	#__©ibu_w¬n_unu£d_»suÉ__


	)

301 #iâdeà
__wur


302 
	#__wur


	)

306 #ià
__GNUC_PREREQ
 (3,2)

307 
	#__®ways_le
 
__le
 
	`__©ibu__
 ((
__®ways_le__
))

	)

309 
	#__®ways_le
 
__le


	)

314 #ià
__GNUC_PREREQ
 (4,3)

315 
	#__©ibu_¬tificl__
 
	`__©ibu__
 ((
__¬tificl__
))

	)

317 
	#__©ibu_¬tificl__


	)

329 #ià(!
defed
 
__ýlu¥lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
defed
 
__þªg__
 && (defed 
__GNUC_STDC_INLINE__
 \

331 || 
defed
 
__GNUC_GNU_INLINE__
)))

332 #ià
defed
 
__GNUC_STDC_INLINE__
 || defed 
__ýlu¥lus


333 
	#__exº_le
 
__le
 
	`__©ibu__
 ((
__gnu_le__
))

	)

334 
	#__exº_®ways_le
 \

335 
__®ways_le
 
	`__©ibu__
 ((
__gnu_le__
))

	)

337 
	#__exº_le
 
__le


	)

338 
	#__exº_®ways_le
 
__®ways_le


	)

342 #ifdeà
__exº_®ways_le


343 
	#__fÜtify_funùiÚ
 
__exº_®ways_le
 
__©ibu_¬tificl__


	)

348 #ià
__GNUC_PREREQ
 (4,3)

349 
	#__va_¬g_·ck
(è
	`__but_va_¬g_·ck
 ()

	)

350 
	#__va_¬g_·ck_Ën
(è
	`__but_va_¬g_·ck_Ën
 ()

	)

357 #ià!
__GNUC_PREREQ
 (2,8)

358 
	#__exnsiÚ__


	)

362 #ià!
__GNUC_PREREQ
 (2,92)

363 
	#__»¡riù


	)

369 #ià
__GNUC_PREREQ
 (3,1è&& !
defed
 
__GNUG__


370 
	#__»¡riù_¬r
 
__»¡riù


	)

372 #ifdeà
__GNUC__


373 
	#__»¡riù_¬r


	)

375 #ià
defed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__»¡riù_¬r
 
»¡riù


	)

379 
	#__»¡riù_¬r


	)

384 #ià
__GNUC__
 >= 3

385 
	#__glibc_uÆiky
(
cÚd
è
	`__but_ex³ù
 ((cÚd), 0)

	)

386 
	#__glibc_liky
(
cÚd
è
	`__but_ex³ù
 ((cÚd), 1)

	)

388 
	#__glibc_uÆiky
(
cÚd
è(cÚd)

	)

389 
	#__glibc_liky
(
cÚd
è(cÚd)

	)

392 #ià(!
defed
 
_NÜuº
 \

393 && (
defed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

394 && !
	$__GNUC_PREREQ
 (4,7))

395 #ià
	`__GNUC_PREREQ
 (2,8)

396 
	#_NÜuº
 
	`__©ibu__
 ((
__nÜuº__
))

	)

398 
	#_NÜuº


	)

402 #ià(!
defed
 
_Stic_as£¹
 && !defed 
__ýlu¥lus
 \

403 && (
defed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

404 && (!
	`__GNUC_PREREQ
 (4, 6è|| 
defed
 
__STRICT_ANSI__
))

405 
	#_Stic_as£¹
(
ex´
, 
dgno¡ic
) \

406 (*
	`__Stic_as£¹_funùiÚ
 ()) \

407 [!! (¡ruù { 
__rÜ_if_Ãg©ive
: (
ex´
è? 2 : -1; })]

	)

410 
	~<bs/wÜdsize.h
>

412 #ià
defed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && defed 
__NO_LONG_DOUBLE_MATH


413 
	#__LDBL_COMPAT
 1

	)

414 #ifdeà
__REDIRECT


415 
	#__LDBL_REDIR1
(
Çme
, 
´Ùo
, 
®s
è
	`__REDIRECT
 (Çme,rÙo,ls)

	)

416 
	#__LDBL_REDIR
(
Çme
, 
´Ùo
) \

417 
	`__LDBL_REDIR1
 (
Çme
, 
´Ùo
, 
__Ædbl_
##Çme)

	)

418 
	#__LDBL_REDIR1_NTH
(
Çme
, 
´Ùo
, 
®s
è
	`__REDIRECT_NTH
 (Çme,rÙo,ls)

	)

419 
	#__LDBL_REDIR_NTH
(
Çme
, 
´Ùo
) \

420 
	`__LDBL_REDIR1_NTH
 (
Çme
, 
´Ùo
, 
__Ædbl_
##Çme)

	)

421 
	#__LDBL_REDIR1_DECL
(
Çme
, 
®s
) \

422 
	`__ty³of
 (
Çme
èÇm
	`__asm
 (
	`__ASMNAME
 (#®s));

	)

423 
	#__LDBL_REDIR_DECL
(
Çme
) \

424 
	`__ty³of
 (
Çme
èÇm
	`__asm
 (
	`__ASMNAME
 ("__Ædbl_" #Çme));

	)

425 
	#__REDIRECT_LDBL
(
Çme
, 
´Ùo
, 
®s
) \

426 
	`__LDBL_REDIR1
 (
Çme
, 
´Ùo
, 
__Ædbl_
##
®s
)

	)

427 
	#__REDIRECT_NTH_LDBL
(
Çme
, 
´Ùo
, 
®s
) \

428 
	`__LDBL_REDIR1_NTH
 (
Çme
, 
´Ùo
, 
__Ædbl_
##
®s
)

	)

431 #ià!
defed
 
__LDBL_COMPAT
 || !defed 
__REDIRECT


432 
	#__LDBL_REDIR1
(
Çme
, 
´Ùo
, 
®s
èÇm
	)
proto

433 
	#__LDBL_REDIR
(
Çme
, 
´Ùo
èÇm
	)
proto

434 
	#__LDBL_REDIR1_NTH
(
Çme
, 
´Ùo
, 
®s
èÇm´ÙØ
__THROW


	)

435 
	#__LDBL_REDIR_NTH
(
Çme
, 
´Ùo
èÇm´ÙØ
__THROW


	)

436 
	#__LDBL_REDIR_DECL
(
Çme
)

	)

437 #ifdeà
__REDIRECT


438 
	#__REDIRECT_LDBL
(
Çme
, 
´Ùo
, 
®s
è
	`__REDIRECT
 (Çme,rÙo,ls)

	)

439 
	#__REDIRECT_NTH_LDBL
(
Çme
, 
´Ùo
, 
®s
) \

440 
	`__REDIRECT_NTH
 (
Çme
, 
´Ùo
, 
®s
)

	)

	@/usr/include/sys/select.h

21 #iâdeà
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<ã©u»s.h
>

27 
	~<bs/ty³s.h
>

30 
	~<bs/£Ëù.h
>

33 
	~<bs/sig£t.h
>

35 #iâdeà
__sig£t_t_defed


36 
	#__sig£t_t_defed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__Ãed_time_t


	)

42 
	#__Ãed_time¥ec


	)

43 
	~<time.h
>

44 
	#__Ãed_timev®


	)

45 
	~<bs/time.h
>

47 #iâdeà
__su£cÚds_t_defed


48 
__su£cÚds_t
 
	tsu£cÚds_t
;

49 
	#__su£cÚds_t_defed


	)

54 
	t__fd_mask
;

57 #undeà
__NFDBITS


59 
	#__NFDBITS
 (8 * (è (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
è((dè/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
è((
__fd_mask
è(1UL << ((dè% 
__NFDBITS
)))

	)

68 #ifdeà
__USE_XOPEN


69 
__fd_mask
 
	mfds_bs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
è((£t)->
fds_bs
)

	)

72 
__fd_mask
 
	m__fds_bs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
è((£t)->
__fds_bs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifdeà
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£
è
	`__FD_SET
 (fd, fd£)

	)

91 
	#FD_CLR
(
fd
, 
fd£
è
	`__FD_CLR
 (fd, fd£)

	)

92 
	#FD_ISSET
(
fd
, 
fd£
è
	`__FD_ISSET
 (fd, fd£)

	)

93 
	#FD_ZERO
(
fd£
è
	`__FD_ZERO
 (fd£)

	)

96 
__BEGIN_DECLS


106 
£Ëù
 (
__nfds
, 
fd_£t
 *
__»¡riù
 
__»adfds
,

107 
fd_£t
 *
__»¡riù
 
__wrefds
,

108 
fd_£t
 *
__»¡riù
 
__exû±fds
,

109 
timev®
 *
__»¡riù
 
__timeout
);

111 #ifdeà
__USE_XOPEN2K


118 
p£Ëù
 (
__nfds
, 
fd_£t
 *
__»¡riù
 
__»adfds
,

119 
fd_£t
 *
__»¡riù
 
__wrefds
,

120 
fd_£t
 *
__»¡riù
 
__exû±fds
,

121 cÚ¡ 
time¥ec
 *
__»¡riù
 
__timeout
,

122 cÚ¡ 
__sig£t_t
 *
__»¡riù
 
__sigmask
);

127 #ià
__USE_FORTIFY_LEVEL
 > 0 && 
defed
 
__GNUC__


128 
	~<bs/£Ëù2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #iâdeà
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<ã©u»s.h
>

24 
__BEGIN_DECLS


26 
__exnsiÚ__


27 
	$gnu_dev_majÜ
 (
__dev
)

28 
__THROW
 
__©ibu_cÚ¡__
;

29 
__exnsiÚ__


30 
	$gnu_dev_mÜ
 (
__dev
)

31 
__THROW
 
__©ibu_cÚ¡__
;

32 
__exnsiÚ__


33 
	$gnu_dev_makedev
 (
__majÜ
,

34 
__mÜ
)

35 
__THROW
 
__©ibu_cÚ¡__
;

37 #ifdeà
__USE_EXTERN_INLINES


38 
__exnsiÚ__
 
__exº_le
 
__©ibu_cÚ¡__
 

39 
	`__NTH
 (
	$gnu_dev_majÜ
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exnsiÚ__
 
__exº_le
 
__©ibu_cÚ¡__
 

45 
__NTH
 (
	$gnu_dev_mÜ
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exnsiÚ__
 
__exº_le
 
__©ibu_cÚ¡__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__majÜ
, 
__mÜ
))

53  ((
__mÜ
 & 0xffè| ((
__majÜ
 & 0xfff) << 8)

54 | (((è(
__mÜ
 & ~0xff)) << 12)

55 | (((è(
__majÜ
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#majÜ
(
dev
è
	`gnu_dev_majÜ
 (dev)

	)

62 
	#mÜ
(
dev
è
	`gnu_dev_mÜ
 (dev)

	)

63 
	#makedev
(
maj
, 
m
è
	`gnu_dev_makedev
 (maj, m)

	)

	@/usr/include/time.h

22 #iâdef 
_TIME_H


24 #ià(! 
defed
 
__Ãed_time_t
 && !defed 
__Ãed_þock_t
 && \

25 ! 
defed
 
	g__Ãed_time¥ec
)

26 
	#_TIME_H
 1

	)

27 
	~<ã©u»s.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__Ãed_size_t


	)

36 
	#__Ãed_NULL


	)

37 
	~<¡ddef.h
>

41 
	~<bs/time.h
>

44 #ià!
defed
 
__STRICT_ANSI__
 && !defed 
__USE_XOPEN2K


45 #iâdeà
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #ià!
defed
 
__þock_t_defed
 && (defed 
_TIME_H
 || defed 
__Ãed_þock_t
)

53 
	#__þock_t_defed
 1

	)

55 
	~<bs/ty³s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__þock_t
 
	tþock_t
;

60 
	g__END_NAMESPACE_STD


61 #ià
defed
 
__USE_XOPEN
 || defed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
þock_t
)

66 #undeà
__Ãed_þock_t


68 #ià!
defed
 
__time_t_defed
 && (defed 
_TIME_H
 || defed 
__Ãed_time_t
)

69 
	#__time_t_defed
 1

	)

71 
	~<bs/ty³s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifdeà
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #undeà
__Ãed_time_t


84 #ià!
defed
 
__þockid_t_defed
 && \

85 ((
defed
 
_TIME_H
 && defed 
__USE_POSIX199309
è|| defed 
__Ãed_þockid_t
)

86 
	#__þockid_t_defed
 1

	)

88 
	~<bs/ty³s.h
>

91 
__þockid_t
 
	tþockid_t
;

94 #undeà
__þockid_time_t


96 #ià!
defed
 
__tim_t_defed
 && \

97 ((
defed
 
_TIME_H
 && defed 
__USE_POSIX199309
è|| defed 
__Ãed_tim_t
)

98 
	#__tim_t_defed
 1

	)

100 
	~<bs/ty³s.h
>

103 
__tim_t
 
	ttim_t
;

106 #undeà
__Ãed_tim_t


109 #ià(!
defed
 
__time¥ec_defed
 \

110 && ((
defed
 
_TIME_H
 \

111 && (
defed
 
__USE_POSIX199309
 \

112 || 
defed
 
__USE_ISOC11
)) \

113 || 
defed
 
__Ãed_time¥ec
))

114 
	#__time¥ec_defed
 1

	)

116 
	~<bs/ty³s.h
>

120 
	stime¥ec


122 
__time_t
 
tv_£c
;

123 
__sysÿÎ_¦Úg_t
 
tv_n£c
;

127 #undeà
__Ãed_time¥ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_m
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_mÚ
;

140 
tm_yr
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd¡
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 cÚ¡ *
tm_zÚe
;

149 
__tm_gmtoff
;

150 cÚ¡ *
__tm_zÚe
;

153 
__END_NAMESPACE_STD


154 #ià
defed
 
__USE_XOPEN
 || defed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifdeà
__USE_POSIX199309


161 
	sim¥ec


163 
time¥ec
 
_rv®
;

164 
time¥ec
 
_v®ue
;

168 
sigevt
;

172 #ifdeà
__USE_XOPEN2K


173 #iâdeà
__pid_t_defed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_defed


	)

180 #ifdeà
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
þock_t
 
	$þock
 (è
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__tim
è
__THROW
;

195 
	$difáime
 (
time_t
 
__time1
,ime_
__time0
)

196 
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

199 
time_t
 
	$mktime
 (
tm
 *
__
è
__THROW
;

205 
size_t
 
	$¡ráime
 (*
__»¡riù
 
__s
, 
size_t
 
__maxsize
,

206 cÚ¡ *
__»¡riù
 
__fÜm©
,

207 cÚ¡ 
tm
 *
__»¡riù
 
__
è
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifdeà
__USE_XOPEN


213 *
	$¡½time
 (cÚ¡ *
__»¡riù
 
__s
,

214 cÚ¡ *
__»¡riù
 
__fmt
, 
tm
 *
__
)

215 
__THROW
;

218 #ifdeà
__USE_XOPEN2K8


221 
	~<xloÿË.h
>

223 
size_t
 
	$¡ráime_l
 (*
__»¡riù
 
__s
, 
size_t
 
__maxsize
,

224 cÚ¡ *
__»¡riù
 
__fÜm©
,

225 cÚ¡ 
tm
 *
__»¡riù
 
__
,

226 
__loÿË_t
 
__loc
è
__THROW
;

229 #ifdeà
__USE_GNU


230 *
	$¡½time_l
 (cÚ¡ *
__»¡riù
 
__s
,

231 cÚ¡ *
__»¡riù
 
__fmt
, 
tm
 *
__
,

232 
__loÿË_t
 
__loc
è
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (cÚ¡ 
time_t
 *
__tim
è
__THROW
;

243 
tm
 *
	$loÿÉime
 (cÚ¡ 
time_t
 *
__tim
è
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifdeà
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (cÚ¡ 
time_t
 *
__»¡riù
 
__tim
,

250 
tm
 *
__»¡riù
 
__
è
__THROW
;

254 
tm
 *
	$loÿÉime_r
 (cÚ¡ 
time_t
 *
__»¡riù
 
__tim
,

255 
tm
 *
__»¡riù
 
__
è
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$asùime
 (cÚ¡ 
tm
 *
__
è
__THROW
;

264 *
	$ùime
 (cÚ¡ 
time_t
 *
__tim
è
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifdeà
__USE_POSIX


272 *
	$asùime_r
 (cÚ¡ 
tm
 *
__»¡riù
 
__
,

273 *
__»¡riù
 
__buf
è
__THROW
;

276 *
	$ùime_r
 (cÚ¡ 
time_t
 *
__»¡riù
 
__tim
,

277 *
__»¡riù
 
__buf
è
__THROW
;

282 *
__tzÇme
[2];

283 
__daylight
;

284 
__timezÚe
;

287 #ifdef 
__USE_POSIX


289 *
tzÇme
[2];

293 
	$tz£t
 (è
__THROW
;

296 #ià
defed
 
__USE_MISC
 || defed 
__USE_XOPEN


297 
daylight
;

298 
timezÚe
;

301 #ifdeà
__USE_MISC


304 
	$¡ime
 (cÚ¡ 
time_t
 *
__wh
è
__THROW
;

310 
	#__i¦p
(
yr
) \

311 ((
yr
è% 4 =ð0 && ((yrè% 100 !ð0 || (yrè% 400 =ð0))

	)

314 #ifdeà
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__
è
__THROW
;

322 
time_t
 
	$timoÿl
 (
tm
 *
__
è
__THROW
;

325 
	$dysize
 (
__yr
è
__THROW
 
	`__©ibu__
 ((
__cÚ¡__
));

329 #ifdeà
__USE_POSIX199309


334 
	`Çno¦p
 (cÚ¡ 
time¥ec
 *
__»que¡ed_time
,

335 
time¥ec
 *
__»mag
);

339 
	$þock_g»s
 (
þockid_t
 
__þock_id
, 
time¥ec
 *
__»s
è
__THROW
;

342 
	$þock_gtime
 (
þockid_t
 
__þock_id
, 
time¥ec
 *
__
è
__THROW
;

345 
	$þock_£ime
 (
þockid_t
 
__þock_id
, cÚ¡ 
time¥ec
 *
__
)

346 
__THROW
;

348 #ifdeà
__USE_XOPEN2K


353 
	`þock_Çno¦p
 (
þockid_t
 
__þock_id
, 
__æags
,

354 cÚ¡ 
time¥ec
 *
__»q
,

355 
time¥ec
 *
__»m
);

358 
	$þock_gýuþockid
 (
pid_t
 
__pid
, 
þockid_t
 *
__þock_id
è
__THROW
;

363 
	$tim_ü
 (
þockid_t
 
__þock_id
,

364 
sigevt
 *
__»¡riù
 
__evp
,

365 
tim_t
 *
__»¡riù
 
__timid
è
__THROW
;

368 
	$tim_de
 (
tim_t
 
__timid
è
__THROW
;

371 
	$tim_£ime
 (
tim_t
 
__timid
, 
__æags
,

372 cÚ¡ 
im¥ec
 *
__»¡riù
 
__v®ue
,

373 
im¥ec
 *
__»¡riù
 
__ov®ue
è
__THROW
;

376 
	$tim_gtime
 (
tim_t
 
__timid
, 
im¥ec
 *
__v®ue
)

377 
__THROW
;

380 
	$tim_govrun
 (
tim_t
 
__timid
è
__THROW
;

384 #ifdeà
__USE_ISOC11


386 
	$time¥ec_g
 (
time¥ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__nÚnuÎ
 ((1));

391 #ifdeà
__USE_XOPEN_EXTENDED


403 
gd©e_r
;

412 
tm
 *
	`gd©e
 (cÚ¡ *
__¡rg
);

415 #ifdeà
__USE_GNU


426 
	`gd©e_r
 (cÚ¡ *
__»¡riù
 
__¡rg
,

427 
tm
 *
__»¡riù
 
__»sbuå
);

430 
__END_DECLS


	@/usr/include/bits/byteswap.h

19 #ià!
defed
 
_BYTESWAP_H
 && !defed 
_NETINET_IN_H
 && !defed 
_ENDIAN_H


23 #iâdeà
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<ã©u»s.h
>

27 
	~<bs/ty³s.h
>

28 
	~<bs/wÜdsize.h
>

31 
	#__bsw­_cÚ¡ªt_16
(
x
) \

32 ((è((((
x
è>> 8è& 0xffè| (((xè& 0xffè<< 8)))

	)

35 
	~<bs/bysw­-16.h
>

38 
	#__bsw­_cÚ¡ªt_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
è& 0x0000ff00è<< 8è| (((xè& 0x000000ffè<< 24))

	)

42 #ifdeà
__GNUC__


43 #ià
__GNUC_PREREQ
 (4, 3)

44 
__le
 

45 
	$__bsw­_32
 (
__bsx
)

47  
	`__but_bsw­32
 (
__bsx
);

48 
	}
}

49 #ià
__GNUC__
 >= 2

50 #ià
__WORDSIZE
 =ð64 || (
defed
 
__i486__
 || defed 
__³Áium__
 \

51 || 
defed
 
	g__³Áium´o__
 || defed 
	g__³Áium4__
 \

52 || 
defed
 
	g__k8__
 || defed 
	g__©hlÚ__
 \

53 || 
defed
 
	g__k6__
 || defed 
	g__nocÚa__
 \

54 || 
defed
 
	g__cÜe2__
 || defed 
	g__geode__
 \

55 || 
defed
 
	g__amdçm10__
)

58 
	#__bsw­_32
(
x
) \

59 (
__exnsiÚ__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 ià(
	`__but_cÚ¡ªt_p
 (
__x
)) \

62 
__v
 = 
	`__bsw­_cÚ¡ªt_32
 (
__x
); \

64 
	`__asm__
 ("bsw­ %0" : "ô" (
__v
è: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw­_32
(
x
) \

68 (
__exnsiÚ__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 ià(
	`__but_cÚ¡ªt_p
 (
__x
)) \

71 
__v
 = 
	`__bsw­_cÚ¡ªt_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "ô" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw­_32
(
x
) \

83 (
__exnsiÚ__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw­_cÚ¡ªt_32
 (__x); }))

	)

87 
__le
 

88 
	$__bsw­_32
 (
__bsx
)

90  
	`__bsw­_cÚ¡ªt_32
 (
__bsx
);

91 
	}
}

95 #ià
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw­_cÚ¡ªt_64
(
x
) \

98 (
	`__exnsiÚ__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
è& 0x00000000000000ffuÎè<< 56)))

	)

107 #ià
__GNUC_PREREQ
 (4, 3)

108 
__le
 
__ut64_t


109 
	$__bsw­_64
 (
__ut64_t
 
__bsx
)

111  
	`__but_bsw­64
 (
__bsx
);

112 
	}
}

113 #ià
__WORDSIZE
 == 64

114 
	#__bsw­_64
(
x
) \

115 (
__exnsiÚ__
 \

116 ({ 
__ut64_t
 
__v
, 
__x
 = (
x
); \

117 ià(
	`__but_cÚ¡ªt_p
 (
__x
)) \

118 
__v
 = 
	`__bsw­_cÚ¡ªt_64
 (
__x
); \

120 
	`__asm__
 ("bsw­ %q0" : "ô" (
__v
è: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw­_64
(
x
) \

124 (
__exnsiÚ__
 \

125 ({ uniÚ { 
__exnsiÚ__
 
__ut64_t
 
__Î
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 ià(
	`__but_cÚ¡ªt_p
 (
x
)) \

128 
__r
.
__Î
 = 
	`__bsw­_cÚ¡ªt_64
 (
x
); \

131 
__w
.
__Î
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw­_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw­_32
 (
__w
.__l[0]); \

135 
__r
.
__Î
; }))

	)

138 
	#__bsw­_cÚ¡ªt_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
è& 0x00000000000000ffuÎè<< 56))

	)

148 
__le
 
__ut64_t


149 
	$__bsw­_64
 (
__ut64_t
 
__bsx
)

151  
	`__bsw­_cÚ¡ªt_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #iâdeà
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/select.h

18 #iâdeà
_SYS_SELECT_H


22 
	~<bs/wÜdsize.h
>

25 #ià
defed
 
__GNUC__
 && __GNUC__ >= 2

27 #ià
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "¡osq"

	)

30 
	#__FD_ZERO_STOS
 "¡o¦"

	)

33 
	#__FD_ZERO
(
fd¥
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vÞ©e__
 ("þd;; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd¥
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¬r
 = (
£t
); \

52 
__i
 = 0; __<  (
fd_£t
è/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¬r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((è(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |ð
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((è(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &ð~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)è!ð0)

	)

	@/usr/include/bits/select2.h

19 #iâdeà
_SYS_SELECT_H


24 
__fdt_chk
 (
__d
);

25 
	$__fdt_w¬n
 (
__d
)

26 
	`__w¬Çr
 ("bit outside of fd_set selected");

27 #undeà
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exnsiÚ__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__but_cÚ¡ªt_p
 (
__d
) \

32 ? (0 <ð
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdt_w¬n
 (
__d
)) \

35 : 
	`__fdt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

19 #iâdef 
_SIGSET_H_ty³s


20 
	#_SIGSET_H_ty³s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__v®
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #ià!
defed
 
_SIGSET_H_âs
 && defed 
_SIGNAL_H


42 
	#_SIGSET_H_âs
 1

	)

44 #iâdeà
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exº_le


	)

49 
	#__sigmask
(
sig
) \

50 (((è1è<< (((
sig
è- 1è% (8 *  ())))

	)

53 
	#__sigwÜd
(
sig
è(((sigè- 1è/ (8 *  ()))

	)

55 #ià
defed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exnsiÚ__
 ({ 
__út
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__út
 >ð0è
__£t
->
__v®
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfl£t
(
£t
) \

62 (
	`__exnsiÚ__
 ({ 
__út
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__út
 >ð0è
__£t
->
__v®
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifdeà
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exnsiÚ__
 ({ 
__út
 = 
_SIGSET_NWORDS
; \

73 cÚ¡ 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__»t
 = 
__£t
->
__v®
[--
__út
]; \

75 !
__»t
 && --
__út
 >= 0) \

76 
__»t
 = 
__£t
->
__v®
[
__út
]; \

77 
__»t
 =ð0; }))

	)

78 
	#__sigªd£t
(
de¡
, 
Ëá
, 
right
) \

79 (
	`__exnsiÚ__
 ({ 
__út
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de¡
 = (
de¡
); \

81 cÚ¡ 
sig£t_t
 *
__Ëá
 = (
Ëá
); \

82 cÚ¡ 
sig£t_t
 *
__right
 = (
right
); \

83 --
__út
 >= 0) \

84 
__de¡
->
__v®
[
__út
] = (
__Ëá
->__val[__cnt] \

85 & 
__right
->
__v®
[
__út
]); \

86 0; }))

	)

87 
	#__sigÜ£t
(
de¡
, 
Ëá
, 
right
) \

88 (
	`__exnsiÚ__
 ({ 
__út
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de¡
 = (
de¡
); \

90 cÚ¡ 
sig£t_t
 *
__Ëá
 = (
Ëá
); \

91 cÚ¡ 
sig£t_t
 *
__right
 = (
right
); \

92 --
__út
 >= 0) \

93 
__de¡
->
__v®
[
__út
] = (
__Ëá
->__val[__cnt] \

94 | 
__right
->
__v®
[
__út
]); \

95 0; }))

	)

102 
__sigismemb
 (cÚ¡ 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigd£t
 (
__sig£t_t
 *, );

106 #ifdeà
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__wÜd
 = 
	`__sigwÜd
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismemb
, (
__£t
->
__v®
[
__wÜd
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__v®
[
__wÜd
] |ð
__mask
), 0), )

118 
__SIGSETFN
 (
__sigd£t
, ((
__£t
->
__v®
[
__wÜd
] &ð~
__mask
), 0), )

120 #undeà
__SIGSETFN


	@/usr/include/bits/time.h

23 #ià
defed
 
__Ãed_timev®
 || defed 
__USE_GNU


24 #iâdeà
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bs/ty³s.h
>

30 
	stimev®


32 
__time_t
 
	mtv_£c
;

33 
__su£cÚds_t
 
	mtv_u£c
;

38 #iâdeà
__Ãed_timev®


39 #iâdeà
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
þock_t
è1000000)

	)

50 #ià(!
defed
 
__STRICT_ANSI__
 || defed 
__USE_POSIX
) \

51 && !
defed
 
	g__USE_XOPEN2K


54 
	~<bs/ty³s.h
>

55 
__syscÚf
 ();

56 
	#CLK_TCK
 ((
__þock_t
è
	`__syscÚf
 (2)è

	)

59 #ifdeà
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifdeà
__USE_GNU


88 
	~<bs/timex.h
>

90 
__BEGIN_DECLS


93 
	$þock_adjtime
 (
__þockid_t
 
__þock_id
, 
timex
 *
__utx
è
__THROW
;

95 
__END_DECLS


101 #undeà
__Ãed_timev®


	@/usr/include/bits/typesizes.h

19 #iâdeà
_BITS_TYPES_H


23 #iâdef 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #ià
defed
 
__x86_64__
 && defed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifdeà
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 suù { 
__v®
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifdeà
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs-32.h

6 #ifdeà
_LIBC


7 #rÜ 
AµliÿtiÚs
 
may
 
nÙ
 
defe
 
the
 
maüo
 
_LIBC


10 
	#__¡ub_chæags


	)

11 
	#__¡ub_çach


	)

12 
	#__¡ub_fchæags


	)

13 
	#__¡ub_fdach


	)

14 
	#__¡ub_gy


	)

15 
	#__¡ub_lchmod


	)

16 
	#__¡ub_»voke


	)

17 
	#__¡ub_£og


	)

18 
	#__¡ub_sig»tuº


	)

19 
	#__¡ub_s¡k


	)

20 
	#__¡ub_¡ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifdeà
_LIBC


7 #rÜ 
AµliÿtiÚs
 
may
 
nÙ
 
defe
 
the
 
maüo
 
_LIBC


10 
	#__¡ub___com·t_bdæush


	)

11 
	#__¡ub_chæags


	)

12 
	#__¡ub_çach


	)

13 
	#__¡ub_fchæags


	)

14 
	#__¡ub_fdach


	)

15 
	#__¡ub_gmsg


	)

16 
	#__¡ub_gy


	)

17 
	#__¡ub_lchmod


	)

18 
	#__¡ub_putmsg


	)

19 
	#__¡ub_»voke


	)

20 
	#__¡ub_£og


	)

21 
	#__¡ub_sig»tuº


	)

22 
	#__¡ub_s¡k


	)

23 
	#__¡ub_¡ty


	)

	@/usr/include/bits/byteswap-16.h

19 #iâdeà
_BITS_BYTESWAP_H


23 #ifdeà
__GNUC__


24 #ià
__GNUC__
 >= 2

25 
	#__bsw­_16
(
x
) \

26 (
__exnsiÚ__
 \

27 ({ 
__v
, 
__x
 = (è(
x
); \

28 ià(
	`__but_cÚ¡ªt_p
 (
__x
)) \

29 
__v
 = 
	`__bsw­_cÚ¡ªt_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "ô" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw­_16
(
x
) \

39 (
__exnsiÚ__
 \

40 ({ 
__x
 = (è(
x
); \

41 
	`__bsw­_cÚ¡ªt_16
 (
__x
); }))

	)

44 
__le
 

45 
	$__bsw­_16
 (
__bsx
)

47  
	`__bsw­_cÚ¡ªt_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/timex.h

18 #iâdef 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bs/ty³s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysÿÎ_¦Úg_t
 
	moff£t
;

29 
__sysÿÎ_¦Úg_t
 
	mäeq
;

30 
__sysÿÎ_¦Úg_t
 
	mmaxrÜ
;

31 
__sysÿÎ_¦Úg_t
 
	me¡rÜ
;

32 
	m¡©us
;

33 
__sysÿÎ_¦Úg_t
 
	mcÚ¡ªt
;

34 
__sysÿÎ_¦Úg_t
 
	m´ecisiÚ
;

35 
__sysÿÎ_¦Úg_t
 
	mtÞªû
;

36 
timev®
 
	mtime
;

37 
__sysÿÎ_¦Úg_t
 
	mtick
;

38 
__sysÿÎ_¦Úg_t
 
	mµsäeq
;

39 
__sysÿÎ_¦Úg_t
 
	mjr
;

40 
	mshiá
;

41 
__sysÿÎ_¦Úg_t
 
	m¡ab
;

42 
__sysÿÎ_¦Úg_t
 
	mjút
;

43 
__sysÿÎ_¦Úg_t
 
	mÿlút
;

44 
__sysÿÎ_¦Úg_t
 
	mrút
;

45 
__sysÿÎ_¦Úg_t
 
	m¡bút
;

47 
	mi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@
1
.
1
/usr/include
67
3133
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/config/sdk_config.h
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_flash.c
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_flash.h
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_gpio.c
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_gpio.h
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_main.c
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_nrf_esb.c
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_nrf_gzll.c
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_prx.h
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_rf.c
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_rf.h
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_ringbuf.c
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_ringbuf.h
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_spis.c
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_spis.h
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_timer.c
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_timer.h
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_twis.c
/home/mjpu/works/gvc3220/nrf52832/SDK/SDK_15_02/examples/gs/gvc3220/nrf52832/wireless_mic/app/gs_twis.h
/usr/include/stdint.h
/usr/include/stdlib.h
/usr/include/string.h
gs_flash.h
gs_gpio.h
gs_nrf_esb.c
gs_nrf_gzll.c
gs_prx.h
gs_rf.h
gs_ringbuf.h
gs_spis.h
gs_timer.h
gs_twis.h
/usr/include/alloca.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/features.h
/usr/include/sys/types.h
/usr/include/xlocale.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/types.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/timex.h
